/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { EPageType, ERefineMode, ESelectionMode, ESelectionType, EWorkflowType, IInventoryItem, IItemDetails, IItemShare, IOrganizationVariableItem, IResourcePath, ISearchConfig, ISelectionSet, ISolutionConfiguration, ISolutionItem, ISolutionSpatialReferenceInfo, ISpatialRefRepresentation, ITemplateData, IVariableItem, SelectionMode } from "./utils/interfaces";
import { UserSession } from "@esri/solution-common";
export namespace Components {
    interface BufferTools {
        "distance": number;
        "geometries": __esri.Geometry[];
        "translations": any;
        "unionResults": boolean;
        "unit": __esri.LinearUnits;
    }
    interface ConfigMapSearch {
        "getConfig": () => Promise<ISearchConfig>;
        "layers": any[];
        "useLayerUrl": boolean;
        "useLocatorUrl": boolean;
    }
    interface ConfigPublicNotification {
        "isOpen": boolean;
        "layerNames": string[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * Contains the translations for this component.
         */
        "translations": any;
    }
    interface DemoMap {
        "webmapid": string;
        "zoom": number;
    }
    interface JsonEditor {
        /**
          * Contains a public value to indicate if the model has any errors that would prevent saving it.
         */
        "hasErrors": boolean;
        /**
          * Contains a unique identifier for when we have multiple instances of the editor. For example when we want to show an items data as well as an items properties.  Need to rethink this..would like it to be more generic. We are currently tied to either data or props as this helps us know how to get the correct model from the store.
         */
        "instanceid": any;
        /**
          * Contains the public model for this component.
         */
        "model": any;
        /**
          * Contains the original source item json as it was when the component was created.
         */
        "original": any;
        "reset": () => Promise<any>;
        /**
          * Contains the translations for this component.
         */
        "translations": any;
        /**
          * Contains the public value for this component. This should be an item Id for one of the models in the store.
         */
        "value": any;
    }
    interface MapDrawTools {
        /**
          * boolean: sketch is used by multiple components...need a way to know who should respond...
         */
        "active": boolean;
        "clear": () => Promise<void>;
        /**
          * esri/Graphic: https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html
         */
        "graphics": __esri.Graphic[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * esri/symbols/SimpleMarkerSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleMarkerSymbol.html
         */
        "pointSymbol": __esri.SimpleMarkerSymbol;
        /**
          * esri/symbols/SimpleFillSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleFillSymbol.html
         */
        "polygonSymbol": __esri.SimpleFillSymbol;
        /**
          * esri/symbols/SimpleLineSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleLineSymbol.html
         */
        "polylineSymbol": __esri.SimpleLineSymbol;
        /**
          * esri/widgets/Sketch: https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Sketch.html
         */
        "sketchWidget": __esri.Sketch;
        /**
          * Contains the translations for this component. All UI strings should be defined here.
         */
        "translations": any;
    }
    interface MapLayerPicker {
        /**
          * string: The label to render above the combobox.
         */
        "label": string;
        /**
          * string[]: list of layer names from the map
         */
        "layerNames": string[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * string[]: list of layers that have been selected by the end user
         */
        "selectedLayers": string[];
        /**
          * SelectionMode: "single" | "multi"  Should the component support selection against a single layer or multiple layers.
         */
        "selectionMode": SelectionMode;
        /**
          * Contains the translations for this component. All UI strings should be defined here.
         */
        "translations": any;
    }
    interface MapSelectTools {
        "clearSelection": () => Promise<void>;
        /**
          * esri/geometry: https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry.html
         */
        "geometries": __esri.Geometry[];
        "getSelectType": () => Promise<EWorkflowType>;
        "getSelectedIds": () => Promise<number[]>;
        "getSelection": () => Promise<ISelectionSet>;
        "getSelectionLabel": () => Promise<string>;
        /**
          * boolean: When true a new label is not generated for the stored selection set
         */
        "isUpdate": boolean;
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * esri/layers/Layer: https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html
         */
        "searchLayers": __esri.Layer[];
        /**
          * string: Text entered by the end user. Used to search against the locator.
         */
        "searchTerm": string;
        /**
          * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html
         */
        "selectLayerView": __esri.FeatureLayerView;
        /**
          * utils/interfaces/ISelectionSet: Used to store key details about any selections that have been made.
         */
        "selectionSet": ISelectionSet;
        /**
          * Contains the translations for this component. All UI strings should be defined here.
         */
        "translations": any;
        /**
          * EWorkflowType: "SEARCH", "SELECT", "SKETCH", "REFINE"
         */
        "workflowType": EWorkflowType;
    }
    interface PdfDownload {
        /**
          * Contains the translations for this component. All UI strings should be defined here.
         */
        "translations": any;
    }
    interface PublicNotificationTwo {
        "addresseeLayer": __esri.FeatureLayerView;
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        "message": string;
        "numSelected": number;
        "pageType": EPageType;
        "saveEnabled": boolean;
        "selectionLayers": __esri.Layer[];
        "selectionSets": ISelectionSet[];
        "translations": any;
    }
    interface RefineSelectionTools {
        "active": boolean;
        "graphics": __esri.Graphic[];
        "ids": number[];
        "layerView": __esri.FeatureLayerView;
        "layerViews": __esri.FeatureLayerView[];
        "mapView": __esri.MapView;
        "mode": ESelectionMode;
        "refineMode": ERefineMode;
        "selectEnbaled": boolean;
        "selectionMode": ESelectionType;
        "translations": any;
        "useLayerPicker": boolean;
    }
    interface SolutionConfiguration {
        /**
          * Credentials for requests
         */
        "authentication": UserSession;
        "getEditModels": () => Promise<any>;
        "getSourceTemplates": () => Promise<any>;
        "getSpatialReferenceInfo": () => Promise<ISolutionSpatialReferenceInfo>;
        /**
          * Contains the current solution item we are working with
         */
        "item": ISolutionItem;
        /**
          * Contains the current solution item id
         */
        "itemid": string;
        "save": () => Promise<any>;
        /**
          * Used to show/hide loading indicator
         */
        "showLoading": boolean;
        /**
          * Contains the current solution item data
         */
        "sourceItemData": any;
        /**
          * Contains the raw templates from the solution item
         */
        "templates": any[];
        /**
          * Contains the translations for this component.
         */
        "translations": any;
        /**
          * Used to show/hide the content tree
         */
        "treeOpen": boolean;
        /**
          * Contains the public value for this component.
         */
        "value": ISolutionConfiguration;
    }
    interface SolutionContents {
        /**
          * Contains the current item that is selected.
         */
        "selectedItem": ISolutionItem;
        /**
          * Contains the translations for this component.
         */
        "translations": any;
        /**
          * Contains the public value for this component.
         */
        "value": IInventoryItem[];
    }
    interface SolutionItem {
        /**
          * Credentials for requests
         */
        "authentication": UserSession;
        /**
          * Contains the organization based variables
         */
        "organizationVariables": any[];
        /**
          * Contains the solution based variables
         */
        "solutionVariables": any[];
        /**
          * Contains the translations for this component.
         */
        "translations": any;
        /**
          * Contains the public value for this component.
         */
        "value": ISolutionItem;
    }
    interface SolutionItemDetails {
        /**
          * Contains the translations for this component.
         */
        "translations": any;
        /**
          * Contains the public type for this component.
         */
        "type": string;
        /**
          * Contains the public value for this component.
         */
        "value": IItemDetails;
    }
    interface SolutionItemIcon {
        /**
          * Indicate if this is portal
         */
        "isPortal": boolean;
        /**
          * Contains the translations for this component.
         */
        "translations": any;
        /**
          * The type for the item
         */
        "type": string;
        /**
          * The typeKeywords for the item
         */
        "typeKeywords": string[];
    }
    interface SolutionItemSharing {
        "getShareInfo": () => Promise<any>;
        /**
          * Contains the public id for the group these items will be shared or un-shared with.
         */
        "groupId": string;
        /**
          * Contains the translations for this component.
         */
        "translations": any;
        /**
          * Contains the public value for this component.
         */
        "value": IItemShare[];
    }
    interface SolutionOrganizationVariables {
        /**
          * Contains the translations for this component.
         */
        "translations": any;
        /**
          * Contains the public value for this component.
         */
        "value": IOrganizationVariableItem[];
    }
    interface SolutionResourceItem {
        /**
          * Credentials for requests
         */
        "authentication": UserSession;
        /**
          * The templates itemId. This is used to get the correct model from a store in the json-editor
         */
        "itemid": string;
        /**
          * The templates resourceFilePaths.
         */
        "resourceFilePaths": IResourcePath[];
        /**
          * The templates resources.
         */
        "resources": {};
        /**
          * Contains the translations for this component.
         */
        "translations": any;
    }
    interface SolutionSpatialRef {
        /**
          * Returns the spatial reference description of the supplied value. (Exposes private method `_createSpatialRefDisplay` for testing.)
          * @param value WKID or WKT or null for default
          * @returns If component is using a WKID, description using WKID; otherwise, the WKT; defaults to 102100
         */
        "createSpatialRefDisplay": (value: string) => Promise<ISpatialRefRepresentation>;
        /**
          * The wkid that will be used as the default when no user selection has been made.
         */
        "defaultWkid": number;
        /**
          * Returns the current spatial reference description. (Exposes private variable `spatialRef` for testing.)
         */
        "getSpatialRef": () => Promise<ISpatialRefRepresentation>;
        /**
          * Indicates if the control has been enabled. The first time Spatial Reference has been enabled it should enable all feature services.
         */
        "loaded": boolean;
        /**
          * When true, all but the main switch are disabled to prevent interaction.
         */
        "locked": boolean;
        /**
          * List of service names the spatial reference should apply to
         */
        "services": string[];
        /**
          * Contains the translations for this component.
         */
        "translations": any;
        /**
          * Contains the public value for this component.
         */
        "value": string;
        /**
          * Converts a WKID into a spatial reference description. (Exposes private method `_wkidToDisplay` for testing.)
          * @param wkid WKID to look up
          * @returns Description, or "WKID &lt;wkid&gt;" if a description doesn't exist for the WKID
         */
        "wkidToDisplay": (wkid: number) => Promise<string>;
    }
    interface SolutionTemplateData {
        /**
          * Credentials for requests
         */
        "authentication": UserSession;
        /**
          * This needs to be unique for props vs data of an item
         */
        "instanceid": string;
        /**
          * A templates itemId. This is used to get the correct model from a store in the json-editor
         */
        "itemid": string;
        /**
          * Contains the organization based variables
         */
        "organizationVariables": IOrganizationVariableItem[];
        /**
          * Contains the solution based variables
         */
        "solutionVariables": IVariableItem[];
        /**
          * Contains the translations for this component.
         */
        "translations": any;
        /**
          * Contains the public value for this component.  When working with a resource item this should contain an IResourceItem  When working with a json type item this should contain the data and vars
         */
        "value": ITemplateData;
        /**
          * Used to show/hide the variable containers
         */
        "varsOpen": boolean;
    }
    interface SolutionVariables {
        /**
          * Contains the translations for this component.
         */
        "translations": any;
        /**
          * Contains the public value for this component.
         */
        "value": IVariableItem[];
    }
    interface StoreManager {
        /**
          * Credentials for requests
         */
        "authentication": UserSession;
        /**
          * Templates for the current solution
         */
        "templates": any[];
        /**
          * Contains source json as a string
         */
        "value": string;
    }
}
export interface BufferToolsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBufferToolsElement;
}
export interface ConfigPublicNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLConfigPublicNotificationElement;
}
export interface MapDrawToolsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMapDrawToolsElement;
}
export interface MapLayerPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMapLayerPickerElement;
}
export interface MapSelectToolsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMapSelectToolsElement;
}
export interface RefineSelectionToolsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRefineSelectionToolsElement;
}
export interface SolutionConfigurationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSolutionConfigurationElement;
}
export interface SolutionContentsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSolutionContentsElement;
}
export interface SolutionOrganizationVariablesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSolutionOrganizationVariablesElement;
}
export interface SolutionSpatialRefCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSolutionSpatialRefElement;
}
export interface SolutionVariablesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSolutionVariablesElement;
}
export interface StoreManagerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStoreManagerElement;
}
declare global {
    interface HTMLBufferToolsElement extends Components.BufferTools, HTMLStencilElement {
    }
    var HTMLBufferToolsElement: {
        prototype: HTMLBufferToolsElement;
        new (): HTMLBufferToolsElement;
    };
    interface HTMLConfigMapSearchElement extends Components.ConfigMapSearch, HTMLStencilElement {
    }
    var HTMLConfigMapSearchElement: {
        prototype: HTMLConfigMapSearchElement;
        new (): HTMLConfigMapSearchElement;
    };
    interface HTMLConfigPublicNotificationElement extends Components.ConfigPublicNotification, HTMLStencilElement {
    }
    var HTMLConfigPublicNotificationElement: {
        prototype: HTMLConfigPublicNotificationElement;
        new (): HTMLConfigPublicNotificationElement;
    };
    interface HTMLDemoMapElement extends Components.DemoMap, HTMLStencilElement {
    }
    var HTMLDemoMapElement: {
        prototype: HTMLDemoMapElement;
        new (): HTMLDemoMapElement;
    };
    interface HTMLJsonEditorElement extends Components.JsonEditor, HTMLStencilElement {
    }
    var HTMLJsonEditorElement: {
        prototype: HTMLJsonEditorElement;
        new (): HTMLJsonEditorElement;
    };
    interface HTMLMapDrawToolsElement extends Components.MapDrawTools, HTMLStencilElement {
    }
    var HTMLMapDrawToolsElement: {
        prototype: HTMLMapDrawToolsElement;
        new (): HTMLMapDrawToolsElement;
    };
    interface HTMLMapLayerPickerElement extends Components.MapLayerPicker, HTMLStencilElement {
    }
    var HTMLMapLayerPickerElement: {
        prototype: HTMLMapLayerPickerElement;
        new (): HTMLMapLayerPickerElement;
    };
    interface HTMLMapSelectToolsElement extends Components.MapSelectTools, HTMLStencilElement {
    }
    var HTMLMapSelectToolsElement: {
        prototype: HTMLMapSelectToolsElement;
        new (): HTMLMapSelectToolsElement;
    };
    interface HTMLPdfDownloadElement extends Components.PdfDownload, HTMLStencilElement {
    }
    var HTMLPdfDownloadElement: {
        prototype: HTMLPdfDownloadElement;
        new (): HTMLPdfDownloadElement;
    };
    interface HTMLPublicNotificationTwoElement extends Components.PublicNotificationTwo, HTMLStencilElement {
    }
    var HTMLPublicNotificationTwoElement: {
        prototype: HTMLPublicNotificationTwoElement;
        new (): HTMLPublicNotificationTwoElement;
    };
    interface HTMLRefineSelectionToolsElement extends Components.RefineSelectionTools, HTMLStencilElement {
    }
    var HTMLRefineSelectionToolsElement: {
        prototype: HTMLRefineSelectionToolsElement;
        new (): HTMLRefineSelectionToolsElement;
    };
    interface HTMLSolutionConfigurationElement extends Components.SolutionConfiguration, HTMLStencilElement {
    }
    var HTMLSolutionConfigurationElement: {
        prototype: HTMLSolutionConfigurationElement;
        new (): HTMLSolutionConfigurationElement;
    };
    interface HTMLSolutionContentsElement extends Components.SolutionContents, HTMLStencilElement {
    }
    var HTMLSolutionContentsElement: {
        prototype: HTMLSolutionContentsElement;
        new (): HTMLSolutionContentsElement;
    };
    interface HTMLSolutionItemElement extends Components.SolutionItem, HTMLStencilElement {
    }
    var HTMLSolutionItemElement: {
        prototype: HTMLSolutionItemElement;
        new (): HTMLSolutionItemElement;
    };
    interface HTMLSolutionItemDetailsElement extends Components.SolutionItemDetails, HTMLStencilElement {
    }
    var HTMLSolutionItemDetailsElement: {
        prototype: HTMLSolutionItemDetailsElement;
        new (): HTMLSolutionItemDetailsElement;
    };
    interface HTMLSolutionItemIconElement extends Components.SolutionItemIcon, HTMLStencilElement {
    }
    var HTMLSolutionItemIconElement: {
        prototype: HTMLSolutionItemIconElement;
        new (): HTMLSolutionItemIconElement;
    };
    interface HTMLSolutionItemSharingElement extends Components.SolutionItemSharing, HTMLStencilElement {
    }
    var HTMLSolutionItemSharingElement: {
        prototype: HTMLSolutionItemSharingElement;
        new (): HTMLSolutionItemSharingElement;
    };
    interface HTMLSolutionOrganizationVariablesElement extends Components.SolutionOrganizationVariables, HTMLStencilElement {
    }
    var HTMLSolutionOrganizationVariablesElement: {
        prototype: HTMLSolutionOrganizationVariablesElement;
        new (): HTMLSolutionOrganizationVariablesElement;
    };
    interface HTMLSolutionResourceItemElement extends Components.SolutionResourceItem, HTMLStencilElement {
    }
    var HTMLSolutionResourceItemElement: {
        prototype: HTMLSolutionResourceItemElement;
        new (): HTMLSolutionResourceItemElement;
    };
    interface HTMLSolutionSpatialRefElement extends Components.SolutionSpatialRef, HTMLStencilElement {
    }
    var HTMLSolutionSpatialRefElement: {
        prototype: HTMLSolutionSpatialRefElement;
        new (): HTMLSolutionSpatialRefElement;
    };
    interface HTMLSolutionTemplateDataElement extends Components.SolutionTemplateData, HTMLStencilElement {
    }
    var HTMLSolutionTemplateDataElement: {
        prototype: HTMLSolutionTemplateDataElement;
        new (): HTMLSolutionTemplateDataElement;
    };
    interface HTMLSolutionVariablesElement extends Components.SolutionVariables, HTMLStencilElement {
    }
    var HTMLSolutionVariablesElement: {
        prototype: HTMLSolutionVariablesElement;
        new (): HTMLSolutionVariablesElement;
    };
    interface HTMLStoreManagerElement extends Components.StoreManager, HTMLStencilElement {
    }
    var HTMLStoreManagerElement: {
        prototype: HTMLStoreManagerElement;
        new (): HTMLStoreManagerElement;
    };
    interface HTMLElementTagNameMap {
        "buffer-tools": HTMLBufferToolsElement;
        "config-map-search": HTMLConfigMapSearchElement;
        "config-public-notification": HTMLConfigPublicNotificationElement;
        "demo-map": HTMLDemoMapElement;
        "json-editor": HTMLJsonEditorElement;
        "map-draw-tools": HTMLMapDrawToolsElement;
        "map-layer-picker": HTMLMapLayerPickerElement;
        "map-select-tools": HTMLMapSelectToolsElement;
        "pdf-download": HTMLPdfDownloadElement;
        "public-notification-two": HTMLPublicNotificationTwoElement;
        "refine-selection-tools": HTMLRefineSelectionToolsElement;
        "solution-configuration": HTMLSolutionConfigurationElement;
        "solution-contents": HTMLSolutionContentsElement;
        "solution-item": HTMLSolutionItemElement;
        "solution-item-details": HTMLSolutionItemDetailsElement;
        "solution-item-icon": HTMLSolutionItemIconElement;
        "solution-item-sharing": HTMLSolutionItemSharingElement;
        "solution-organization-variables": HTMLSolutionOrganizationVariablesElement;
        "solution-resource-item": HTMLSolutionResourceItemElement;
        "solution-spatial-ref": HTMLSolutionSpatialRefElement;
        "solution-template-data": HTMLSolutionTemplateDataElement;
        "solution-variables": HTMLSolutionVariablesElement;
        "store-manager": HTMLStoreManagerElement;
    }
}
declare namespace LocalJSX {
    interface BufferTools {
        "distance"?: number;
        "geometries"?: __esri.Geometry[];
        "onBufferComplete"?: (event: BufferToolsCustomEvent<any>) => void;
        "translations"?: any;
        "unionResults"?: boolean;
        "unit"?: __esri.LinearUnits;
    }
    interface ConfigMapSearch {
        "layers"?: any[];
        "useLayerUrl"?: boolean;
        "useLocatorUrl"?: boolean;
    }
    interface ConfigPublicNotification {
        "isOpen"?: boolean;
        "layerNames"?: string[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        "onConfigSaved"?: (event: ConfigPublicNotificationCustomEvent<any>) => void;
        /**
          * Contains the translations for this component.
         */
        "translations"?: any;
    }
    interface DemoMap {
        "webmapid"?: string;
        "zoom"?: number;
    }
    interface JsonEditor {
        /**
          * Contains a public value to indicate if the model has any errors that would prevent saving it.
         */
        "hasErrors"?: boolean;
        /**
          * Contains a unique identifier for when we have multiple instances of the editor. For example when we want to show an items data as well as an items properties.  Need to rethink this..would like it to be more generic. We are currently tied to either data or props as this helps us know how to get the correct model from the store.
         */
        "instanceid"?: any;
        /**
          * Contains the public model for this component.
         */
        "model"?: any;
        /**
          * Contains the original source item json as it was when the component was created.
         */
        "original"?: any;
        /**
          * Contains the translations for this component.
         */
        "translations"?: any;
        /**
          * Contains the public value for this component. This should be an item Id for one of the models in the store.
         */
        "value"?: any;
    }
    interface MapDrawTools {
        /**
          * boolean: sketch is used by multiple components...need a way to know who should respond...
         */
        "active"?: boolean;
        /**
          * esri/Graphic: https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html
         */
        "graphics"?: __esri.Graphic[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        "onSketchGraphicsChange"?: (event: MapDrawToolsCustomEvent<any>) => void;
        /**
          * esri/symbols/SimpleMarkerSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleMarkerSymbol.html
         */
        "pointSymbol"?: __esri.SimpleMarkerSymbol;
        /**
          * esri/symbols/SimpleFillSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleFillSymbol.html
         */
        "polygonSymbol"?: __esri.SimpleFillSymbol;
        /**
          * esri/symbols/SimpleLineSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleLineSymbol.html
         */
        "polylineSymbol"?: __esri.SimpleLineSymbol;
        /**
          * esri/widgets/Sketch: https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Sketch.html
         */
        "sketchWidget"?: __esri.Sketch;
        /**
          * Contains the translations for this component. All UI strings should be defined here.
         */
        "translations"?: any;
    }
    interface MapLayerPicker {
        /**
          * string: The label to render above the combobox.
         */
        "label"?: string;
        /**
          * string[]: list of layer names from the map
         */
        "layerNames"?: string[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        "onLayerSelectionChange"?: (event: MapLayerPickerCustomEvent<any>) => void;
        /**
          * string[]: list of layers that have been selected by the end user
         */
        "selectedLayers"?: string[];
        /**
          * SelectionMode: "single" | "multi"  Should the component support selection against a single layer or multiple layers.
         */
        "selectionMode"?: SelectionMode;
        /**
          * Contains the translations for this component. All UI strings should be defined here.
         */
        "translations"?: any;
    }
    interface MapSelectTools {
        /**
          * esri/geometry: https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry.html
         */
        "geometries"?: __esri.Geometry[];
        /**
          * boolean: When true a new label is not generated for the stored selection set
         */
        "isUpdate"?: boolean;
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        "onSelectionSetChange"?: (event: MapSelectToolsCustomEvent<any>) => void;
        /**
          * esri/layers/Layer: https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html
         */
        "searchLayers"?: __esri.Layer[];
        /**
          * string: Text entered by the end user. Used to search against the locator.
         */
        "searchTerm"?: string;
        /**
          * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html
         */
        "selectLayerView"?: __esri.FeatureLayerView;
        /**
          * utils/interfaces/ISelectionSet: Used to store key details about any selections that have been made.
         */
        "selectionSet"?: ISelectionSet;
        /**
          * Contains the translations for this component. All UI strings should be defined here.
         */
        "translations"?: any;
        /**
          * EWorkflowType: "SEARCH", "SELECT", "SKETCH", "REFINE"
         */
        "workflowType"?: EWorkflowType;
    }
    interface PdfDownload {
        /**
          * Contains the translations for this component. All UI strings should be defined here.
         */
        "translations"?: any;
    }
    interface PublicNotificationTwo {
        "addresseeLayer"?: __esri.FeatureLayerView;
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        "message"?: string;
        "numSelected"?: number;
        "pageType"?: EPageType;
        "saveEnabled"?: boolean;
        "selectionLayers"?: __esri.Layer[];
        "selectionSets"?: ISelectionSet[];
        "translations"?: any;
    }
    interface RefineSelectionTools {
        "active"?: boolean;
        "graphics"?: __esri.Graphic[];
        "ids"?: number[];
        "layerView"?: __esri.FeatureLayerView;
        "layerViews"?: __esri.FeatureLayerView[];
        "mapView"?: __esri.MapView;
        "mode"?: ESelectionMode;
        "onRefineSelectionChange"?: (event: RefineSelectionToolsCustomEvent<any>) => void;
        "refineMode"?: ERefineMode;
        "selectEnbaled"?: boolean;
        "selectionMode"?: ESelectionType;
        "translations"?: any;
        "useLayerPicker"?: boolean;
    }
    interface SolutionConfiguration {
        /**
          * Credentials for requests
         */
        "authentication"?: UserSession;
        /**
          * Contains the current solution item we are working with
         */
        "item"?: ISolutionItem;
        /**
          * Contains the current solution item id
         */
        "itemid"?: string;
        "onSolutionLoaded"?: (event: SolutionConfigurationCustomEvent<any>) => void;
        /**
          * Used to show/hide loading indicator
         */
        "showLoading"?: boolean;
        /**
          * Contains the current solution item data
         */
        "sourceItemData"?: any;
        /**
          * Contains the raw templates from the solution item
         */
        "templates"?: any[];
        /**
          * Contains the translations for this component.
         */
        "translations"?: any;
        /**
          * Used to show/hide the content tree
         */
        "treeOpen"?: boolean;
        /**
          * Contains the public value for this component.
         */
        "value"?: ISolutionConfiguration;
    }
    interface SolutionContents {
        "onSolutionItemSelected"?: (event: SolutionContentsCustomEvent<any>) => void;
        /**
          * Contains the current item that is selected.
         */
        "selectedItem"?: ISolutionItem;
        /**
          * Contains the translations for this component.
         */
        "translations"?: any;
        /**
          * Contains the public value for this component.
         */
        "value"?: IInventoryItem[];
    }
    interface SolutionItem {
        /**
          * Credentials for requests
         */
        "authentication"?: UserSession;
        /**
          * Contains the organization based variables
         */
        "organizationVariables"?: any[];
        /**
          * Contains the solution based variables
         */
        "solutionVariables"?: any[];
        /**
          * Contains the translations for this component.
         */
        "translations"?: any;
        /**
          * Contains the public value for this component.
         */
        "value"?: ISolutionItem;
    }
    interface SolutionItemDetails {
        /**
          * Contains the translations for this component.
         */
        "translations"?: any;
        /**
          * Contains the public type for this component.
         */
        "type"?: string;
        /**
          * Contains the public value for this component.
         */
        "value"?: IItemDetails;
    }
    interface SolutionItemIcon {
        /**
          * Indicate if this is portal
         */
        "isPortal"?: boolean;
        /**
          * Contains the translations for this component.
         */
        "translations"?: any;
        /**
          * The type for the item
         */
        "type"?: string;
        /**
          * The typeKeywords for the item
         */
        "typeKeywords"?: string[];
    }
    interface SolutionItemSharing {
        /**
          * Contains the public id for the group these items will be shared or un-shared with.
         */
        "groupId"?: string;
        /**
          * Contains the translations for this component.
         */
        "translations"?: any;
        /**
          * Contains the public value for this component.
         */
        "value"?: IItemShare[];
    }
    interface SolutionOrganizationVariables {
        "onOrganizationVariableSelected"?: (event: SolutionOrganizationVariablesCustomEvent<any>) => void;
        /**
          * Contains the translations for this component.
         */
        "translations"?: any;
        /**
          * Contains the public value for this component.
         */
        "value"?: IOrganizationVariableItem[];
    }
    interface SolutionResourceItem {
        /**
          * Credentials for requests
         */
        "authentication"?: UserSession;
        /**
          * The templates itemId. This is used to get the correct model from a store in the json-editor
         */
        "itemid"?: string;
        /**
          * The templates resourceFilePaths.
         */
        "resourceFilePaths"?: IResourcePath[];
        /**
          * The templates resources.
         */
        "resources"?: {};
        /**
          * Contains the translations for this component.
         */
        "translations"?: any;
    }
    interface SolutionSpatialRef {
        /**
          * The wkid that will be used as the default when no user selection has been made.
         */
        "defaultWkid"?: number;
        /**
          * Indicates if the control has been enabled. The first time Spatial Reference has been enabled it should enable all feature services.
         */
        "loaded"?: boolean;
        /**
          * When true, all but the main switch are disabled to prevent interaction.
         */
        "locked"?: boolean;
        "onFeatureServiceSpatialReferenceChange"?: (event: SolutionSpatialRefCustomEvent<any>) => void;
        /**
          * List of service names the spatial reference should apply to
         */
        "services"?: string[];
        /**
          * Contains the translations for this component.
         */
        "translations"?: any;
        /**
          * Contains the public value for this component.
         */
        "value"?: string;
    }
    interface SolutionTemplateData {
        /**
          * Credentials for requests
         */
        "authentication"?: UserSession;
        /**
          * This needs to be unique for props vs data of an item
         */
        "instanceid"?: string;
        /**
          * A templates itemId. This is used to get the correct model from a store in the json-editor
         */
        "itemid"?: string;
        /**
          * Contains the organization based variables
         */
        "organizationVariables"?: IOrganizationVariableItem[];
        /**
          * Contains the solution based variables
         */
        "solutionVariables"?: IVariableItem[];
        /**
          * Contains the translations for this component.
         */
        "translations"?: any;
        /**
          * Contains the public value for this component.  When working with a resource item this should contain an IResourceItem  When working with a json type item this should contain the data and vars
         */
        "value"?: ITemplateData;
        /**
          * Used to show/hide the variable containers
         */
        "varsOpen"?: boolean;
    }
    interface SolutionVariables {
        "onSolutionVariableSelected"?: (event: SolutionVariablesCustomEvent<any>) => void;
        /**
          * Contains the translations for this component.
         */
        "translations"?: any;
        /**
          * Contains the public value for this component.
         */
        "value"?: IVariableItem[];
    }
    interface StoreManager {
        /**
          * Credentials for requests
         */
        "authentication"?: UserSession;
        "onStateLoaded"?: (event: StoreManagerCustomEvent<any>) => void;
        /**
          * Templates for the current solution
         */
        "templates"?: any[];
        /**
          * Contains source json as a string
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "buffer-tools": BufferTools;
        "config-map-search": ConfigMapSearch;
        "config-public-notification": ConfigPublicNotification;
        "demo-map": DemoMap;
        "json-editor": JsonEditor;
        "map-draw-tools": MapDrawTools;
        "map-layer-picker": MapLayerPicker;
        "map-select-tools": MapSelectTools;
        "pdf-download": PdfDownload;
        "public-notification-two": PublicNotificationTwo;
        "refine-selection-tools": RefineSelectionTools;
        "solution-configuration": SolutionConfiguration;
        "solution-contents": SolutionContents;
        "solution-item": SolutionItem;
        "solution-item-details": SolutionItemDetails;
        "solution-item-icon": SolutionItemIcon;
        "solution-item-sharing": SolutionItemSharing;
        "solution-organization-variables": SolutionOrganizationVariables;
        "solution-resource-item": SolutionResourceItem;
        "solution-spatial-ref": SolutionSpatialRef;
        "solution-template-data": SolutionTemplateData;
        "solution-variables": SolutionVariables;
        "store-manager": StoreManager;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "buffer-tools": LocalJSX.BufferTools & JSXBase.HTMLAttributes<HTMLBufferToolsElement>;
            "config-map-search": LocalJSX.ConfigMapSearch & JSXBase.HTMLAttributes<HTMLConfigMapSearchElement>;
            "config-public-notification": LocalJSX.ConfigPublicNotification & JSXBase.HTMLAttributes<HTMLConfigPublicNotificationElement>;
            "demo-map": LocalJSX.DemoMap & JSXBase.HTMLAttributes<HTMLDemoMapElement>;
            "json-editor": LocalJSX.JsonEditor & JSXBase.HTMLAttributes<HTMLJsonEditorElement>;
            "map-draw-tools": LocalJSX.MapDrawTools & JSXBase.HTMLAttributes<HTMLMapDrawToolsElement>;
            "map-layer-picker": LocalJSX.MapLayerPicker & JSXBase.HTMLAttributes<HTMLMapLayerPickerElement>;
            "map-select-tools": LocalJSX.MapSelectTools & JSXBase.HTMLAttributes<HTMLMapSelectToolsElement>;
            "pdf-download": LocalJSX.PdfDownload & JSXBase.HTMLAttributes<HTMLPdfDownloadElement>;
            "public-notification-two": LocalJSX.PublicNotificationTwo & JSXBase.HTMLAttributes<HTMLPublicNotificationTwoElement>;
            "refine-selection-tools": LocalJSX.RefineSelectionTools & JSXBase.HTMLAttributes<HTMLRefineSelectionToolsElement>;
            "solution-configuration": LocalJSX.SolutionConfiguration & JSXBase.HTMLAttributes<HTMLSolutionConfigurationElement>;
            "solution-contents": LocalJSX.SolutionContents & JSXBase.HTMLAttributes<HTMLSolutionContentsElement>;
            "solution-item": LocalJSX.SolutionItem & JSXBase.HTMLAttributes<HTMLSolutionItemElement>;
            "solution-item-details": LocalJSX.SolutionItemDetails & JSXBase.HTMLAttributes<HTMLSolutionItemDetailsElement>;
            "solution-item-icon": LocalJSX.SolutionItemIcon & JSXBase.HTMLAttributes<HTMLSolutionItemIconElement>;
            "solution-item-sharing": LocalJSX.SolutionItemSharing & JSXBase.HTMLAttributes<HTMLSolutionItemSharingElement>;
            "solution-organization-variables": LocalJSX.SolutionOrganizationVariables & JSXBase.HTMLAttributes<HTMLSolutionOrganizationVariablesElement>;
            "solution-resource-item": LocalJSX.SolutionResourceItem & JSXBase.HTMLAttributes<HTMLSolutionResourceItemElement>;
            "solution-spatial-ref": LocalJSX.SolutionSpatialRef & JSXBase.HTMLAttributes<HTMLSolutionSpatialRefElement>;
            "solution-template-data": LocalJSX.SolutionTemplateData & JSXBase.HTMLAttributes<HTMLSolutionTemplateDataElement>;
            "solution-variables": LocalJSX.SolutionVariables & JSXBase.HTMLAttributes<HTMLSolutionVariablesElement>;
            "store-manager": LocalJSX.StoreManager & JSXBase.HTMLAttributes<HTMLStoreManagerElement>;
        }
    }
}
