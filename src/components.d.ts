/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { DistanceUnit, EDrawMode, ELayoutMode, IBasemapConfig, IExportInfos, IInventoryItem, IMapChange, IMapInfo, ISearchConfiguration, ISelectionSet, ISketchGraphicsChange, ISolutionSpatialReferenceInfo, ISpatialRefRepresentation, IValueChange, theme } from "./utils/interfaces";
import { UserSession } from "@esri/solution-common";
export { DistanceUnit, EDrawMode, ELayoutMode, IBasemapConfig, IExportInfos, IInventoryItem, IMapChange, IMapInfo, ISearchConfiguration, ISelectionSet, ISketchGraphicsChange, ISolutionSpatialReferenceInfo, ISpatialRefRepresentation, IValueChange, theme } from "./utils/interfaces";
export { UserSession } from "@esri/solution-common";
export namespace Components {
    interface BasemapGallery {
        /**
          * IBasemapConfig: List of any basemaps to filter out from the basemap widget
         */
        "basemapConfig": IBasemapConfig;
        /**
          * esri/widgets/BasemapGallery: https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html  BasemapGallery instance
         */
        "basemapWidget": __esri.BasemapGallery;
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
    }
    interface BufferTools {
        /**
          * string: The appearance of display. Can be a "slider" or "text" inputs for distance/value
         */
        "appearance": "slider" | "text";
        "disabled": boolean;
        /**
          * number: The distance used for buffer
         */
        "distance": number;
        /**
          * esri/geometry/Geometry: https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html
         */
        "geometries": __esri.Geometry[];
        /**
          * Get the translated unit for display
          * @returns Promise resolving with the translated unit
         */
        "getTranslatedUnit": (unit: string) => Promise<string>;
        /**
          * number: The component's maximum selectable value.
         */
        "max": number;
        /**
          * number: The component's minimum selectable value.
         */
        "min": number;
        /**
          * number: Displays tick marks on the number line at a specified interval.
         */
        "sliderTicks": number;
        /**
          * boolean: option to control if buffer results should be unioned
         */
        "unionResults": boolean;
        /**
          * DistanceUnit: "feet"|"meters"|"miles"|"kilometers"
         */
        "unit": DistanceUnit;
    }
    interface CardManager {
        /**
          * esri/views/layers/FeatureLayer: https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html
         */
        "layer": __esri.FeatureLayer;
        /**
          * esri/views/MapView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * boolean: When true the selected feature will zoomed to in the map and the row will be scrolled to within the table
         */
        "zoomAndScrollToSelected": boolean;
    }
    interface CrowdsourceManager {
        /**
          * IBasemapConfig: List of any basemaps to filter out from the basemap widget
         */
        "basemapConfig": IBasemapConfig;
        /**
          * boolean: when true the grid will display like the previous manager app with the table across the top
         */
        "classicGrid": boolean;
        /**
          * boolean: when true the layer table will auto refresh the data
         */
        "enableAutoRefresh": boolean;
        /**
          * boolean: when true the basemap widget will be available
         */
        "enableBasemap": boolean;
        /**
          * boolean: when true the export to csv button will be available
         */
        "enableCSV": boolean;
        /**
          * boolean: when true the fullscreen widget will be available
         */
        "enableFloorFilter": boolean;
        /**
          * boolean: when true the fullscreen widget will be available
         */
        "enableFullscreen": boolean;
        /**
          * boolean: when true the home widget will be available
         */
        "enableHome": boolean;
        /**
          * boolean: when true edits can be applied directly within the table
         */
        "enableInlineEdit": boolean;
        /**
          * boolean: when true the legend widget will be available
         */
        "enableLegend": boolean;
        /**
          * boolean: when true the search widget will be available
         */
        "enableSearch": boolean;
        /**
          * boolean: when true the zoom widget will be available
         */
        "enableZoom": boolean;
        /**
          * boolean: when true no map is displayed for the app
         */
        "hideMap": boolean;
        /**
          * IMapInfo[]: array of map infos (name and id)
         */
        "mapInfos": IMapInfo[];
        /**
          * boolean: When true only editable layers that support the update capability will be available
         */
        "onlyShowUpdatableLayers": boolean;
        /**
          * ISearchConfiguration: Configuration details for the Search widget
         */
        "searchConfiguration": ISearchConfiguration;
        /**
          * boolean: when true the table will be sorted by objectid in descending order by default
         */
        "showNewestFirst": boolean;
        /**
          * theme: "light" | "dark" theme to be used
         */
        "theme": theme;
        /**
          * boolean: When true the selected feature will zoomed to in the map and the row will be scrolled to within the table
         */
        "zoomAndScrollToSelected": boolean;
    }
    interface CrowdsourceReporter {
    }
    interface DeductCalculator {
    }
    interface EditCard {
        /**
          * The index of the current graphic
         */
        "graphicIndex": number;
        /**
          * esri/Graphic[]: https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html
         */
        "graphics": __esri.Graphic[];
        /**
          * esri/views/MapView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * When true the component is displayed
         */
        "open": boolean;
    }
    interface FloorFilter {
        /**
          * boolean: when true the Floor Filter widget will be available
         */
        "enabled": boolean;
        /**
          * esri/widgets/FloorFilter: https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FloorFilter.html  FloorFilter instance
         */
        "floorFilterWidget": __esri.FloorFilter;
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
    }
    interface InfoCard {
        /**
          * Get the current selected feature from the Features widget
          * @returns Promise resolving with the current feature
         */
        "getSelectedFeature": () => Promise<any>;
        /**
          * esri/Graphic: https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html
         */
        "graphics": __esri.Graphic[];
        /**
          * boolean: when true a loading indicator will be shown
         */
        "isLoading": boolean;
        /**
          * esri/views/MapView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * boolean: When true the selected feature will zoomed to in the map and the row will be scrolled to within the table
         */
        "zoomAndScrollToSelected": boolean;
    }
    interface JsonEditor {
        /**
          * Gets the contents of the editor.
          * @returns Promise resolving with the current contents of the editor
         */
        "getEditorContents": () => Promise<any>;
        /**
          * Contains a public value to indicate if the model has any changes.
         */
        "hasChanges": boolean;
        /**
          * Contains a public value to indicate if the model has any errors that would prevent saving it.
         */
        "hasErrors": boolean;
        /**
          * Contains a unique identifier for when we have multiple instances of the editor. For example when we want to show an item's data as well as an item's properties.
         */
        "instanceid": any;
        /**
          * Frees the editor events and memory; to be called when the web component is no longer needed.  Because the component lifecycle doesn't include an "onDestroy" event (@see https://stenciljs.com/docs/component-lifecycle#disconnectedcallback) and TypeScript/JavaScript does automatic garbage collection without a callback hook until ES2021 (@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry), this cleanup call needs to be called manually.
         */
        "prepareForDeletion": () => Promise<void>;
        /**
          * Replaces the current selection with the supplied text, inserting if nothing is selected.
          * @param replacement Text to use for replacement or insertion
          * @returns Promise resolving when function is done
         */
        "replaceCurrentSelection": (replacement: string) => Promise<any>;
        /**
          * Resets the contents of the editor with the current `value`.
          * @returns Promise resolving when function is done
         */
        "reset": () => Promise<any>;
        /**
          * Contains the public value for this component; it is not changed by the editor. When changed, the change overwrites the contents of the editor.
         */
        "value": any;
    }
    interface LayerTable {
        /**
          * boolean: when true the layer table will auto refresh the data
         */
        "enableAutoRefresh": boolean;
        /**
          * boolean: when true the export to csv button will be available
         */
        "enableCSV": boolean;
        /**
          * boolean: when true edits can be applied directly within the table
         */
        "enableInlineEdit": boolean;
        /**
          * boolean: when true the zoom button will be enabled
         */
        "enableZoom": boolean;
        /**
          * IMapInfo: key configuration details about the current map
         */
        "mapInfo": IMapInfo;
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * boolean: When true only editable layers that support the update capability will be available
         */
        "onlyShowUpdatableLayers": boolean;
        /**
          * boolean: when true the table will be sorted by objectid in descending order by default
         */
        "showNewestFirst": boolean;
        /**
          * boolean: When true the selected feature will zoomed to in the map and the row will be scrolled to within the table
         */
        "zoomAndScrollToSelected": boolean;
    }
    interface LayoutManager {
    }
    interface ListItem {
    }
    interface MapCard {
        /**
          * IBasemapConfig: List of any basemaps to filter out from the basemap widget
         */
        "basemapConfig": IBasemapConfig;
        /**
          * boolean: when true the basemap widget will be available
         */
        "enableBasemap": boolean;
        /**
          * boolean: when true the floor filter widget will be available
         */
        "enableFloorFilter": boolean;
        /**
          * boolean: when true the fullscreen widget will be available
         */
        "enableFullscreen": boolean;
        /**
          * boolean: when true the home widget will be available
         */
        "enableHome": boolean;
        /**
          * boolean: when true the legend widget will be available
         */
        "enableLegend": boolean;
        /**
          * boolean: when true the search widget will be available
         */
        "enableSearch": boolean;
        /**
          * boolean: When true the map display will be hidden
         */
        "hidden": boolean;
        /**
          * IMapInfo[]: array of map infos (name and id)
         */
        "mapInfos": IMapInfo[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * theme: "light" | "dark" theme to be used
         */
        "theme": theme;
    }
    interface MapDrawTools {
        /**
          * boolean: sketch is used by multiple components...need a way to know who should respond...
         */
        "active": boolean;
        /**
          * Clears the user drawn graphics
          * @returns Promise that resolves when the operation is complete
         */
        "clear": () => Promise<void>;
        /**
          * utils/interfaces: Controls how the draw tools are rendered  SKETCH mode supports snapping REFINE mode supports undo/redo
         */
        "drawMode": EDrawMode;
        /**
          * boolean: when true you will be able to make additional modifications to the sketched geometry
         */
        "editGraphicsEnabled": boolean;
        /**
          * esri/Graphic: https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html
         */
        "graphics": __esri.Graphic[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * esri/symbols/SimpleMarkerSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleMarkerSymbol.html
         */
        "pointSymbol": __esri.SimpleMarkerSymbol;
        /**
          * esri/symbols/SimpleFillSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleFillSymbol.html
         */
        "polygonSymbol": __esri.SimpleFillSymbol;
        /**
          * esri/symbols/SimpleLineSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleLineSymbol.html
         */
        "polylineSymbol": __esri.SimpleLineSymbol;
        /**
          * boolean: when eanbled the user can redo the previous operation
         */
        "redoEnabled": boolean;
        /**
          * boolean: when eanbled the user can undo the previous operation
         */
        "undoEnabled": boolean;
        /**
          * Set the sketch widget to update mode with the current graphic
          * @returns Promise that resolves when the operation is complete
         */
        "updateGraphics": () => Promise<void>;
    }
    interface MapFullscreen {
        /**
          * esri/widgets/Fullscreen: https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Fullscreen.html
         */
        "fullscreenWidget": __esri.Fullscreen;
        /**
          * esri/views/MapView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
    }
    interface MapLayerPicker {
        /**
          * "transparent" | "solid": controls the button appearance when using the "dropdown" type
         */
        "appearance": "transparent" | "solid";
        /**
          * string[]: Optional list of enabled layer ids  If empty all layers will be available
         */
        "enabledLayerIds": string[];
        /**
          * string[]: Optional list of enabled table ids  If empty all tables will be available
         */
        "enabledTableIds": string[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * boolean: When true only editable layers that support the update capability will be available
         */
        "onlyShowUpdatableLayers": boolean;
        /**
          * string: optional placeholder icon used with "combobox" type
         */
        "placeholderIcon": string;
        /**
          * "s" | "m" | "l": scale to render the component
         */
        "scale": "s" | "m" | "l";
        /**
          * string[]: list of layer ids that have been selected by the end user
         */
        "selectedIds": string[];
        /**
          * boolean: when true standalone tables will also be available
         */
        "showTables": boolean;
        /**
          * "select" | "combobox" | "dropdown": type of component to leverage
         */
        "type": "select" | "combobox" | "dropdown";
    }
    interface MapLegend {
        /**
          * esri/widgets/Legend: https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html  Legend instance
         */
        "legendWidget": __esri.Legend;
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
    }
    interface MapPicker {
        /**
          * IMapInfo[]: array of map infos (name and id)
         */
        "mapInfos": IMapInfo[];
    }
    interface MapSearch {
        /**
          * esri/views/MapView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * boolean: When true the selected feature popup will be shown when serach result is found
         */
        "popupEnabled": boolean;
        /**
          * boolean: When true a graphic will be added for the search result
         */
        "resultGraphicEnabled": boolean;
        /**
          * ISearchConfiguration: Configuration details for the Search widget
         */
        "searchConfiguration": ISearchConfiguration;
        /**
          * string: Text entered by the end user. Used to search against the locator.
         */
        "searchTerm": string;
        /**
          * esri/widgets/Search: https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html
         */
        "searchWidget": __esri.widgetsSearch;
    }
    interface MapSelectTools {
        /**
          * string | number[] |  object with r, g, b, a: https://developers.arcgis.com/javascript/latest/api-reference/esri-Color.html
         */
        "bufferColor": any;
        /**
          * string | number[] | object with r, g, b, a: https://developers.arcgis.com/javascript/latest/api-reference/esri-Color.html
         */
        "bufferOutlineColor": any;
        /**
          * Clear any selection results
          * @returns Promise when the results have been cleared
         */
        "clearSelection": () => Promise<void>;
        /**
          * boolean: When true the user can define a name for each notification list
         */
        "customLabelEnabled": boolean;
        /**
          * number: The default value to show for the buffer distance
         */
        "defaultBufferDistance": number;
        /**
          * number: The default value to show for the buffer unit
         */
        "defaultBufferUnit": DistanceUnit;
        /**
          * string[]: Optional list of enabled layer ids  If empty all layers will be available
         */
        "enabledLayerIds": string[];
        /**
          * esri/geometry: https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry.html
         */
        "geometries": __esri.Geometry[];
        /**
          * Get the new selection set
          * @returns Promise with the new selection set
         */
        "getSelection": () => Promise<ISelectionSet>;
        /**
          * boolean: When true a new label is not generated for the stored selection set
         */
        "isUpdate": boolean;
        /**
          * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html
         */
        "layerViews": __esri.FeatureLayerView[];
        /**
          * esri/views/MapView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * string: The value to show for no results when left empty the default text "0 selected features from {layerTitle}" will be shown
         */
        "noResultText": string;
        /**
          * ISearchConfiguration: Configuration details for the Search widget
         */
        "searchConfiguration": ISearchConfiguration;
        /**
          * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html
         */
        "selectLayerView": __esri.FeatureLayerView;
        /**
          * string[]: List of layer ids that should be shown as potential selection layers when skectching with "Use layer features" option
         */
        "selectionLayerIds": string[];
        /**
          * utils/interfaces/ISelectionSet: Used to store key details about any selections that have been made.
         */
        "selectionSet": ISelectionSet;
        /**
          * esri/symbols/SimpleLineSymbol | JSON representation : https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleLineSymbol.html
         */
        "sketchLineSymbol": __esri.SimpleLineSymbol;
        /**
          * esri/symbols/SimpleMarkerSymbol | JSON representation: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleMarkerSymbol.html
         */
        "sketchPointSymbol": __esri.SimpleMarkerSymbol;
        /**
          * esri/symbols/SimpleFillSymbol | JSON representation: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleFillSymbol.html
         */
        "sketchPolygonSymbol": __esri.SimpleFillSymbol;
    }
    interface MapTools {
        /**
          * IBasemapConfig: List of any basemaps to filter out from the basemap widget
         */
        "basemapConfig": IBasemapConfig;
        /**
          * boolean: when true the basemap widget will be available
         */
        "enableBasemap": boolean;
        /**
          * boolean: when true the floor filter widget will be available
         */
        "enableFloorFilter": boolean;
        /**
          * boolean: when true the fullscreen widget will be available
         */
        "enableFullscreen": boolean;
        /**
          * boolean: when true the legend widget will be available
         */
        "enableLegend": boolean;
        /**
          * boolean: when true the search widget will be available
         */
        "enableSearch": boolean;
        /**
          * "horizontal" | "vertical": used to control the orientation of the tools
         */
        "layout": "horizontal" | "vertical";
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * ISearchConfiguration: Configuration details for the Search widget
         */
        "searchConfiguration": ISearchConfiguration;
    }
    interface PciCalculator {
    }
    interface PdfDownload {
        /**
          * number: The default number of labels per page to export
         */
        "defaultNumLabelsPerPage": number;
        /**
          * boolean: Controls the enabled/disabled state of download
         */
        "disabled": boolean;
        /**
          * Downloads csv of mailing labels for the provided list of ids
          * @param webmap Webmap containing layer
          * @param exportInfos Information about items to be exported
          * @param removeDuplicates When true a single label is generated when multiple featues have a shared address value
          * @param addColumnTitle Indicates if column headings should be included in output
          * @returns Promise resolving when function is done
         */
        "downloadCSV": (webmap: __esri.Map, exportInfos: IExportInfos, removeDuplicates: boolean, addColumnTitle?: boolean) => Promise<void>;
        /**
          * Downloads pdf of mailing labels for the provided list of ids
          * @param webmap Webmap containing layer
          * @param exportInfos Information about items to be exported
          * @param removeDuplicates When true a single label is generated when multiple featues have a shared address value
          * @param title Title for each page
          * @param initialImageDataUrl Data URL of image for first page
          * @returns Promise resolving when function is done
         */
        "downloadPDF": (webmap: __esri.Map, exportInfos: IExportInfos, removeDuplicates?: boolean, title?: string, initialImageDataUrl?: string) => Promise<void>;
    }
    interface PublicNotification {
        /**
          * string[]: List of layer ids that should be shown as potential addressee layers
         */
        "addresseeLayerIds": string[];
        /**
          * string | number[] |  object with r, g, b, a: https://developers.arcgis.com/javascript/latest/api-reference/esri-Color.html
         */
        "bufferColor": any;
        /**
          * string | number[] | object with r, g, b, a: https://developers.arcgis.com/javascript/latest/api-reference/esri-Color.html
         */
        "bufferOutlineColor": any;
        /**
          * boolean: When true the user can define a name for each notification list
         */
        "customLabelEnabled": boolean;
        /**
          * number: The default value to show for the buffer distance
         */
        "defaultBufferDistance": number;
        /**
          * number: The default value to show for the buffer unit ("feet"|"meters"|"miles"|"kilometers")
         */
        "defaultBufferUnit": DistanceUnit;
        /**
          * string: The default value to use for the export title
         */
        "defaultExportTitle": string;
        /**
          * number: The default number of labels per page to export
         */
        "defaultNumLabelsPerPage": number;
        /**
          * The effect that will be applied when featureHighlightEnabled is true  esri/layers/support/FeatureEffect: https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html
         */
        "featureEffect": __esri.FeatureEffect;
        /**
          * boolean: When enabled features will be highlighted when their notification list item is clicked.
         */
        "featureHighlightEnabled": boolean;
        /**
          * esri/views/MapView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * string: The value to show for no results when left empty the default text "0 selected features from {layerTitle}" will be shown
         */
        "noResultText": string;
        /**
          * ISearchConfiguration: Configuration details for the Search widget
         */
        "searchConfiguration": ISearchConfiguration;
        /**
          * string[]: List of layer ids that should be shown as potential selection layers when skectching with "Use layer features" option
         */
        "selectionLayerIds": string[];
        /**
          * boolean: When true the refine selection workflow will be included in the UI
         */
        "showRefineSelection": boolean;
        /**
          * boolean: When false no buffer distance or unit controls will be exposed
         */
        "showSearchSettings": boolean;
        /**
          * esri/symbols/SimpleLineSymbol | JSON representation : https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleLineSymbol.html  A JSON representation of the instance in the ArcGIS format. See the ArcGIS REST API documentation for examples of the structure of various input JSON objects. https://developers.arcgis.com/documentation/common-data-types/symbol-objects.htm
         */
        "sketchLineSymbol": __esri.SimpleLineSymbol | any;
        /**
          * esri/symbols/SimpleMarkerSymbol | JSON representation: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleMarkerSymbol.html  A JSON representation of the instance in the ArcGIS format. See the ArcGIS REST API documentation for examples of the structure of various input JSON objects. https://developers.arcgis.com/documentation/common-data-types/symbol-objects.htm
         */
        "sketchPointSymbol": __esri.SimpleMarkerSymbol | any;
        /**
          * esri/symbols/SimpleFillSymbol | JSON representation: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleFillSymbol.html  A JSON representation of the instance in the ArcGIS format. See the ArcGIS REST API documentation for examples of the structure of various input JSON objects. https://developers.arcgis.com/documentation/common-data-types/symbol-objects.htm
         */
        "sketchPolygonSymbol": __esri.SimpleFillSymbol | any;
    }
    interface RefineSelection {
        /**
          * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html
         */
        "addresseeLayer": __esri.FeatureLayerView;
        /**
          * string[]: Optional list of enabled layer ids  If empty all layers will be available
         */
        "enabledLayerIds": string[];
        /**
          * esri/views/MapView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * utils/interfaces/ISelectionSet: An array of user defined selection sets
         */
        "selectionSets": ISelectionSet[];
        /**
          * esri/symbols/SimpleLineSymbol | JSON representation : https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleLineSymbol.html
         */
        "sketchLineSymbol": __esri.SimpleLineSymbol;
        /**
          * esri/symbols/SimpleMarkerSymbol | JSON representation: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleMarkerSymbol.html
         */
        "sketchPointSymbol": __esri.SimpleMarkerSymbol;
        /**
          * esri/symbols/SimpleFillSymbol | JSON representation: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleFillSymbol.html
         */
        "sketchPolygonSymbol": __esri.SimpleFillSymbol;
    }
    interface SolutionConfiguration {
        /**
          * Credentials for requests, which can be a serialized UserSession
         */
        "authentication": UserSession;
        "getSpatialReferenceInfo": () => Promise<ISolutionSpatialReferenceInfo>;
        "saveSolution": () => Promise<void>;
        "serializedAuthentication": string;
        /**
          * Used to show/hide loading indicator
         */
        "showLoading": boolean;
        /**
          * Contains the current solution item id
         */
        "solutionItemId": string;
        "unloadSolution": () => Promise<void>;
    }
    interface SolutionContents {
        /**
          * Contains the current item that is selected.
         */
        "selectedItemId": string;
        /**
          * Contains the public value for this component.
         */
        "templateHierarchy": IInventoryItem[];
    }
    interface SolutionItem {
        /**
          * Credentials for requests
         */
        "authentication": UserSession;
        /**
          * A template's itemId.
         */
        "itemId": string;
        /**
          * Contains the organization based variables
         */
        "organizationVariables": string;
        /**
          * Contains the solution based variables
         */
        "solutionVariables": string;
    }
    interface SolutionItemDetails {
        /**
          * A template's itemId.
         */
        "itemId": string;
    }
    interface SolutionItemIcon {
        /**
          * Indicate if this is portal
         */
        "isPortal": boolean;
        /**
          * The type for the item
         */
        "type": string;
        /**
          * The typeKeywords for the item
         */
        "typeKeywords": string[];
    }
    interface SolutionItemSharing {
        "getShareInfo": () => Promise<any>;
        /**
          * A template's groupId.
         */
        "groupId": string;
    }
    interface SolutionOrganizationVariables {
        /**
          * Contains the public value for this component.
         */
        "value": string;
    }
    interface SolutionResourceItem {
        /**
          * Credentials for requests
         */
        "authentication": UserSession;
        /**
          * A template's itemId. This is used to get the correct model from a store in the json-editor
         */
        "itemId": string;
    }
    interface SolutionSpatialRef {
        /**
          * The wkid that will be used as the default when no user selection has been made.
         */
        "defaultWkid": number;
        /**
          * When true, all but the main switch are disabled to prevent interaction.
         */
        "locked": boolean;
        /**
          * List of service names the spatial reference should apply to
         */
        "services": string[];
        /**
          * Contains the public value for this component, which is a wkid or a wkt.
         */
        "value": string;
    }
    interface SolutionTemplateData {
        /**
          * This needs to be unique for props vs data of an item
         */
        "instanceid": string;
        /**
          * A template's itemId. This is used to get the correct model from a store in the json-editor
         */
        "itemId": string;
        "organizationVariables": string;
        /**
          * Contains the solution based variables
         */
        "solutionVariables": string;
        /**
          * Used to show/hide the variable containers
         */
        "varsOpen": boolean;
    }
    interface SolutionVariables {
        /**
          * Contains the public value for this component.
         */
        "value": string;
    }
    interface SpatialRef {
        /**
          * Returns the spatial reference description of the supplied value. (Exposes protected method `_createSpatialRefDisplay` for testing.)
          * @param value WKID or WKT or null for default
          * @returns If component is using a WKID, description using WKID; otherwise, the WKT; defaults to 102100
         */
        "createSpatialRefDisplay": (value: string) => Promise<ISpatialRefRepresentation>;
        /**
          * The wkid that will be used as the default when no user selection has been made.
         */
        "defaultWkid": number;
        /**
          * When true, all are disabled to prevent interaction.
         */
        "disabled": boolean;
        /**
          * Returns the current spatial reference description. (Exposes protected variable `spatialRef` for testing.)
         */
        "getSpatialRef": () => Promise<ISpatialRefRepresentation>;
        /**
          * Contains the public value for this component, which is a wkid or a wkt.
         */
        "value": string;
        /**
          * Converts a WKID into a spatial reference description. (Exposes protected method `_wkidToDisplay` for testing.)
          * @param wkid WKID to look up
          * @returns Description, or "WKID &lt;wkid&gt;" if a description doesn't exist for the WKID
         */
        "wkidToDisplay": (wkid: number) => Promise<string>;
    }
    interface StoreManager {
        /**
          * Credentials for requests
         */
        "authentication": UserSession;
        /**
          * Templates for the current solution
         */
        "templates": any[];
        /**
          * Contains source json as a string
         */
        "value": string;
    }
}
export interface BufferToolsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBufferToolsElement;
}
export interface DeductCalculatorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDeductCalculatorElement;
}
export interface EditCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEditCardElement;
}
export interface InfoCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLInfoCardElement;
}
export interface LayerTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLayerTableElement;
}
export interface LayoutManagerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLayoutManagerElement;
}
export interface MapCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMapCardElement;
}
export interface MapDrawToolsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMapDrawToolsElement;
}
export interface MapLayerPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMapLayerPickerElement;
}
export interface MapPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMapPickerElement;
}
export interface MapSelectToolsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMapSelectToolsElement;
}
export interface PublicNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPublicNotificationElement;
}
export interface RefineSelectionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRefineSelectionElement;
}
export interface SolutionContentsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSolutionContentsElement;
}
export interface SolutionOrganizationVariablesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSolutionOrganizationVariablesElement;
}
export interface SolutionSpatialRefCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSolutionSpatialRefElement;
}
export interface SolutionVariablesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSolutionVariablesElement;
}
export interface SpatialRefCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSpatialRefElement;
}
export interface StoreManagerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStoreManagerElement;
}
declare global {
    interface HTMLBasemapGalleryElement extends Components.BasemapGallery, HTMLStencilElement {
    }
    var HTMLBasemapGalleryElement: {
        prototype: HTMLBasemapGalleryElement;
        new (): HTMLBasemapGalleryElement;
    };
    interface HTMLBufferToolsElementEventMap {
        "bufferComplete": __esri.Polygon | __esri.Polygon[];
        "distanceChanged": IValueChange;
        "unitChanged": IValueChange;
    }
    interface HTMLBufferToolsElement extends Components.BufferTools, HTMLStencilElement {
        addEventListener<K extends keyof HTMLBufferToolsElementEventMap>(type: K, listener: (this: HTMLBufferToolsElement, ev: BufferToolsCustomEvent<HTMLBufferToolsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLBufferToolsElementEventMap>(type: K, listener: (this: HTMLBufferToolsElement, ev: BufferToolsCustomEvent<HTMLBufferToolsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLBufferToolsElement: {
        prototype: HTMLBufferToolsElement;
        new (): HTMLBufferToolsElement;
    };
    interface HTMLCardManagerElement extends Components.CardManager, HTMLStencilElement {
    }
    var HTMLCardManagerElement: {
        prototype: HTMLCardManagerElement;
        new (): HTMLCardManagerElement;
    };
    interface HTMLCrowdsourceManagerElement extends Components.CrowdsourceManager, HTMLStencilElement {
    }
    var HTMLCrowdsourceManagerElement: {
        prototype: HTMLCrowdsourceManagerElement;
        new (): HTMLCrowdsourceManagerElement;
    };
    interface HTMLCrowdsourceReporterElement extends Components.CrowdsourceReporter, HTMLStencilElement {
    }
    var HTMLCrowdsourceReporterElement: {
        prototype: HTMLCrowdsourceReporterElement;
        new (): HTMLCrowdsourceReporterElement;
    };
    interface HTMLDeductCalculatorElementEventMap {
        "deductValueComplete": string;
    }
    interface HTMLDeductCalculatorElement extends Components.DeductCalculator, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDeductCalculatorElementEventMap>(type: K, listener: (this: HTMLDeductCalculatorElement, ev: DeductCalculatorCustomEvent<HTMLDeductCalculatorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDeductCalculatorElementEventMap>(type: K, listener: (this: HTMLDeductCalculatorElement, ev: DeductCalculatorCustomEvent<HTMLDeductCalculatorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDeductCalculatorElement: {
        prototype: HTMLDeductCalculatorElement;
        new (): HTMLDeductCalculatorElement;
    };
    interface HTMLEditCardElementEventMap {
        "closeEdit": void;
        "editsComplete": void;
    }
    interface HTMLEditCardElement extends Components.EditCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEditCardElementEventMap>(type: K, listener: (this: HTMLEditCardElement, ev: EditCardCustomEvent<HTMLEditCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEditCardElementEventMap>(type: K, listener: (this: HTMLEditCardElement, ev: EditCardCustomEvent<HTMLEditCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEditCardElement: {
        prototype: HTMLEditCardElement;
        new (): HTMLEditCardElement;
    };
    interface HTMLFloorFilterElement extends Components.FloorFilter, HTMLStencilElement {
    }
    var HTMLFloorFilterElement: {
        prototype: HTMLFloorFilterElement;
        new (): HTMLFloorFilterElement;
    };
    interface HTMLInfoCardElementEventMap {
        "selectionChanged": __esri.Graphic;
    }
    interface HTMLInfoCardElement extends Components.InfoCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLInfoCardElementEventMap>(type: K, listener: (this: HTMLInfoCardElement, ev: InfoCardCustomEvent<HTMLInfoCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLInfoCardElementEventMap>(type: K, listener: (this: HTMLInfoCardElement, ev: InfoCardCustomEvent<HTMLInfoCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLInfoCardElement: {
        prototype: HTMLInfoCardElement;
        new (): HTMLInfoCardElement;
    };
    interface HTMLJsonEditorElement extends Components.JsonEditor, HTMLStencilElement {
    }
    var HTMLJsonEditorElement: {
        prototype: HTMLJsonEditorElement;
        new (): HTMLJsonEditorElement;
    };
    interface HTMLLayerTableElementEventMap {
        "featureSelectionChange": number[];
        "openFilterOptions": void;
    }
    interface HTMLLayerTableElement extends Components.LayerTable, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLayerTableElementEventMap>(type: K, listener: (this: HTMLLayerTableElement, ev: LayerTableCustomEvent<HTMLLayerTableElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLayerTableElementEventMap>(type: K, listener: (this: HTMLLayerTableElement, ev: LayerTableCustomEvent<HTMLLayerTableElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLayerTableElement: {
        prototype: HTMLLayerTableElement;
        new (): HTMLLayerTableElement;
    };
    interface HTMLLayoutManagerElementEventMap {
        "layoutChanged": ELayoutMode;
    }
    interface HTMLLayoutManagerElement extends Components.LayoutManager, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLayoutManagerElementEventMap>(type: K, listener: (this: HTMLLayoutManagerElement, ev: LayoutManagerCustomEvent<HTMLLayoutManagerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLayoutManagerElementEventMap>(type: K, listener: (this: HTMLLayoutManagerElement, ev: LayoutManagerCustomEvent<HTMLLayoutManagerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLayoutManagerElement: {
        prototype: HTMLLayoutManagerElement;
        new (): HTMLLayoutManagerElement;
    };
    interface HTMLListItemElement extends Components.ListItem, HTMLStencilElement {
    }
    var HTMLListItemElement: {
        prototype: HTMLListItemElement;
        new (): HTMLListItemElement;
    };
    interface HTMLMapCardElementEventMap {
        "mapChanged": IMapChange;
        "beforeMapChanged": void;
    }
    interface HTMLMapCardElement extends Components.MapCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMapCardElementEventMap>(type: K, listener: (this: HTMLMapCardElement, ev: MapCardCustomEvent<HTMLMapCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMapCardElementEventMap>(type: K, listener: (this: HTMLMapCardElement, ev: MapCardCustomEvent<HTMLMapCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMapCardElement: {
        prototype: HTMLMapCardElement;
        new (): HTMLMapCardElement;
    };
    interface HTMLMapDrawToolsElementEventMap {
        "selectionLoadingChange": boolean;
        "sketchGraphicsChange": ISketchGraphicsChange;
        "drawUndo": void;
        "drawRedo": void;
    }
    interface HTMLMapDrawToolsElement extends Components.MapDrawTools, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMapDrawToolsElementEventMap>(type: K, listener: (this: HTMLMapDrawToolsElement, ev: MapDrawToolsCustomEvent<HTMLMapDrawToolsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMapDrawToolsElementEventMap>(type: K, listener: (this: HTMLMapDrawToolsElement, ev: MapDrawToolsCustomEvent<HTMLMapDrawToolsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMapDrawToolsElement: {
        prototype: HTMLMapDrawToolsElement;
        new (): HTMLMapDrawToolsElement;
    };
    interface HTMLMapFullscreenElement extends Components.MapFullscreen, HTMLStencilElement {
    }
    var HTMLMapFullscreenElement: {
        prototype: HTMLMapFullscreenElement;
        new (): HTMLMapFullscreenElement;
    };
    interface HTMLMapLayerPickerElementEventMap {
        "noLayersFound": void;
        "layerSelectionChange": string[];
    }
    interface HTMLMapLayerPickerElement extends Components.MapLayerPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMapLayerPickerElementEventMap>(type: K, listener: (this: HTMLMapLayerPickerElement, ev: MapLayerPickerCustomEvent<HTMLMapLayerPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMapLayerPickerElementEventMap>(type: K, listener: (this: HTMLMapLayerPickerElement, ev: MapLayerPickerCustomEvent<HTMLMapLayerPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMapLayerPickerElement: {
        prototype: HTMLMapLayerPickerElement;
        new (): HTMLMapLayerPickerElement;
    };
    interface HTMLMapLegendElement extends Components.MapLegend, HTMLStencilElement {
    }
    var HTMLMapLegendElement: {
        prototype: HTMLMapLegendElement;
        new (): HTMLMapLegendElement;
    };
    interface HTMLMapPickerElementEventMap {
        "mapInfoChange": IMapInfo;
    }
    interface HTMLMapPickerElement extends Components.MapPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMapPickerElementEventMap>(type: K, listener: (this: HTMLMapPickerElement, ev: MapPickerCustomEvent<HTMLMapPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMapPickerElementEventMap>(type: K, listener: (this: HTMLMapPickerElement, ev: MapPickerCustomEvent<HTMLMapPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMapPickerElement: {
        prototype: HTMLMapPickerElement;
        new (): HTMLMapPickerElement;
    };
    interface HTMLMapSearchElement extends Components.MapSearch, HTMLStencilElement {
    }
    var HTMLMapSearchElement: {
        prototype: HTMLMapSearchElement;
        new (): HTMLMapSearchElement;
    };
    interface HTMLMapSelectToolsElementEventMap {
        "selectionSetChange": number;
    }
    interface HTMLMapSelectToolsElement extends Components.MapSelectTools, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMapSelectToolsElementEventMap>(type: K, listener: (this: HTMLMapSelectToolsElement, ev: MapSelectToolsCustomEvent<HTMLMapSelectToolsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMapSelectToolsElementEventMap>(type: K, listener: (this: HTMLMapSelectToolsElement, ev: MapSelectToolsCustomEvent<HTMLMapSelectToolsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMapSelectToolsElement: {
        prototype: HTMLMapSelectToolsElement;
        new (): HTMLMapSelectToolsElement;
    };
    interface HTMLMapToolsElement extends Components.MapTools, HTMLStencilElement {
    }
    var HTMLMapToolsElement: {
        prototype: HTMLMapToolsElement;
        new (): HTMLMapToolsElement;
    };
    interface HTMLPciCalculatorElement extends Components.PciCalculator, HTMLStencilElement {
    }
    var HTMLPciCalculatorElement: {
        prototype: HTMLPciCalculatorElement;
        new (): HTMLPciCalculatorElement;
    };
    interface HTMLPdfDownloadElement extends Components.PdfDownload, HTMLStencilElement {
    }
    var HTMLPdfDownloadElement: {
        prototype: HTMLPdfDownloadElement;
        new (): HTMLPdfDownloadElement;
    };
    interface HTMLPublicNotificationElementEventMap {
        "searchConfigurationChange": ISearchConfiguration;
    }
    interface HTMLPublicNotificationElement extends Components.PublicNotification, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPublicNotificationElementEventMap>(type: K, listener: (this: HTMLPublicNotificationElement, ev: PublicNotificationCustomEvent<HTMLPublicNotificationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPublicNotificationElementEventMap>(type: K, listener: (this: HTMLPublicNotificationElement, ev: PublicNotificationCustomEvent<HTMLPublicNotificationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPublicNotificationElement: {
        prototype: HTMLPublicNotificationElement;
        new (): HTMLPublicNotificationElement;
    };
    interface HTMLRefineSelectionElementEventMap {
        "selectionLoadingChange": boolean;
        "selectionSetsChanged": ISelectionSet[];
    }
    interface HTMLRefineSelectionElement extends Components.RefineSelection, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRefineSelectionElementEventMap>(type: K, listener: (this: HTMLRefineSelectionElement, ev: RefineSelectionCustomEvent<HTMLRefineSelectionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRefineSelectionElementEventMap>(type: K, listener: (this: HTMLRefineSelectionElement, ev: RefineSelectionCustomEvent<HTMLRefineSelectionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRefineSelectionElement: {
        prototype: HTMLRefineSelectionElement;
        new (): HTMLRefineSelectionElement;
    };
    interface HTMLSolutionConfigurationElement extends Components.SolutionConfiguration, HTMLStencilElement {
    }
    var HTMLSolutionConfigurationElement: {
        prototype: HTMLSolutionConfigurationElement;
        new (): HTMLSolutionConfigurationElement;
    };
    interface HTMLSolutionContentsElementEventMap {
        "solutionItemSelected": string;
    }
    interface HTMLSolutionContentsElement extends Components.SolutionContents, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSolutionContentsElementEventMap>(type: K, listener: (this: HTMLSolutionContentsElement, ev: SolutionContentsCustomEvent<HTMLSolutionContentsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSolutionContentsElementEventMap>(type: K, listener: (this: HTMLSolutionContentsElement, ev: SolutionContentsCustomEvent<HTMLSolutionContentsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSolutionContentsElement: {
        prototype: HTMLSolutionContentsElement;
        new (): HTMLSolutionContentsElement;
    };
    interface HTMLSolutionItemElement extends Components.SolutionItem, HTMLStencilElement {
    }
    var HTMLSolutionItemElement: {
        prototype: HTMLSolutionItemElement;
        new (): HTMLSolutionItemElement;
    };
    interface HTMLSolutionItemDetailsElement extends Components.SolutionItemDetails, HTMLStencilElement {
    }
    var HTMLSolutionItemDetailsElement: {
        prototype: HTMLSolutionItemDetailsElement;
        new (): HTMLSolutionItemDetailsElement;
    };
    interface HTMLSolutionItemIconElement extends Components.SolutionItemIcon, HTMLStencilElement {
    }
    var HTMLSolutionItemIconElement: {
        prototype: HTMLSolutionItemIconElement;
        new (): HTMLSolutionItemIconElement;
    };
    interface HTMLSolutionItemSharingElement extends Components.SolutionItemSharing, HTMLStencilElement {
    }
    var HTMLSolutionItemSharingElement: {
        prototype: HTMLSolutionItemSharingElement;
        new (): HTMLSolutionItemSharingElement;
    };
    interface HTMLSolutionOrganizationVariablesElementEventMap {
        "organizationVariableSelected": { itemId: string, value: string };
    }
    interface HTMLSolutionOrganizationVariablesElement extends Components.SolutionOrganizationVariables, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSolutionOrganizationVariablesElementEventMap>(type: K, listener: (this: HTMLSolutionOrganizationVariablesElement, ev: SolutionOrganizationVariablesCustomEvent<HTMLSolutionOrganizationVariablesElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSolutionOrganizationVariablesElementEventMap>(type: K, listener: (this: HTMLSolutionOrganizationVariablesElement, ev: SolutionOrganizationVariablesCustomEvent<HTMLSolutionOrganizationVariablesElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSolutionOrganizationVariablesElement: {
        prototype: HTMLSolutionOrganizationVariablesElement;
        new (): HTMLSolutionOrganizationVariablesElement;
    };
    interface HTMLSolutionResourceItemElement extends Components.SolutionResourceItem, HTMLStencilElement {
    }
    var HTMLSolutionResourceItemElement: {
        prototype: HTMLSolutionResourceItemElement;
        new (): HTMLSolutionResourceItemElement;
    };
    interface HTMLSolutionSpatialRefElementEventMap {
        "featureServiceSpatialReferenceChange": { name: string, enabled: boolean };
    }
    interface HTMLSolutionSpatialRefElement extends Components.SolutionSpatialRef, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSolutionSpatialRefElementEventMap>(type: K, listener: (this: HTMLSolutionSpatialRefElement, ev: SolutionSpatialRefCustomEvent<HTMLSolutionSpatialRefElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSolutionSpatialRefElementEventMap>(type: K, listener: (this: HTMLSolutionSpatialRefElement, ev: SolutionSpatialRefCustomEvent<HTMLSolutionSpatialRefElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSolutionSpatialRefElement: {
        prototype: HTMLSolutionSpatialRefElement;
        new (): HTMLSolutionSpatialRefElement;
    };
    interface HTMLSolutionTemplateDataElement extends Components.SolutionTemplateData, HTMLStencilElement {
    }
    var HTMLSolutionTemplateDataElement: {
        prototype: HTMLSolutionTemplateDataElement;
        new (): HTMLSolutionTemplateDataElement;
    };
    interface HTMLSolutionVariablesElementEventMap {
        "solutionVariableSelected": { itemId: string, value: string };
    }
    interface HTMLSolutionVariablesElement extends Components.SolutionVariables, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSolutionVariablesElementEventMap>(type: K, listener: (this: HTMLSolutionVariablesElement, ev: SolutionVariablesCustomEvent<HTMLSolutionVariablesElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSolutionVariablesElementEventMap>(type: K, listener: (this: HTMLSolutionVariablesElement, ev: SolutionVariablesCustomEvent<HTMLSolutionVariablesElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSolutionVariablesElement: {
        prototype: HTMLSolutionVariablesElement;
        new (): HTMLSolutionVariablesElement;
    };
    interface HTMLSpatialRefElementEventMap {
        "spatialReferenceChange": IValueChange;
    }
    interface HTMLSpatialRefElement extends Components.SpatialRef, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSpatialRefElementEventMap>(type: K, listener: (this: HTMLSpatialRefElement, ev: SpatialRefCustomEvent<HTMLSpatialRefElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSpatialRefElementEventMap>(type: K, listener: (this: HTMLSpatialRefElement, ev: SpatialRefCustomEvent<HTMLSpatialRefElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSpatialRefElement: {
        prototype: HTMLSpatialRefElement;
        new (): HTMLSpatialRefElement;
    };
    interface HTMLStoreManagerElementEventMap {
        "stateLoaded": any;
    }
    interface HTMLStoreManagerElement extends Components.StoreManager, HTMLStencilElement {
        addEventListener<K extends keyof HTMLStoreManagerElementEventMap>(type: K, listener: (this: HTMLStoreManagerElement, ev: StoreManagerCustomEvent<HTMLStoreManagerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLStoreManagerElementEventMap>(type: K, listener: (this: HTMLStoreManagerElement, ev: StoreManagerCustomEvent<HTMLStoreManagerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLStoreManagerElement: {
        prototype: HTMLStoreManagerElement;
        new (): HTMLStoreManagerElement;
    };
    interface HTMLElementTagNameMap {
        "basemap-gallery": HTMLBasemapGalleryElement;
        "buffer-tools": HTMLBufferToolsElement;
        "card-manager": HTMLCardManagerElement;
        "crowdsource-manager": HTMLCrowdsourceManagerElement;
        "crowdsource-reporter": HTMLCrowdsourceReporterElement;
        "deduct-calculator": HTMLDeductCalculatorElement;
        "edit-card": HTMLEditCardElement;
        "floor-filter": HTMLFloorFilterElement;
        "info-card": HTMLInfoCardElement;
        "json-editor": HTMLJsonEditorElement;
        "layer-table": HTMLLayerTableElement;
        "layout-manager": HTMLLayoutManagerElement;
        "list-item": HTMLListItemElement;
        "map-card": HTMLMapCardElement;
        "map-draw-tools": HTMLMapDrawToolsElement;
        "map-fullscreen": HTMLMapFullscreenElement;
        "map-layer-picker": HTMLMapLayerPickerElement;
        "map-legend": HTMLMapLegendElement;
        "map-picker": HTMLMapPickerElement;
        "map-search": HTMLMapSearchElement;
        "map-select-tools": HTMLMapSelectToolsElement;
        "map-tools": HTMLMapToolsElement;
        "pci-calculator": HTMLPciCalculatorElement;
        "pdf-download": HTMLPdfDownloadElement;
        "public-notification": HTMLPublicNotificationElement;
        "refine-selection": HTMLRefineSelectionElement;
        "solution-configuration": HTMLSolutionConfigurationElement;
        "solution-contents": HTMLSolutionContentsElement;
        "solution-item": HTMLSolutionItemElement;
        "solution-item-details": HTMLSolutionItemDetailsElement;
        "solution-item-icon": HTMLSolutionItemIconElement;
        "solution-item-sharing": HTMLSolutionItemSharingElement;
        "solution-organization-variables": HTMLSolutionOrganizationVariablesElement;
        "solution-resource-item": HTMLSolutionResourceItemElement;
        "solution-spatial-ref": HTMLSolutionSpatialRefElement;
        "solution-template-data": HTMLSolutionTemplateDataElement;
        "solution-variables": HTMLSolutionVariablesElement;
        "spatial-ref": HTMLSpatialRefElement;
        "store-manager": HTMLStoreManagerElement;
    }
}
declare namespace LocalJSX {
    interface BasemapGallery {
        /**
          * IBasemapConfig: List of any basemaps to filter out from the basemap widget
         */
        "basemapConfig"?: IBasemapConfig;
        /**
          * esri/widgets/BasemapGallery: https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html  BasemapGallery instance
         */
        "basemapWidget"?: __esri.BasemapGallery;
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
    }
    interface BufferTools {
        /**
          * string: The appearance of display. Can be a "slider" or "text" inputs for distance/value
         */
        "appearance"?: "slider" | "text";
        "disabled"?: boolean;
        /**
          * number: The distance used for buffer
         */
        "distance"?: number;
        /**
          * esri/geometry/Geometry: https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html
         */
        "geometries"?: __esri.Geometry[];
        /**
          * number: The component's maximum selectable value.
         */
        "max"?: number;
        /**
          * number: The component's minimum selectable value.
         */
        "min"?: number;
        /**
          * Emitted on demand when a buffer is generated.
         */
        "onBufferComplete"?: (event: BufferToolsCustomEvent<__esri.Polygon | __esri.Polygon[]>) => void;
        /**
          * Emitted on demand when the distance value changes
         */
        "onDistanceChanged"?: (event: BufferToolsCustomEvent<IValueChange>) => void;
        /**
          * Emitted on demand when the unit changes
         */
        "onUnitChanged"?: (event: BufferToolsCustomEvent<IValueChange>) => void;
        /**
          * number: Displays tick marks on the number line at a specified interval.
         */
        "sliderTicks"?: number;
        /**
          * boolean: option to control if buffer results should be unioned
         */
        "unionResults"?: boolean;
        /**
          * DistanceUnit: "feet"|"meters"|"miles"|"kilometers"
         */
        "unit"?: DistanceUnit;
    }
    interface CardManager {
        /**
          * esri/views/layers/FeatureLayer: https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html
         */
        "layer"?: __esri.FeatureLayer;
        /**
          * esri/views/MapView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        /**
          * boolean: When true the selected feature will zoomed to in the map and the row will be scrolled to within the table
         */
        "zoomAndScrollToSelected"?: boolean;
    }
    interface CrowdsourceManager {
        /**
          * IBasemapConfig: List of any basemaps to filter out from the basemap widget
         */
        "basemapConfig"?: IBasemapConfig;
        /**
          * boolean: when true the grid will display like the previous manager app with the table across the top
         */
        "classicGrid"?: boolean;
        /**
          * boolean: when true the layer table will auto refresh the data
         */
        "enableAutoRefresh"?: boolean;
        /**
          * boolean: when true the basemap widget will be available
         */
        "enableBasemap"?: boolean;
        /**
          * boolean: when true the export to csv button will be available
         */
        "enableCSV"?: boolean;
        /**
          * boolean: when true the fullscreen widget will be available
         */
        "enableFloorFilter"?: boolean;
        /**
          * boolean: when true the fullscreen widget will be available
         */
        "enableFullscreen"?: boolean;
        /**
          * boolean: when true the home widget will be available
         */
        "enableHome"?: boolean;
        /**
          * boolean: when true edits can be applied directly within the table
         */
        "enableInlineEdit"?: boolean;
        /**
          * boolean: when true the legend widget will be available
         */
        "enableLegend"?: boolean;
        /**
          * boolean: when true the search widget will be available
         */
        "enableSearch"?: boolean;
        /**
          * boolean: when true the zoom widget will be available
         */
        "enableZoom"?: boolean;
        /**
          * boolean: when true no map is displayed for the app
         */
        "hideMap"?: boolean;
        /**
          * IMapInfo[]: array of map infos (name and id)
         */
        "mapInfos"?: IMapInfo[];
        /**
          * boolean: When true only editable layers that support the update capability will be available
         */
        "onlyShowUpdatableLayers"?: boolean;
        /**
          * ISearchConfiguration: Configuration details for the Search widget
         */
        "searchConfiguration"?: ISearchConfiguration;
        /**
          * boolean: when true the table will be sorted by objectid in descending order by default
         */
        "showNewestFirst"?: boolean;
        /**
          * theme: "light" | "dark" theme to be used
         */
        "theme"?: theme;
        /**
          * boolean: When true the selected feature will zoomed to in the map and the row will be scrolled to within the table
         */
        "zoomAndScrollToSelected"?: boolean;
    }
    interface CrowdsourceReporter {
    }
    interface DeductCalculator {
        /**
          * Emitted on demand when the user clicks to calculate the deduct value
         */
        "onDeductValueComplete"?: (event: DeductCalculatorCustomEvent<string>) => void;
    }
    interface EditCard {
        /**
          * The index of the current graphic
         */
        "graphicIndex"?: number;
        /**
          * esri/Graphic[]: https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html
         */
        "graphics"?: __esri.Graphic[];
        /**
          * esri/views/MapView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        /**
          * Emitted on demand when the Editor widget should be closed
         */
        "onCloseEdit"?: (event: EditCardCustomEvent<void>) => void;
        /**
          * Emitted on demand when edits are completed on current edit layer
         */
        "onEditsComplete"?: (event: EditCardCustomEvent<void>) => void;
        /**
          * When true the component is displayed
         */
        "open"?: boolean;
    }
    interface FloorFilter {
        /**
          * boolean: when true the Floor Filter widget will be available
         */
        "enabled"?: boolean;
        /**
          * esri/widgets/FloorFilter: https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FloorFilter.html  FloorFilter instance
         */
        "floorFilterWidget"?: __esri.FloorFilter;
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
    }
    interface InfoCard {
        /**
          * esri/Graphic: https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html
         */
        "graphics"?: __esri.Graphic[];
        /**
          * boolean: when true a loading indicator will be shown
         */
        "isLoading"?: boolean;
        /**
          * esri/views/MapView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        /**
          * Emitted on demand when the selected index changes
         */
        "onSelectionChanged"?: (event: InfoCardCustomEvent<__esri.Graphic>) => void;
        /**
          * boolean: When true the selected feature will zoomed to in the map and the row will be scrolled to within the table
         */
        "zoomAndScrollToSelected"?: boolean;
    }
    interface JsonEditor {
        /**
          * Contains a public value to indicate if the model has any changes.
         */
        "hasChanges"?: boolean;
        /**
          * Contains a public value to indicate if the model has any errors that would prevent saving it.
         */
        "hasErrors"?: boolean;
        /**
          * Contains a unique identifier for when we have multiple instances of the editor. For example when we want to show an item's data as well as an item's properties.
         */
        "instanceid"?: any;
        /**
          * Contains the public value for this component; it is not changed by the editor. When changed, the change overwrites the contents of the editor.
         */
        "value"?: any;
    }
    interface LayerTable {
        /**
          * boolean: when true the layer table will auto refresh the data
         */
        "enableAutoRefresh"?: boolean;
        /**
          * boolean: when true the export to csv button will be available
         */
        "enableCSV"?: boolean;
        /**
          * boolean: when true edits can be applied directly within the table
         */
        "enableInlineEdit"?: boolean;
        /**
          * boolean: when true the zoom button will be enabled
         */
        "enableZoom"?: boolean;
        /**
          * IMapInfo: key configuration details about the current map
         */
        "mapInfo"?: IMapInfo;
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        /**
          * Emitted on demand when a layer is selected
         */
        "onFeatureSelectionChange"?: (event: LayerTableCustomEvent<number[]>) => void;
        /**
          * Emitted on demand when the filters button is clicked
         */
        "onOpenFilterOptions"?: (event: LayerTableCustomEvent<void>) => void;
        /**
          * boolean: When true only editable layers that support the update capability will be available
         */
        "onlyShowUpdatableLayers"?: boolean;
        /**
          * boolean: when true the table will be sorted by objectid in descending order by default
         */
        "showNewestFirst"?: boolean;
        /**
          * boolean: When true the selected feature will zoomed to in the map and the row will be scrolled to within the table
         */
        "zoomAndScrollToSelected"?: boolean;
    }
    interface LayoutManager {
        /**
          * Emitted when the layout should change
         */
        "onLayoutChanged"?: (event: LayoutManagerCustomEvent<ELayoutMode>) => void;
    }
    interface ListItem {
    }
    interface MapCard {
        /**
          * IBasemapConfig: List of any basemaps to filter out from the basemap widget
         */
        "basemapConfig"?: IBasemapConfig;
        /**
          * boolean: when true the basemap widget will be available
         */
        "enableBasemap"?: boolean;
        /**
          * boolean: when true the floor filter widget will be available
         */
        "enableFloorFilter"?: boolean;
        /**
          * boolean: when true the fullscreen widget will be available
         */
        "enableFullscreen"?: boolean;
        /**
          * boolean: when true the home widget will be available
         */
        "enableHome"?: boolean;
        /**
          * boolean: when true the legend widget will be available
         */
        "enableLegend"?: boolean;
        /**
          * boolean: when true the search widget will be available
         */
        "enableSearch"?: boolean;
        /**
          * boolean: When true the map display will be hidden
         */
        "hidden"?: boolean;
        /**
          * IMapInfo[]: array of map infos (name and id)
         */
        "mapInfos"?: IMapInfo[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        /**
          * Emitted before a new map is loaded
         */
        "onBeforeMapChanged"?: (event: MapCardCustomEvent<void>) => void;
        /**
          * Emitted when a new map is loaded
         */
        "onMapChanged"?: (event: MapCardCustomEvent<IMapChange>) => void;
        /**
          * theme: "light" | "dark" theme to be used
         */
        "theme"?: theme;
    }
    interface MapDrawTools {
        /**
          * boolean: sketch is used by multiple components...need a way to know who should respond...
         */
        "active"?: boolean;
        /**
          * utils/interfaces: Controls how the draw tools are rendered  SKETCH mode supports snapping REFINE mode supports undo/redo
         */
        "drawMode"?: EDrawMode;
        /**
          * boolean: when true you will be able to make additional modifications to the sketched geometry
         */
        "editGraphicsEnabled"?: boolean;
        /**
          * esri/Graphic: https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html
         */
        "graphics"?: __esri.Graphic[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        /**
          * Emitted on demand when the redo action is clicked.
         */
        "onDrawRedo"?: (event: MapDrawToolsCustomEvent<void>) => void;
        /**
          * Emitted on demand when the undo action is clicked.
         */
        "onDrawUndo"?: (event: MapDrawToolsCustomEvent<void>) => void;
        /**
          * Emitted on demand when selection starts or ends.
         */
        "onSelectionLoadingChange"?: (event: MapDrawToolsCustomEvent<boolean>) => void;
        /**
          * Emitted on demand when the sketch graphics change.
         */
        "onSketchGraphicsChange"?: (event: MapDrawToolsCustomEvent<ISketchGraphicsChange>) => void;
        /**
          * esri/symbols/SimpleMarkerSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleMarkerSymbol.html
         */
        "pointSymbol"?: __esri.SimpleMarkerSymbol;
        /**
          * esri/symbols/SimpleFillSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleFillSymbol.html
         */
        "polygonSymbol"?: __esri.SimpleFillSymbol;
        /**
          * esri/symbols/SimpleLineSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleLineSymbol.html
         */
        "polylineSymbol"?: __esri.SimpleLineSymbol;
        /**
          * boolean: when eanbled the user can redo the previous operation
         */
        "redoEnabled"?: boolean;
        /**
          * boolean: when eanbled the user can undo the previous operation
         */
        "undoEnabled"?: boolean;
    }
    interface MapFullscreen {
        /**
          * esri/widgets/Fullscreen: https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Fullscreen.html
         */
        "fullscreenWidget"?: __esri.Fullscreen;
        /**
          * esri/views/MapView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
    }
    interface MapLayerPicker {
        /**
          * "transparent" | "solid": controls the button appearance when using the "dropdown" type
         */
        "appearance"?: "transparent" | "solid";
        /**
          * string[]: Optional list of enabled layer ids  If empty all layers will be available
         */
        "enabledLayerIds"?: string[];
        /**
          * string[]: Optional list of enabled table ids  If empty all tables will be available
         */
        "enabledTableIds"?: string[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        /**
          * Emitted on demand when a layer is selected
         */
        "onLayerSelectionChange"?: (event: MapLayerPickerCustomEvent<string[]>) => void;
        /**
          * Emitted on demand when no valid layers are found
         */
        "onNoLayersFound"?: (event: MapLayerPickerCustomEvent<void>) => void;
        /**
          * boolean: When true only editable layers that support the update capability will be available
         */
        "onlyShowUpdatableLayers"?: boolean;
        /**
          * string: optional placeholder icon used with "combobox" type
         */
        "placeholderIcon"?: string;
        /**
          * "s" | "m" | "l": scale to render the component
         */
        "scale"?: "s" | "m" | "l";
        /**
          * string[]: list of layer ids that have been selected by the end user
         */
        "selectedIds"?: string[];
        /**
          * boolean: when true standalone tables will also be available
         */
        "showTables"?: boolean;
        /**
          * "select" | "combobox" | "dropdown": type of component to leverage
         */
        "type"?: "select" | "combobox" | "dropdown";
    }
    interface MapLegend {
        /**
          * esri/widgets/Legend: https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html  Legend instance
         */
        "legendWidget"?: __esri.Legend;
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
    }
    interface MapPicker {
        /**
          * IMapInfo[]: array of map infos (name and id)
         */
        "mapInfos"?: IMapInfo[];
        /**
          * Emitted when a new map is loaded
         */
        "onMapInfoChange"?: (event: MapPickerCustomEvent<IMapInfo>) => void;
    }
    interface MapSearch {
        /**
          * esri/views/MapView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        /**
          * boolean: When true the selected feature popup will be shown when serach result is found
         */
        "popupEnabled"?: boolean;
        /**
          * boolean: When true a graphic will be added for the search result
         */
        "resultGraphicEnabled"?: boolean;
        /**
          * ISearchConfiguration: Configuration details for the Search widget
         */
        "searchConfiguration"?: ISearchConfiguration;
        /**
          * string: Text entered by the end user. Used to search against the locator.
         */
        "searchTerm"?: string;
        /**
          * esri/widgets/Search: https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html
         */
        "searchWidget"?: __esri.widgetsSearch;
    }
    interface MapSelectTools {
        /**
          * string | number[] |  object with r, g, b, a: https://developers.arcgis.com/javascript/latest/api-reference/esri-Color.html
         */
        "bufferColor"?: any;
        /**
          * string | number[] | object with r, g, b, a: https://developers.arcgis.com/javascript/latest/api-reference/esri-Color.html
         */
        "bufferOutlineColor"?: any;
        /**
          * boolean: When true the user can define a name for each notification list
         */
        "customLabelEnabled"?: boolean;
        /**
          * number: The default value to show for the buffer distance
         */
        "defaultBufferDistance"?: number;
        /**
          * number: The default value to show for the buffer unit
         */
        "defaultBufferUnit"?: DistanceUnit;
        /**
          * string[]: Optional list of enabled layer ids  If empty all layers will be available
         */
        "enabledLayerIds"?: string[];
        /**
          * esri/geometry: https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry.html
         */
        "geometries"?: __esri.Geometry[];
        /**
          * boolean: When true a new label is not generated for the stored selection set
         */
        "isUpdate"?: boolean;
        /**
          * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html
         */
        "layerViews"?: __esri.FeatureLayerView[];
        /**
          * esri/views/MapView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        /**
          * string: The value to show for no results when left empty the default text "0 selected features from {layerTitle}" will be shown
         */
        "noResultText"?: string;
        /**
          * Emitted on demand when the selection set changes.
         */
        "onSelectionSetChange"?: (event: MapSelectToolsCustomEvent<number>) => void;
        /**
          * ISearchConfiguration: Configuration details for the Search widget
         */
        "searchConfiguration"?: ISearchConfiguration;
        /**
          * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html
         */
        "selectLayerView"?: __esri.FeatureLayerView;
        /**
          * string[]: List of layer ids that should be shown as potential selection layers when skectching with "Use layer features" option
         */
        "selectionLayerIds"?: string[];
        /**
          * utils/interfaces/ISelectionSet: Used to store key details about any selections that have been made.
         */
        "selectionSet"?: ISelectionSet;
        /**
          * esri/symbols/SimpleLineSymbol | JSON representation : https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleLineSymbol.html
         */
        "sketchLineSymbol"?: __esri.SimpleLineSymbol;
        /**
          * esri/symbols/SimpleMarkerSymbol | JSON representation: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleMarkerSymbol.html
         */
        "sketchPointSymbol"?: __esri.SimpleMarkerSymbol;
        /**
          * esri/symbols/SimpleFillSymbol | JSON representation: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleFillSymbol.html
         */
        "sketchPolygonSymbol"?: __esri.SimpleFillSymbol;
    }
    interface MapTools {
        /**
          * IBasemapConfig: List of any basemaps to filter out from the basemap widget
         */
        "basemapConfig"?: IBasemapConfig;
        /**
          * boolean: when true the basemap widget will be available
         */
        "enableBasemap"?: boolean;
        /**
          * boolean: when true the floor filter widget will be available
         */
        "enableFloorFilter"?: boolean;
        /**
          * boolean: when true the fullscreen widget will be available
         */
        "enableFullscreen"?: boolean;
        /**
          * boolean: when true the legend widget will be available
         */
        "enableLegend"?: boolean;
        /**
          * boolean: when true the search widget will be available
         */
        "enableSearch"?: boolean;
        /**
          * "horizontal" | "vertical": used to control the orientation of the tools
         */
        "layout"?: "horizontal" | "vertical";
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        /**
          * ISearchConfiguration: Configuration details for the Search widget
         */
        "searchConfiguration"?: ISearchConfiguration;
    }
    interface PciCalculator {
    }
    interface PdfDownload {
        /**
          * number: The default number of labels per page to export
         */
        "defaultNumLabelsPerPage"?: number;
        /**
          * boolean: Controls the enabled/disabled state of download
         */
        "disabled"?: boolean;
    }
    interface PublicNotification {
        /**
          * string[]: List of layer ids that should be shown as potential addressee layers
         */
        "addresseeLayerIds"?: string[];
        /**
          * string | number[] |  object with r, g, b, a: https://developers.arcgis.com/javascript/latest/api-reference/esri-Color.html
         */
        "bufferColor"?: any;
        /**
          * string | number[] | object with r, g, b, a: https://developers.arcgis.com/javascript/latest/api-reference/esri-Color.html
         */
        "bufferOutlineColor"?: any;
        /**
          * boolean: When true the user can define a name for each notification list
         */
        "customLabelEnabled"?: boolean;
        /**
          * number: The default value to show for the buffer distance
         */
        "defaultBufferDistance"?: number;
        /**
          * number: The default value to show for the buffer unit ("feet"|"meters"|"miles"|"kilometers")
         */
        "defaultBufferUnit"?: DistanceUnit;
        /**
          * string: The default value to use for the export title
         */
        "defaultExportTitle"?: string;
        /**
          * number: The default number of labels per page to export
         */
        "defaultNumLabelsPerPage"?: number;
        /**
          * The effect that will be applied when featureHighlightEnabled is true  esri/layers/support/FeatureEffect: https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html
         */
        "featureEffect"?: __esri.FeatureEffect;
        /**
          * boolean: When enabled features will be highlighted when their notification list item is clicked.
         */
        "featureHighlightEnabled"?: boolean;
        /**
          * esri/views/MapView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        /**
          * string: The value to show for no results when left empty the default text "0 selected features from {layerTitle}" will be shown
         */
        "noResultText"?: string;
        /**
          * Emitted on demand when searchConfiguration gets a new value
         */
        "onSearchConfigurationChange"?: (event: PublicNotificationCustomEvent<ISearchConfiguration>) => void;
        /**
          * ISearchConfiguration: Configuration details for the Search widget
         */
        "searchConfiguration"?: ISearchConfiguration;
        /**
          * string[]: List of layer ids that should be shown as potential selection layers when skectching with "Use layer features" option
         */
        "selectionLayerIds"?: string[];
        /**
          * boolean: When true the refine selection workflow will be included in the UI
         */
        "showRefineSelection"?: boolean;
        /**
          * boolean: When false no buffer distance or unit controls will be exposed
         */
        "showSearchSettings"?: boolean;
        /**
          * esri/symbols/SimpleLineSymbol | JSON representation : https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleLineSymbol.html  A JSON representation of the instance in the ArcGIS format. See the ArcGIS REST API documentation for examples of the structure of various input JSON objects. https://developers.arcgis.com/documentation/common-data-types/symbol-objects.htm
         */
        "sketchLineSymbol"?: __esri.SimpleLineSymbol | any;
        /**
          * esri/symbols/SimpleMarkerSymbol | JSON representation: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleMarkerSymbol.html  A JSON representation of the instance in the ArcGIS format. See the ArcGIS REST API documentation for examples of the structure of various input JSON objects. https://developers.arcgis.com/documentation/common-data-types/symbol-objects.htm
         */
        "sketchPointSymbol"?: __esri.SimpleMarkerSymbol | any;
        /**
          * esri/symbols/SimpleFillSymbol | JSON representation: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleFillSymbol.html  A JSON representation of the instance in the ArcGIS format. See the ArcGIS REST API documentation for examples of the structure of various input JSON objects. https://developers.arcgis.com/documentation/common-data-types/symbol-objects.htm
         */
        "sketchPolygonSymbol"?: __esri.SimpleFillSymbol | any;
    }
    interface RefineSelection {
        /**
          * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html
         */
        "addresseeLayer"?: __esri.FeatureLayerView;
        /**
          * string[]: Optional list of enabled layer ids  If empty all layers will be available
         */
        "enabledLayerIds"?: string[];
        /**
          * esri/views/MapView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        /**
          * Emitted on demand when selection starts or ends.
         */
        "onSelectionLoadingChange"?: (event: RefineSelectionCustomEvent<boolean>) => void;
        /**
          * Emitted on demand when selection sets change.
         */
        "onSelectionSetsChanged"?: (event: RefineSelectionCustomEvent<ISelectionSet[]>) => void;
        /**
          * utils/interfaces/ISelectionSet: An array of user defined selection sets
         */
        "selectionSets"?: ISelectionSet[];
        /**
          * esri/symbols/SimpleLineSymbol | JSON representation : https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleLineSymbol.html
         */
        "sketchLineSymbol"?: __esri.SimpleLineSymbol;
        /**
          * esri/symbols/SimpleMarkerSymbol | JSON representation: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleMarkerSymbol.html
         */
        "sketchPointSymbol"?: __esri.SimpleMarkerSymbol;
        /**
          * esri/symbols/SimpleFillSymbol | JSON representation: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleFillSymbol.html
         */
        "sketchPolygonSymbol"?: __esri.SimpleFillSymbol;
    }
    interface SolutionConfiguration {
        /**
          * Credentials for requests, which can be a serialized UserSession
         */
        "authentication"?: UserSession;
        "serializedAuthentication"?: string;
        /**
          * Used to show/hide loading indicator
         */
        "showLoading"?: boolean;
        /**
          * Contains the current solution item id
         */
        "solutionItemId"?: string;
    }
    interface SolutionContents {
        "onSolutionItemSelected"?: (event: SolutionContentsCustomEvent<string>) => void;
        /**
          * Contains the current item that is selected.
         */
        "selectedItemId"?: string;
        /**
          * Contains the public value for this component.
         */
        "templateHierarchy"?: IInventoryItem[];
    }
    interface SolutionItem {
        /**
          * Credentials for requests
         */
        "authentication"?: UserSession;
        /**
          * A template's itemId.
         */
        "itemId"?: string;
        /**
          * Contains the organization based variables
         */
        "organizationVariables"?: string;
        /**
          * Contains the solution based variables
         */
        "solutionVariables"?: string;
    }
    interface SolutionItemDetails {
        /**
          * A template's itemId.
         */
        "itemId"?: string;
    }
    interface SolutionItemIcon {
        /**
          * Indicate if this is portal
         */
        "isPortal"?: boolean;
        /**
          * The type for the item
         */
        "type"?: string;
        /**
          * The typeKeywords for the item
         */
        "typeKeywords"?: string[];
    }
    interface SolutionItemSharing {
        /**
          * A template's groupId.
         */
        "groupId"?: string;
    }
    interface SolutionOrganizationVariables {
        "onOrganizationVariableSelected"?: (event: SolutionOrganizationVariablesCustomEvent<{ itemId: string, value: string }>) => void;
        /**
          * Contains the public value for this component.
         */
        "value"?: string;
    }
    interface SolutionResourceItem {
        /**
          * Credentials for requests
         */
        "authentication"?: UserSession;
        /**
          * A template's itemId. This is used to get the correct model from a store in the json-editor
         */
        "itemId"?: string;
    }
    interface SolutionSpatialRef {
        /**
          * The wkid that will be used as the default when no user selection has been made.
         */
        "defaultWkid"?: number;
        /**
          * When true, all but the main switch are disabled to prevent interaction.
         */
        "locked"?: boolean;
        "onFeatureServiceSpatialReferenceChange"?: (event: SolutionSpatialRefCustomEvent<{ name: string, enabled: boolean }>) => void;
        /**
          * List of service names the spatial reference should apply to
         */
        "services"?: string[];
        /**
          * Contains the public value for this component, which is a wkid or a wkt.
         */
        "value"?: string;
    }
    interface SolutionTemplateData {
        /**
          * This needs to be unique for props vs data of an item
         */
        "instanceid"?: string;
        /**
          * A template's itemId. This is used to get the correct model from a store in the json-editor
         */
        "itemId"?: string;
        "organizationVariables"?: string;
        /**
          * Contains the solution based variables
         */
        "solutionVariables"?: string;
        /**
          * Used to show/hide the variable containers
         */
        "varsOpen"?: boolean;
    }
    interface SolutionVariables {
        "onSolutionVariableSelected"?: (event: SolutionVariablesCustomEvent<{ itemId: string, value: string }>) => void;
        /**
          * Contains the public value for this component.
         */
        "value"?: string;
    }
    interface SpatialRef {
        /**
          * The wkid that will be used as the default when no user selection has been made.
         */
        "defaultWkid"?: number;
        /**
          * When true, all are disabled to prevent interaction.
         */
        "disabled"?: boolean;
        "onSpatialReferenceChange"?: (event: SpatialRefCustomEvent<IValueChange>) => void;
        /**
          * Contains the public value for this component, which is a wkid or a wkt.
         */
        "value"?: string;
    }
    interface StoreManager {
        /**
          * Credentials for requests
         */
        "authentication"?: UserSession;
        "onStateLoaded"?: (event: StoreManagerCustomEvent<any>) => void;
        /**
          * Templates for the current solution
         */
        "templates"?: any[];
        /**
          * Contains source json as a string
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "basemap-gallery": BasemapGallery;
        "buffer-tools": BufferTools;
        "card-manager": CardManager;
        "crowdsource-manager": CrowdsourceManager;
        "crowdsource-reporter": CrowdsourceReporter;
        "deduct-calculator": DeductCalculator;
        "edit-card": EditCard;
        "floor-filter": FloorFilter;
        "info-card": InfoCard;
        "json-editor": JsonEditor;
        "layer-table": LayerTable;
        "layout-manager": LayoutManager;
        "list-item": ListItem;
        "map-card": MapCard;
        "map-draw-tools": MapDrawTools;
        "map-fullscreen": MapFullscreen;
        "map-layer-picker": MapLayerPicker;
        "map-legend": MapLegend;
        "map-picker": MapPicker;
        "map-search": MapSearch;
        "map-select-tools": MapSelectTools;
        "map-tools": MapTools;
        "pci-calculator": PciCalculator;
        "pdf-download": PdfDownload;
        "public-notification": PublicNotification;
        "refine-selection": RefineSelection;
        "solution-configuration": SolutionConfiguration;
        "solution-contents": SolutionContents;
        "solution-item": SolutionItem;
        "solution-item-details": SolutionItemDetails;
        "solution-item-icon": SolutionItemIcon;
        "solution-item-sharing": SolutionItemSharing;
        "solution-organization-variables": SolutionOrganizationVariables;
        "solution-resource-item": SolutionResourceItem;
        "solution-spatial-ref": SolutionSpatialRef;
        "solution-template-data": SolutionTemplateData;
        "solution-variables": SolutionVariables;
        "spatial-ref": SpatialRef;
        "store-manager": StoreManager;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "basemap-gallery": LocalJSX.BasemapGallery & JSXBase.HTMLAttributes<HTMLBasemapGalleryElement>;
            "buffer-tools": LocalJSX.BufferTools & JSXBase.HTMLAttributes<HTMLBufferToolsElement>;
            "card-manager": LocalJSX.CardManager & JSXBase.HTMLAttributes<HTMLCardManagerElement>;
            "crowdsource-manager": LocalJSX.CrowdsourceManager & JSXBase.HTMLAttributes<HTMLCrowdsourceManagerElement>;
            "crowdsource-reporter": LocalJSX.CrowdsourceReporter & JSXBase.HTMLAttributes<HTMLCrowdsourceReporterElement>;
            "deduct-calculator": LocalJSX.DeductCalculator & JSXBase.HTMLAttributes<HTMLDeductCalculatorElement>;
            "edit-card": LocalJSX.EditCard & JSXBase.HTMLAttributes<HTMLEditCardElement>;
            "floor-filter": LocalJSX.FloorFilter & JSXBase.HTMLAttributes<HTMLFloorFilterElement>;
            "info-card": LocalJSX.InfoCard & JSXBase.HTMLAttributes<HTMLInfoCardElement>;
            "json-editor": LocalJSX.JsonEditor & JSXBase.HTMLAttributes<HTMLJsonEditorElement>;
            "layer-table": LocalJSX.LayerTable & JSXBase.HTMLAttributes<HTMLLayerTableElement>;
            "layout-manager": LocalJSX.LayoutManager & JSXBase.HTMLAttributes<HTMLLayoutManagerElement>;
            "list-item": LocalJSX.ListItem & JSXBase.HTMLAttributes<HTMLListItemElement>;
            "map-card": LocalJSX.MapCard & JSXBase.HTMLAttributes<HTMLMapCardElement>;
            "map-draw-tools": LocalJSX.MapDrawTools & JSXBase.HTMLAttributes<HTMLMapDrawToolsElement>;
            "map-fullscreen": LocalJSX.MapFullscreen & JSXBase.HTMLAttributes<HTMLMapFullscreenElement>;
            "map-layer-picker": LocalJSX.MapLayerPicker & JSXBase.HTMLAttributes<HTMLMapLayerPickerElement>;
            "map-legend": LocalJSX.MapLegend & JSXBase.HTMLAttributes<HTMLMapLegendElement>;
            "map-picker": LocalJSX.MapPicker & JSXBase.HTMLAttributes<HTMLMapPickerElement>;
            "map-search": LocalJSX.MapSearch & JSXBase.HTMLAttributes<HTMLMapSearchElement>;
            "map-select-tools": LocalJSX.MapSelectTools & JSXBase.HTMLAttributes<HTMLMapSelectToolsElement>;
            "map-tools": LocalJSX.MapTools & JSXBase.HTMLAttributes<HTMLMapToolsElement>;
            "pci-calculator": LocalJSX.PciCalculator & JSXBase.HTMLAttributes<HTMLPciCalculatorElement>;
            "pdf-download": LocalJSX.PdfDownload & JSXBase.HTMLAttributes<HTMLPdfDownloadElement>;
            "public-notification": LocalJSX.PublicNotification & JSXBase.HTMLAttributes<HTMLPublicNotificationElement>;
            "refine-selection": LocalJSX.RefineSelection & JSXBase.HTMLAttributes<HTMLRefineSelectionElement>;
            "solution-configuration": LocalJSX.SolutionConfiguration & JSXBase.HTMLAttributes<HTMLSolutionConfigurationElement>;
            "solution-contents": LocalJSX.SolutionContents & JSXBase.HTMLAttributes<HTMLSolutionContentsElement>;
            "solution-item": LocalJSX.SolutionItem & JSXBase.HTMLAttributes<HTMLSolutionItemElement>;
            "solution-item-details": LocalJSX.SolutionItemDetails & JSXBase.HTMLAttributes<HTMLSolutionItemDetailsElement>;
            "solution-item-icon": LocalJSX.SolutionItemIcon & JSXBase.HTMLAttributes<HTMLSolutionItemIconElement>;
            "solution-item-sharing": LocalJSX.SolutionItemSharing & JSXBase.HTMLAttributes<HTMLSolutionItemSharingElement>;
            "solution-organization-variables": LocalJSX.SolutionOrganizationVariables & JSXBase.HTMLAttributes<HTMLSolutionOrganizationVariablesElement>;
            "solution-resource-item": LocalJSX.SolutionResourceItem & JSXBase.HTMLAttributes<HTMLSolutionResourceItemElement>;
            "solution-spatial-ref": LocalJSX.SolutionSpatialRef & JSXBase.HTMLAttributes<HTMLSolutionSpatialRefElement>;
            "solution-template-data": LocalJSX.SolutionTemplateData & JSXBase.HTMLAttributes<HTMLSolutionTemplateDataElement>;
            "solution-variables": LocalJSX.SolutionVariables & JSXBase.HTMLAttributes<HTMLSolutionVariablesElement>;
            "spatial-ref": LocalJSX.SpatialRef & JSXBase.HTMLAttributes<HTMLSpatialRefElement>;
            "store-manager": LocalJSX.StoreManager & JSXBase.HTMLAttributes<HTMLStoreManagerElement>;
        }
    }
}
