/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ERefineMode, ESelectionMode, EWorkflowType, IInventoryItem, IItemDetails, IItemShare, IOrganizationVariableItem, IResourcePath, ISearchResult, ISelectionSet, ISolutionConfiguration, ISolutionItem, ISolutionSpatialReferenceInfo, ISpatialRefRepresentation, ITemplateData, IVariableItem, SelectionMode } from "./utils/interfaces";
import { UserSession } from "@esri/solution-common";
export namespace Components {
    interface BufferTools {
        /**
          * string: The appearance of display. Can be a slider or text inputs for distance/value
         */
        "appearance": "slider" | "text";
        /**
          * number: The distance used for buffer
         */
        "distance": number;
        /**
          * esri/geometry/Geometry: https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html
         */
        "geometries": __esri.Geometry[];
        /**
          * number: The component's maximum selectable value.
         */
        "sliderMax": number;
        /**
          * number: The component's minimum selectable value.
         */
        "sliderMin": number;
        /**
          * number: Displays tick marks on the number line at a specified interval.
         */
        "sliderTicks": number;
        /**
          * boolean: option to control if buffer results should be unioned
         */
        "unionResults": boolean;
        /**
          * LinearUnits: https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-geometryEngine.html#LinearUnits
         */
        "unit": __esri.LinearUnits;
    }
    interface JsonEditor {
        /**
          * Gets the contents of the editor.
          * @returns Promise resolving with the current contents of the editor
         */
        "getEditorContents": () => Promise<any>;
        /**
          * Contains a public value to indicate if the model has any errors that would prevent saving it.
         */
        "hasErrors": boolean;
        /**
          * Contains a unique identifier for when we have multiple instances of the editor. For example when we want to show an item's data as well as an item's properties.
         */
        "instanceid": any;
        /**
          * Replaces the current selection with the supplied text, inserting if nothing is selected.
          * @param replacement Text to use for replacement or insertion
          * @returns Promise resolving when function is done
         */
        "replaceCurrentSelection": (replacement: string) => Promise<any>;
        /**
          * Resets the contents of the editor with the current `value`.
          * @returns Promise resolving when function is done
         */
        "reset": () => Promise<any>;
        /**
          * Contains the public value for this component; it is not changed by the editor. When changed, the change overwrites the contents of the editor.
         */
        "value": any;
    }
    interface MapDrawTools {
        /**
          * boolean: sketch is used by multiple components...need a way to know who should respond...
         */
        "active": boolean;
        "border": boolean;
        "clear": () => Promise<void>;
        /**
          * esri/Graphic: https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html
         */
        "graphics": __esri.Graphic[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * esri/symbols/SimpleMarkerSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleMarkerSymbol.html
         */
        "pointSymbol": __esri.SimpleMarkerSymbol;
        /**
          * esri/symbols/SimpleFillSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleFillSymbol.html
         */
        "polygonSymbol": __esri.SimpleFillSymbol;
        /**
          * esri/symbols/SimpleLineSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleLineSymbol.html
         */
        "polylineSymbol": __esri.SimpleLineSymbol;
    }
    interface MapLayerPicker {
        /**
          * string[]: list of layer names from the map
         */
        "layerNames": string[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * string[]: list of layers that have been selected by the end user
         */
        "selectedLayers": string[];
        /**
          * SelectionMode: "single" | "multi"  Should the component support selection against a single layer or multiple layers.
         */
        "selectionMode": SelectionMode;
    }
    interface MapSearch {
        "clear": () => Promise<void>;
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
    }
    interface MapSelectTools {
        "clearSelection": () => Promise<void>;
        /**
          * esri/geometry: https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry.html
         */
        "geometries": __esri.Geometry[];
        "getSelectType": () => Promise<EWorkflowType>;
        "getSelectedIds": () => Promise<number[]>;
        "getSelection": () => Promise<ISelectionSet>;
        "getSelectionLabel": () => Promise<string>;
        /**
          * boolean: When true a new label is not generated for the stored selection set
         */
        "isUpdate": boolean;
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * esri/layers/Layer: https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html
         */
        "searchLayers": __esri.Layer[];
        /**
          * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html
         */
        "selectLayerView": __esri.FeatureLayerView;
        /**
          * utils/interfaces/ISelectionSet: Used to store key details about any selections that have been made.
         */
        "selectionSet": ISelectionSet;
    }
    interface NewPublicNotification {
        /**
          * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html
         */
        "addresseeLayer": __esri.FeatureLayerView;
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * esri/layers/Layer: https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html
         */
        "selectionLayers": __esri.Layer[];
    }
    interface PdfDownload {
        "disabled": boolean;
        "layerView": __esri.FeatureLayerView;
    }
    interface PublicNotification {
        /**
          * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html
         */
        "addresseeLayer": __esri.FeatureLayerView;
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * string: Default message to show when we have no selection sets
         */
        "message": string;
        /**
          * esri/layers/Layer: https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html
         */
        "selectionLayers": __esri.Layer[];
    }
    interface RefineSelectionTools {
        /**
          * boolean: sketch is used by multiple components...need a way to know who should respond...
         */
        "active": boolean;
        "border": boolean;
        "clearHighlight": () => Promise<void>;
        /**
          * esri/Graphic: https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html
         */
        "graphics": __esri.Graphic[];
        /**
          * number: The oids of the selected features
         */
        "ids": number[];
        /**
          * esri/views/layers/LayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-LayerView.html
         */
        "layerView": __esri.FeatureLayerView;
        /**
          * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html
         */
        "layerViews": __esri.FeatureLayerView[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * utils/interfaces/ESelectionMode: ADD, REMOVE
         */
        "mode": ESelectionMode;
        /**
          * utils/interfaces/ERefineMode: ALL, SUBSET
         */
        "refineMode": ERefineMode;
        "reset": () => Promise<void>;
        /**
          * boolean: Used to control the visibility of the layer picker
         */
        "useLayerPicker": boolean;
    }
    interface SolutionConfiguration {
        /**
          * Credentials for requests
         */
        "authentication": UserSession;
        "getEditModels": () => Promise<any>;
        "getSourceTemplates": () => Promise<any>;
        "getSpatialReferenceInfo": () => Promise<ISolutionSpatialReferenceInfo>;
        /**
          * Contains the current solution item we are working with
         */
        "item": ISolutionItem;
        /**
          * Contains the current solution item id
         */
        "itemid": string;
        "save": () => Promise<any>;
        /**
          * Used to show/hide loading indicator
         */
        "showLoading": boolean;
        /**
          * Contains the current solution item data
         */
        "sourceItemData": any;
        /**
          * Contains the raw templates from the solution item
         */
        "templates": any[];
        /**
          * Used to show/hide the content tree
         */
        "treeOpen": boolean;
        /**
          * Contains the public value for this component.
         */
        "value": ISolutionConfiguration;
    }
    interface SolutionContents {
        /**
          * Contains the current item that is selected.
         */
        "selectedItem": ISolutionItem;
        /**
          * Contains the public value for this component.
         */
        "value": IInventoryItem[];
    }
    interface SolutionItem {
        /**
          * Credentials for requests
         */
        "authentication": UserSession;
        /**
          * Contains the organization based variables
         */
        "organizationVariables": any[];
        /**
          * Contains the solution based variables
         */
        "solutionVariables": any[];
        /**
          * Contains the public value for this component.
         */
        "value": ISolutionItem;
    }
    interface SolutionItemDetails {
        /**
          * Contains the public type for this component.
         */
        "type": string;
        /**
          * Contains the public value for this component.
         */
        "value": IItemDetails;
    }
    interface SolutionItemIcon {
        /**
          * Indicate if this is portal
         */
        "isPortal": boolean;
        /**
          * The type for the item
         */
        "type": string;
        /**
          * The typeKeywords for the item
         */
        "typeKeywords": string[];
    }
    interface SolutionItemSharing {
        "getShareInfo": () => Promise<any>;
        /**
          * Contains the public id for the group these items will be shared or un-shared with.
         */
        "groupId": string;
        /**
          * Contains the public value for this component.
         */
        "value": IItemShare[];
    }
    interface SolutionOrganizationVariables {
        /**
          * Contains the public value for this component.
         */
        "value": IOrganizationVariableItem[];
    }
    interface SolutionResourceItem {
        /**
          * Credentials for requests
         */
        "authentication": UserSession;
        /**
          * The templates itemId. This is used to get the correct model from a store in the json-editor
         */
        "itemid": string;
        /**
          * The templates resourceFilePaths.
         */
        "resourceFilePaths": IResourcePath[];
        /**
          * The templates resources.
         */
        "resources": {};
    }
    interface SolutionSpatialRef {
        /**
          * Returns the spatial reference description of the supplied value. (Exposes private method `_createSpatialRefDisplay` for testing.)
          * @param value WKID or WKT or null for default
          * @returns If component is using a WKID, description using WKID; otherwise, the WKT; defaults to 102100
         */
        "createSpatialRefDisplay": (value: string) => Promise<ISpatialRefRepresentation>;
        /**
          * The wkid that will be used as the default when no user selection has been made.
         */
        "defaultWkid": number;
        /**
          * Returns the current spatial reference description. (Exposes private variable `spatialRef` for testing.)
         */
        "getSpatialRef": () => Promise<ISpatialRefRepresentation>;
        /**
          * When true, all but the main switch are disabled to prevent interaction.
         */
        "locked": boolean;
        /**
          * List of service names the spatial reference should apply to
         */
        "services": string[];
        /**
          * Contains the public value for this component.
         */
        "value": string;
        /**
          * Converts a WKID into a spatial reference description. (Exposes private method `_wkidToDisplay` for testing.)
          * @param wkid WKID to look up
          * @returns Description, or "WKID &lt;wkid&gt;" if a description doesn't exist for the WKID
         */
        "wkidToDisplay": (wkid: number) => Promise<string>;
    }
    interface SolutionTemplateData {
        /**
          * Credentials for requests
         */
        "authentication": UserSession;
        /**
          * This needs to be unique for props vs data of an item
         */
        "instanceid": string;
        /**
          * A templates itemId. This is used to get the correct model from a store in the json-editor
         */
        "itemid": string;
        /**
          * Contains the organization based variables
         */
        "organizationVariables": IOrganizationVariableItem[];
        /**
          * Contains the solution based variables
         */
        "solutionVariables": IVariableItem[];
        /**
          * Contains the public value for this component.  When working with a resource item this should contain an IResourceItem  When working with a json type item this should contain the data and vars
         */
        "value": ITemplateData;
        /**
          * Used to show/hide the variable containers
         */
        "varsOpen": boolean;
    }
    interface SolutionVariables {
        /**
          * Contains the public value for this component.
         */
        "value": IVariableItem[];
    }
    interface StoreManager {
        /**
          * Credentials for requests
         */
        "authentication": UserSession;
        /**
          * Templates for the current solution
         */
        "templates": any[];
        /**
          * Contains source json as a string
         */
        "value": string;
    }
}
export interface BufferToolsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBufferToolsElement;
}
export interface MapDrawToolsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMapDrawToolsElement;
}
export interface MapLayerPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMapLayerPickerElement;
}
export interface MapSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMapSearchElement;
}
export interface MapSelectToolsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMapSelectToolsElement;
}
export interface RefineSelectionToolsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRefineSelectionToolsElement;
}
export interface SolutionConfigurationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSolutionConfigurationElement;
}
export interface SolutionContentsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSolutionContentsElement;
}
export interface SolutionOrganizationVariablesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSolutionOrganizationVariablesElement;
}
export interface SolutionSpatialRefCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSolutionSpatialRefElement;
}
export interface SolutionVariablesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSolutionVariablesElement;
}
export interface StoreManagerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStoreManagerElement;
}
declare global {
    interface HTMLBufferToolsElement extends Components.BufferTools, HTMLStencilElement {
    }
    var HTMLBufferToolsElement: {
        prototype: HTMLBufferToolsElement;
        new (): HTMLBufferToolsElement;
    };
    interface HTMLJsonEditorElement extends Components.JsonEditor, HTMLStencilElement {
    }
    var HTMLJsonEditorElement: {
        prototype: HTMLJsonEditorElement;
        new (): HTMLJsonEditorElement;
    };
    interface HTMLMapDrawToolsElement extends Components.MapDrawTools, HTMLStencilElement {
    }
    var HTMLMapDrawToolsElement: {
        prototype: HTMLMapDrawToolsElement;
        new (): HTMLMapDrawToolsElement;
    };
    interface HTMLMapLayerPickerElement extends Components.MapLayerPicker, HTMLStencilElement {
    }
    var HTMLMapLayerPickerElement: {
        prototype: HTMLMapLayerPickerElement;
        new (): HTMLMapLayerPickerElement;
    };
    interface HTMLMapSearchElement extends Components.MapSearch, HTMLStencilElement {
    }
    var HTMLMapSearchElement: {
        prototype: HTMLMapSearchElement;
        new (): HTMLMapSearchElement;
    };
    interface HTMLMapSelectToolsElement extends Components.MapSelectTools, HTMLStencilElement {
    }
    var HTMLMapSelectToolsElement: {
        prototype: HTMLMapSelectToolsElement;
        new (): HTMLMapSelectToolsElement;
    };
    interface HTMLNewPublicNotificationElement extends Components.NewPublicNotification, HTMLStencilElement {
    }
    var HTMLNewPublicNotificationElement: {
        prototype: HTMLNewPublicNotificationElement;
        new (): HTMLNewPublicNotificationElement;
    };
    interface HTMLPdfDownloadElement extends Components.PdfDownload, HTMLStencilElement {
    }
    var HTMLPdfDownloadElement: {
        prototype: HTMLPdfDownloadElement;
        new (): HTMLPdfDownloadElement;
    };
    interface HTMLPublicNotificationElement extends Components.PublicNotification, HTMLStencilElement {
    }
    var HTMLPublicNotificationElement: {
        prototype: HTMLPublicNotificationElement;
        new (): HTMLPublicNotificationElement;
    };
    interface HTMLRefineSelectionToolsElement extends Components.RefineSelectionTools, HTMLStencilElement {
    }
    var HTMLRefineSelectionToolsElement: {
        prototype: HTMLRefineSelectionToolsElement;
        new (): HTMLRefineSelectionToolsElement;
    };
    interface HTMLSolutionConfigurationElement extends Components.SolutionConfiguration, HTMLStencilElement {
    }
    var HTMLSolutionConfigurationElement: {
        prototype: HTMLSolutionConfigurationElement;
        new (): HTMLSolutionConfigurationElement;
    };
    interface HTMLSolutionContentsElement extends Components.SolutionContents, HTMLStencilElement {
    }
    var HTMLSolutionContentsElement: {
        prototype: HTMLSolutionContentsElement;
        new (): HTMLSolutionContentsElement;
    };
    interface HTMLSolutionItemElement extends Components.SolutionItem, HTMLStencilElement {
    }
    var HTMLSolutionItemElement: {
        prototype: HTMLSolutionItemElement;
        new (): HTMLSolutionItemElement;
    };
    interface HTMLSolutionItemDetailsElement extends Components.SolutionItemDetails, HTMLStencilElement {
    }
    var HTMLSolutionItemDetailsElement: {
        prototype: HTMLSolutionItemDetailsElement;
        new (): HTMLSolutionItemDetailsElement;
    };
    interface HTMLSolutionItemIconElement extends Components.SolutionItemIcon, HTMLStencilElement {
    }
    var HTMLSolutionItemIconElement: {
        prototype: HTMLSolutionItemIconElement;
        new (): HTMLSolutionItemIconElement;
    };
    interface HTMLSolutionItemSharingElement extends Components.SolutionItemSharing, HTMLStencilElement {
    }
    var HTMLSolutionItemSharingElement: {
        prototype: HTMLSolutionItemSharingElement;
        new (): HTMLSolutionItemSharingElement;
    };
    interface HTMLSolutionOrganizationVariablesElement extends Components.SolutionOrganizationVariables, HTMLStencilElement {
    }
    var HTMLSolutionOrganizationVariablesElement: {
        prototype: HTMLSolutionOrganizationVariablesElement;
        new (): HTMLSolutionOrganizationVariablesElement;
    };
    interface HTMLSolutionResourceItemElement extends Components.SolutionResourceItem, HTMLStencilElement {
    }
    var HTMLSolutionResourceItemElement: {
        prototype: HTMLSolutionResourceItemElement;
        new (): HTMLSolutionResourceItemElement;
    };
    interface HTMLSolutionSpatialRefElement extends Components.SolutionSpatialRef, HTMLStencilElement {
    }
    var HTMLSolutionSpatialRefElement: {
        prototype: HTMLSolutionSpatialRefElement;
        new (): HTMLSolutionSpatialRefElement;
    };
    interface HTMLSolutionTemplateDataElement extends Components.SolutionTemplateData, HTMLStencilElement {
    }
    var HTMLSolutionTemplateDataElement: {
        prototype: HTMLSolutionTemplateDataElement;
        new (): HTMLSolutionTemplateDataElement;
    };
    interface HTMLSolutionVariablesElement extends Components.SolutionVariables, HTMLStencilElement {
    }
    var HTMLSolutionVariablesElement: {
        prototype: HTMLSolutionVariablesElement;
        new (): HTMLSolutionVariablesElement;
    };
    interface HTMLStoreManagerElement extends Components.StoreManager, HTMLStencilElement {
    }
    var HTMLStoreManagerElement: {
        prototype: HTMLStoreManagerElement;
        new (): HTMLStoreManagerElement;
    };
    interface HTMLElementTagNameMap {
        "buffer-tools": HTMLBufferToolsElement;
        "json-editor": HTMLJsonEditorElement;
        "map-draw-tools": HTMLMapDrawToolsElement;
        "map-layer-picker": HTMLMapLayerPickerElement;
        "map-search": HTMLMapSearchElement;
        "map-select-tools": HTMLMapSelectToolsElement;
        "new-public-notification": HTMLNewPublicNotificationElement;
        "pdf-download": HTMLPdfDownloadElement;
        "public-notification": HTMLPublicNotificationElement;
        "refine-selection-tools": HTMLRefineSelectionToolsElement;
        "solution-configuration": HTMLSolutionConfigurationElement;
        "solution-contents": HTMLSolutionContentsElement;
        "solution-item": HTMLSolutionItemElement;
        "solution-item-details": HTMLSolutionItemDetailsElement;
        "solution-item-icon": HTMLSolutionItemIconElement;
        "solution-item-sharing": HTMLSolutionItemSharingElement;
        "solution-organization-variables": HTMLSolutionOrganizationVariablesElement;
        "solution-resource-item": HTMLSolutionResourceItemElement;
        "solution-spatial-ref": HTMLSolutionSpatialRefElement;
        "solution-template-data": HTMLSolutionTemplateDataElement;
        "solution-variables": HTMLSolutionVariablesElement;
        "store-manager": HTMLStoreManagerElement;
    }
}
declare namespace LocalJSX {
    interface BufferTools {
        /**
          * string: The appearance of display. Can be a slider or text inputs for distance/value
         */
        "appearance"?: "slider" | "text";
        /**
          * number: The distance used for buffer
         */
        "distance"?: number;
        /**
          * esri/geometry/Geometry: https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html
         */
        "geometries"?: __esri.Geometry[];
        "onBufferComplete"?: (event: BufferToolsCustomEvent<any>) => void;
        /**
          * number: The component's maximum selectable value.
         */
        "sliderMax"?: number;
        /**
          * number: The component's minimum selectable value.
         */
        "sliderMin"?: number;
        /**
          * number: Displays tick marks on the number line at a specified interval.
         */
        "sliderTicks"?: number;
        /**
          * boolean: option to control if buffer results should be unioned
         */
        "unionResults"?: boolean;
        /**
          * LinearUnits: https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-geometryEngine.html#LinearUnits
         */
        "unit"?: __esri.LinearUnits;
    }
    interface JsonEditor {
        /**
          * Contains a public value to indicate if the model has any errors that would prevent saving it.
         */
        "hasErrors"?: boolean;
        /**
          * Contains a unique identifier for when we have multiple instances of the editor. For example when we want to show an item's data as well as an item's properties.
         */
        "instanceid"?: any;
        /**
          * Contains the public value for this component; it is not changed by the editor. When changed, the change overwrites the contents of the editor.
         */
        "value"?: any;
    }
    interface MapDrawTools {
        /**
          * boolean: sketch is used by multiple components...need a way to know who should respond...
         */
        "active"?: boolean;
        "border"?: boolean;
        /**
          * esri/Graphic: https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html
         */
        "graphics"?: __esri.Graphic[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        "onSketchGraphicsChange"?: (event: MapDrawToolsCustomEvent<any>) => void;
        /**
          * esri/symbols/SimpleMarkerSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleMarkerSymbol.html
         */
        "pointSymbol"?: __esri.SimpleMarkerSymbol;
        /**
          * esri/symbols/SimpleFillSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleFillSymbol.html
         */
        "polygonSymbol"?: __esri.SimpleFillSymbol;
        /**
          * esri/symbols/SimpleLineSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleLineSymbol.html
         */
        "polylineSymbol"?: __esri.SimpleLineSymbol;
    }
    interface MapLayerPicker {
        /**
          * string[]: list of layer names from the map
         */
        "layerNames"?: string[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        "onLayerSelectionChange"?: (event: MapLayerPickerCustomEvent<any>) => void;
        /**
          * string[]: list of layers that have been selected by the end user
         */
        "selectedLayers"?: string[];
        /**
          * SelectionMode: "single" | "multi"  Should the component support selection against a single layer or multiple layers.
         */
        "selectionMode"?: SelectionMode;
    }
    interface MapSearch {
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        "onSearchChange"?: (event: MapSearchCustomEvent<ISearchResult>) => void;
    }
    interface MapSelectTools {
        /**
          * esri/geometry: https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry.html
         */
        "geometries"?: __esri.Geometry[];
        /**
          * boolean: When true a new label is not generated for the stored selection set
         */
        "isUpdate"?: boolean;
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        "onSelectionSetChange"?: (event: MapSelectToolsCustomEvent<any>) => void;
        "onWorkflowTypeChange"?: (event: MapSelectToolsCustomEvent<any>) => void;
        /**
          * esri/layers/Layer: https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html
         */
        "searchLayers"?: __esri.Layer[];
        /**
          * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html
         */
        "selectLayerView"?: __esri.FeatureLayerView;
        /**
          * utils/interfaces/ISelectionSet: Used to store key details about any selections that have been made.
         */
        "selectionSet"?: ISelectionSet;
    }
    interface NewPublicNotification {
        /**
          * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html
         */
        "addresseeLayer"?: __esri.FeatureLayerView;
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        /**
          * esri/layers/Layer: https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html
         */
        "selectionLayers"?: __esri.Layer[];
    }
    interface PdfDownload {
        "disabled"?: boolean;
        "layerView"?: __esri.FeatureLayerView;
    }
    interface PublicNotification {
        /**
          * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html
         */
        "addresseeLayer"?: __esri.FeatureLayerView;
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        /**
          * string: Default message to show when we have no selection sets
         */
        "message"?: string;
        /**
          * esri/layers/Layer: https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html
         */
        "selectionLayers"?: __esri.Layer[];
    }
    interface RefineSelectionTools {
        /**
          * boolean: sketch is used by multiple components...need a way to know who should respond...
         */
        "active"?: boolean;
        "border"?: boolean;
        /**
          * esri/Graphic: https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html
         */
        "graphics"?: __esri.Graphic[];
        /**
          * number: The oids of the selected features
         */
        "ids"?: number[];
        /**
          * esri/views/layers/LayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-LayerView.html
         */
        "layerView"?: __esri.FeatureLayerView;
        /**
          * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html
         */
        "layerViews"?: __esri.FeatureLayerView[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        /**
          * utils/interfaces/ESelectionMode: ADD, REMOVE
         */
        "mode"?: ESelectionMode;
        "onRefineSelectionGraphicsChange"?: (event: RefineSelectionToolsCustomEvent<any>) => void;
        "onRefineSelectionIdsChange"?: (event: RefineSelectionToolsCustomEvent<any>) => void;
        /**
          * utils/interfaces/ERefineMode: ALL, SUBSET
         */
        "refineMode"?: ERefineMode;
        /**
          * boolean: Used to control the visibility of the layer picker
         */
        "useLayerPicker"?: boolean;
    }
    interface SolutionConfiguration {
        /**
          * Credentials for requests
         */
        "authentication"?: UserSession;
        /**
          * Contains the current solution item we are working with
         */
        "item"?: ISolutionItem;
        /**
          * Contains the current solution item id
         */
        "itemid"?: string;
        "onSolutionLoaded"?: (event: SolutionConfigurationCustomEvent<any>) => void;
        /**
          * Used to show/hide loading indicator
         */
        "showLoading"?: boolean;
        /**
          * Contains the current solution item data
         */
        "sourceItemData"?: any;
        /**
          * Contains the raw templates from the solution item
         */
        "templates"?: any[];
        /**
          * Used to show/hide the content tree
         */
        "treeOpen"?: boolean;
        /**
          * Contains the public value for this component.
         */
        "value"?: ISolutionConfiguration;
    }
    interface SolutionContents {
        "onSolutionItemSelected"?: (event: SolutionContentsCustomEvent<any>) => void;
        /**
          * Contains the current item that is selected.
         */
        "selectedItem"?: ISolutionItem;
        /**
          * Contains the public value for this component.
         */
        "value"?: IInventoryItem[];
    }
    interface SolutionItem {
        /**
          * Credentials for requests
         */
        "authentication"?: UserSession;
        /**
          * Contains the organization based variables
         */
        "organizationVariables"?: any[];
        /**
          * Contains the solution based variables
         */
        "solutionVariables"?: any[];
        /**
          * Contains the public value for this component.
         */
        "value"?: ISolutionItem;
    }
    interface SolutionItemDetails {
        /**
          * Contains the public type for this component.
         */
        "type"?: string;
        /**
          * Contains the public value for this component.
         */
        "value"?: IItemDetails;
    }
    interface SolutionItemIcon {
        /**
          * Indicate if this is portal
         */
        "isPortal"?: boolean;
        /**
          * The type for the item
         */
        "type"?: string;
        /**
          * The typeKeywords for the item
         */
        "typeKeywords"?: string[];
    }
    interface SolutionItemSharing {
        /**
          * Contains the public id for the group these items will be shared or un-shared with.
         */
        "groupId"?: string;
        /**
          * Contains the public value for this component.
         */
        "value"?: IItemShare[];
    }
    interface SolutionOrganizationVariables {
        "onOrganizationVariableSelected"?: (event: SolutionOrganizationVariablesCustomEvent<any>) => void;
        /**
          * Contains the public value for this component.
         */
        "value"?: IOrganizationVariableItem[];
    }
    interface SolutionResourceItem {
        /**
          * Credentials for requests
         */
        "authentication"?: UserSession;
        /**
          * The templates itemId. This is used to get the correct model from a store in the json-editor
         */
        "itemid"?: string;
        /**
          * The templates resourceFilePaths.
         */
        "resourceFilePaths"?: IResourcePath[];
        /**
          * The templates resources.
         */
        "resources"?: {};
    }
    interface SolutionSpatialRef {
        /**
          * The wkid that will be used as the default when no user selection has been made.
         */
        "defaultWkid"?: number;
        /**
          * When true, all but the main switch are disabled to prevent interaction.
         */
        "locked"?: boolean;
        "onFeatureServiceSpatialReferenceChange"?: (event: SolutionSpatialRefCustomEvent<any>) => void;
        /**
          * List of service names the spatial reference should apply to
         */
        "services"?: string[];
        /**
          * Contains the public value for this component.
         */
        "value"?: string;
    }
    interface SolutionTemplateData {
        /**
          * Credentials for requests
         */
        "authentication"?: UserSession;
        /**
          * This needs to be unique for props vs data of an item
         */
        "instanceid"?: string;
        /**
          * A templates itemId. This is used to get the correct model from a store in the json-editor
         */
        "itemid"?: string;
        /**
          * Contains the organization based variables
         */
        "organizationVariables"?: IOrganizationVariableItem[];
        /**
          * Contains the solution based variables
         */
        "solutionVariables"?: IVariableItem[];
        /**
          * Contains the public value for this component.  When working with a resource item this should contain an IResourceItem  When working with a json type item this should contain the data and vars
         */
        "value"?: ITemplateData;
        /**
          * Used to show/hide the variable containers
         */
        "varsOpen"?: boolean;
    }
    interface SolutionVariables {
        "onSolutionVariableSelected"?: (event: SolutionVariablesCustomEvent<any>) => void;
        /**
          * Contains the public value for this component.
         */
        "value"?: IVariableItem[];
    }
    interface StoreManager {
        /**
          * Credentials for requests
         */
        "authentication"?: UserSession;
        "onStateLoaded"?: (event: StoreManagerCustomEvent<any>) => void;
        /**
          * Templates for the current solution
         */
        "templates"?: any[];
        /**
          * Contains source json as a string
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "buffer-tools": BufferTools;
        "json-editor": JsonEditor;
        "map-draw-tools": MapDrawTools;
        "map-layer-picker": MapLayerPicker;
        "map-search": MapSearch;
        "map-select-tools": MapSelectTools;
        "new-public-notification": NewPublicNotification;
        "pdf-download": PdfDownload;
        "public-notification": PublicNotification;
        "refine-selection-tools": RefineSelectionTools;
        "solution-configuration": SolutionConfiguration;
        "solution-contents": SolutionContents;
        "solution-item": SolutionItem;
        "solution-item-details": SolutionItemDetails;
        "solution-item-icon": SolutionItemIcon;
        "solution-item-sharing": SolutionItemSharing;
        "solution-organization-variables": SolutionOrganizationVariables;
        "solution-resource-item": SolutionResourceItem;
        "solution-spatial-ref": SolutionSpatialRef;
        "solution-template-data": SolutionTemplateData;
        "solution-variables": SolutionVariables;
        "store-manager": StoreManager;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "buffer-tools": LocalJSX.BufferTools & JSXBase.HTMLAttributes<HTMLBufferToolsElement>;
            "json-editor": LocalJSX.JsonEditor & JSXBase.HTMLAttributes<HTMLJsonEditorElement>;
            "map-draw-tools": LocalJSX.MapDrawTools & JSXBase.HTMLAttributes<HTMLMapDrawToolsElement>;
            "map-layer-picker": LocalJSX.MapLayerPicker & JSXBase.HTMLAttributes<HTMLMapLayerPickerElement>;
            "map-search": LocalJSX.MapSearch & JSXBase.HTMLAttributes<HTMLMapSearchElement>;
            "map-select-tools": LocalJSX.MapSelectTools & JSXBase.HTMLAttributes<HTMLMapSelectToolsElement>;
            "new-public-notification": LocalJSX.NewPublicNotification & JSXBase.HTMLAttributes<HTMLNewPublicNotificationElement>;
            "pdf-download": LocalJSX.PdfDownload & JSXBase.HTMLAttributes<HTMLPdfDownloadElement>;
            "public-notification": LocalJSX.PublicNotification & JSXBase.HTMLAttributes<HTMLPublicNotificationElement>;
            "refine-selection-tools": LocalJSX.RefineSelectionTools & JSXBase.HTMLAttributes<HTMLRefineSelectionToolsElement>;
            "solution-configuration": LocalJSX.SolutionConfiguration & JSXBase.HTMLAttributes<HTMLSolutionConfigurationElement>;
            "solution-contents": LocalJSX.SolutionContents & JSXBase.HTMLAttributes<HTMLSolutionContentsElement>;
            "solution-item": LocalJSX.SolutionItem & JSXBase.HTMLAttributes<HTMLSolutionItemElement>;
            "solution-item-details": LocalJSX.SolutionItemDetails & JSXBase.HTMLAttributes<HTMLSolutionItemDetailsElement>;
            "solution-item-icon": LocalJSX.SolutionItemIcon & JSXBase.HTMLAttributes<HTMLSolutionItemIconElement>;
            "solution-item-sharing": LocalJSX.SolutionItemSharing & JSXBase.HTMLAttributes<HTMLSolutionItemSharingElement>;
            "solution-organization-variables": LocalJSX.SolutionOrganizationVariables & JSXBase.HTMLAttributes<HTMLSolutionOrganizationVariablesElement>;
            "solution-resource-item": LocalJSX.SolutionResourceItem & JSXBase.HTMLAttributes<HTMLSolutionResourceItemElement>;
            "solution-spatial-ref": LocalJSX.SolutionSpatialRef & JSXBase.HTMLAttributes<HTMLSolutionSpatialRefElement>;
            "solution-template-data": LocalJSX.SolutionTemplateData & JSXBase.HTMLAttributes<HTMLSolutionTemplateDataElement>;
            "solution-variables": LocalJSX.SolutionVariables & JSXBase.HTMLAttributes<HTMLSolutionVariablesElement>;
            "store-manager": LocalJSX.StoreManager & JSXBase.HTMLAttributes<HTMLStoreManagerElement>;
        }
    }
}
