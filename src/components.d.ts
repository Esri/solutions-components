/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { DistanceUnit, EExpandType, ERefineMode, ESelectionMode, ESketchType, EWorkflowType, IInfoCardValues, IInventoryItem, IMapInfo, IMediaCardValues, ISearchConfiguration, ISearchResult, ISelectionSet, ISolutionSpatialReferenceInfo, ISpatialRefRepresentation, IValueChange, SelectionMode } from "./utils/interfaces";
import { UserSession } from "@esri/solution-common";
export namespace Components {
    interface AddRecordModal {
        /**
          * When true the component is displayed
         */
        "open": boolean;
    }
    interface BufferTools {
        /**
          * string: The appearance of display. Can be a "slider" or "text" inputs for distance/value
         */
        "appearance": "slider" | "text";
        /**
          * number: The distance used for buffer
         */
        "distance": number;
        /**
          * esri/geometry/Geometry: https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html
         */
        "geometries": __esri.Geometry[];
        /**
          * number: The component's maximum selectable value.
         */
        "max": number;
        /**
          * number: The component's minimum selectable value.
         */
        "min": number;
        /**
          * number: Displays tick marks on the number line at a specified interval.
         */
        "sliderTicks": number;
        /**
          * boolean: option to control if buffer results should be unioned
         */
        "unionResults": boolean;
        /**
          * DistanceUnit: "feet"|"meters"|"miles"|"kilometers"
         */
        "unit": DistanceUnit;
    }
    interface CardManager {
    }
    interface CommentCard {
    }
    interface CrowdsourceManager {
    }
    interface CrowdsourceReporter {
    }
    interface DeductCalculator {
    }
    interface EditRecordModal {
        /**
          * When true the component is displayed
         */
        "open": boolean;
    }
    interface InfoCard {
        /**
          * string: the components title
         */
        "cardTitle": string;
        /**
          * IInfoCardValues: key value pairs to show in the components table
         */
        "values": IInfoCardValues;
    }
    interface JsonEditor {
        /**
          * Gets the contents of the editor.
          * @returns Promise resolving with the current contents of the editor
         */
        "getEditorContents": () => Promise<any>;
        /**
          * Contains a public value to indicate if the model has any changes.
         */
        "hasChanges": boolean;
        /**
          * Contains a public value to indicate if the model has any errors that would prevent saving it.
         */
        "hasErrors": boolean;
        /**
          * Contains a unique identifier for when we have multiple instances of the editor. For example when we want to show an item's data as well as an item's properties.
         */
        "instanceid": any;
        /**
          * Frees the editor events and memory; to be called when the web component is no longer needed.  Because the component lifecycle doesn't include an "onDestroy" event (@see https://stenciljs.com/docs/component-lifecycle#disconnectedcallback) and TypeScript/JavaScript does automatic garbage collection without a callback hook until ES2021 (@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry), this cleanup call needs to be called manually.
         */
        "prepareForDeletion": () => Promise<void>;
        /**
          * Replaces the current selection with the supplied text, inserting if nothing is selected.
          * @param replacement Text to use for replacement or insertion
          * @returns Promise resolving when function is done
         */
        "replaceCurrentSelection": (replacement: string) => Promise<any>;
        /**
          * Resets the contents of the editor with the current `value`.
          * @returns Promise resolving when function is done
         */
        "reset": () => Promise<any>;
        /**
          * Contains the public value for this component; it is not changed by the editor. When changed, the change overwrites the contents of the editor.
         */
        "value": any;
    }
    interface LayerTable {
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
    }
    interface ListItem {
    }
    interface MapCard {
        /**
          * IMapInfo[]: array of map infos (name and id)
         */
        "mapInfos": IMapInfo[];
    }
    interface MapDrawTools {
        /**
          * boolean: sketch is used by multiple components...need a way to know who should respond...
         */
        "active": boolean;
        /**
          * boolean: Optionally draw a border around the draw tools
         */
        "border": boolean;
        /**
          * Clears the user drawn graphics
          * @returns Promise that resolves when the operation is complete
         */
        "clear": () => Promise<void>;
        /**
          * esri/Graphic: https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html
         */
        "graphics": __esri.Graphic[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * esri/symbols/SimpleMarkerSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleMarkerSymbol.html
         */
        "pointSymbol": __esri.SimpleMarkerSymbol;
        /**
          * esri/symbols/SimpleFillSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleFillSymbol.html
         */
        "polygonSymbol": __esri.SimpleFillSymbol;
        /**
          * esri/symbols/SimpleLineSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleLineSymbol.html
         */
        "polylineSymbol": __esri.SimpleLineSymbol;
    }
    interface MapLayerPicker {
        /**
          * string[]: Optional list of enabled layer ids  If empty all layers will be available
         */
        "enabledLayerIds": string[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * string[]: list of layer ids that have been selected by the end user
         */
        "selectedLayerIds": string[];
        /**
          * SelectionMode: "single" | "multi"  Should the component support selection against a single layer or multiple layers.
         */
        "selectionMode": SelectionMode;
    }
    interface MapSearch {
        /**
          * Clears the state of the search widget
          * @returns Promise that resolves when the operation is complete
         */
        "clear": () => Promise<void>;
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * ISearchConfiguration: Configuration details for the Search widget
         */
        "searchConfiguration": ISearchConfiguration;
    }
    interface MapSelectTools {
        /**
          * string | number[] |  object with r, g, b, a: https://developers.arcgis.com/javascript/latest/api-reference/esri-Color.html
         */
        "bufferColor": any;
        /**
          * string | number[] | object with r, g, b, a: https://developers.arcgis.com/javascript/latest/api-reference/esri-Color.html
         */
        "bufferOutlineColor": any;
        /**
          * Clear any selection results
          * @returns Promise when the results have been cleared
         */
        "clearSelection": () => Promise<void>;
        /**
          * number: The default value to show for the buffer distance
         */
        "defaultBufferDistance": number;
        /**
          * number: The default value to show for the buffer unit
         */
        "defaultBufferUnit": DistanceUnit;
        /**
          * string[]: Optional list of enabled layer ids  If empty all layers will be available
         */
        "enabledLayerIds": string[];
        /**
          * esri/geometry: https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry.html
         */
        "geometries": __esri.Geometry[];
        /**
          * Get the new selection set
          * @returns Promise with the new selection set
         */
        "getSelection": () => Promise<ISelectionSet>;
        /**
          * boolean: When true a new label is not generated for the stored selection set
         */
        "isUpdate": boolean;
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * ISearchConfiguration: Configuration details for the Search widget
         */
        "searchConfiguration": ISearchConfiguration;
        /**
          * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html
         */
        "selectLayerView": __esri.FeatureLayerView;
        /**
          * utils/interfaces/ISelectionSet: Used to store key details about any selections that have been made.
         */
        "selectionSet": ISelectionSet;
        /**
          * boolean: When true the buffer tools will be available for use
         */
        "showBufferTools": boolean;
    }
    interface MediaCard {
        /**
          * IMediaCardValues[]: Array of objects that contain the name, description, and image to display
         */
        "values": IMediaCardValues[];
    }
    interface PciCalculator {
    }
    interface PdfDownload {
        /**
          * boolean: Controls the enabled/disabled state of download
         */
        "disabled": boolean;
        /**
          * Downloads csv of mailing labels for the provided list of ids
          * @param selectionSetNames Names of the selection sets used to provide ids
          * @param ids List of ids to download
          * @param removeDuplicates When true a single label is generated when multiple featues have a shared address value
          * @param addColumnTitle Indicates if column headings should be included in output
          * @returns Promise resolving when function is done
         */
        "downloadCSV": (selectionSetNames: string[], ids: number[], removeDuplicates: boolean, addColumnTitle?: boolean) => Promise<void>;
        /**
          * Downloads pdf of mailing labels for the provided list of ids
          * @param selectionSetNames Names of the selection sets used to provide ids
          * @param ids List of ids to download
          * @param removeDuplicates When true a single label is generated when multiple featues have a shared address value
          * @returns Promise resolving when function is done
         */
        "downloadPDF": (selectionSetNames: string[], ids: number[], removeDuplicates: boolean) => Promise<void>;
        /**
          * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html
         */
        "layerView": __esri.FeatureLayerView;
    }
    interface PublicNotification {
        /**
          * string[]: List of layer ids that should be shown as potential addressee layers
         */
        "addresseeLayerIds": string[];
        /**
          * string | number[] |  object with r, g, b, a: https://developers.arcgis.com/javascript/latest/api-reference/esri-Color.html
         */
        "bufferColor": any;
        /**
          * string | number[] | object with r, g, b, a: https://developers.arcgis.com/javascript/latest/api-reference/esri-Color.html
         */
        "bufferOutlineColor": any;
        /**
          * boolean: When true the user can define a name for each notification list
         */
        "customLabelEnabled": boolean;
        /**
          * number: The default value to show for the buffer distance
         */
        "defaultBufferDistance": number;
        /**
          * number: The default value to show for the buffer unit ("feet"|"meters"|"miles"|"kilometers")
         */
        "defaultBufferUnit": DistanceUnit;
        /**
          * The effect that will be applied when featureHighlightEnabled is true  esri/layers/support/FeatureEffect: https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html
         */
        "featureEffect": __esri.FeatureEffect;
        /**
          * boolean: When enabled features will be highlighted when their notification list item is clicked.
         */
        "featureHighlightEnabled": boolean;
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * string: The value to show for no results when left empty the default text "0 selected features from {layerTitle}" will be shown
         */
        "noResultText": string;
        /**
          * ISearchConfiguration: Configuration details for the Search widget
         */
        "searchConfiguration": ISearchConfiguration;
        /**
          * string[]: List of layer ids that should be shown as potential selection layers when skectching with "Use layer features" option
         */
        "selectionLayerIds": string[];
        /**
          * boolean: When true the refine selection workflow will be included in the UI
         */
        "showRefineSelection": boolean;
        /**
          * boolean: When false no buffer distance or unit controls will be exposed
         */
        "showSearchSettings": boolean;
    }
    interface RefineSelection {
        "GraphicsLayer": any;
        "SketchViewModel": any;
        /**
          * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html
         */
        "addresseeLayer": __esri.FeatureLayerView;
        /**
          * string[]: Optional list of enabled layer ids  If empty all layers will be available
         */
        "enabledLayerIds": string[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * utils/interfaces/ISelectionSet: An array of user defined selection sets
         */
        "selectionSets": ISelectionSet[];
    }
    interface RefineSelectionTools {
        /**
          * boolean: sketch is used by multiple components...need a way to know who should respond...
         */
        "active": boolean;
        /**
          * boolean: Optionally draw a border around the draw tools
         */
        "border": boolean;
        /**
          * Clear current highlight handle
          * @returns Promise when complete
         */
        "clearHighlight": () => Promise<void>;
        /**
          * string[]: Optional list of enabled layer ids  If empty all layers will be available
         */
        "enabledLayerIds": string[];
        /**
          * esri/Graphic: https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html
         */
        "graphics": __esri.Graphic[];
        /**
          * number: The oids of the selected features
         */
        "ids": number[];
        /**
          * esri/views/layers/LayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-LayerView.html
         */
        "layerView": __esri.FeatureLayerView;
        /**
          * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html
         */
        "layerViews": __esri.FeatureLayerView[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView": __esri.MapView;
        /**
          * utils/interfaces/ESelectionMode: ADD, REMOVE
         */
        "mode": ESelectionMode;
        /**
          * utils/interfaces/ERefineMode: ALL, SUBSET
         */
        "refineMode": ERefineMode;
        /**
          * utils/interfaces/ISelectionSet: Refine selection set
         */
        "refineSelectionSet": ISelectionSet;
        /**
          * Reset the ids collection
          * @returns Promise when complete
         */
        "reset": () => Promise<void>;
        /**
          * boolean: Used to control the visibility of the layer picker
         */
        "useLayerPicker": boolean;
    }
    interface SolutionConfiguration {
        /**
          * Credentials for requests, which can be a serialized UserSession
         */
        "authentication": UserSession;
        "getSpatialReferenceInfo": () => Promise<ISolutionSpatialReferenceInfo>;
        "saveSolution": () => Promise<void>;
        "serializedAuthentication": string;
        /**
          * Used to show/hide loading indicator
         */
        "showLoading": boolean;
        /**
          * Contains the current solution item id
         */
        "solutionItemId": string;
        "unloadSolution": () => Promise<void>;
    }
    interface SolutionContents {
        /**
          * Contains the current item that is selected.
         */
        "selectedItemId": string;
        /**
          * Contains the public value for this component.
         */
        "templateHierarchy": IInventoryItem[];
    }
    interface SolutionItem {
        /**
          * Credentials for requests
         */
        "authentication": UserSession;
        /**
          * A template's itemId.
         */
        "itemId": string;
        /**
          * Contains the organization based variables
         */
        "organizationVariables": string;
        /**
          * Contains the solution based variables
         */
        "solutionVariables": string;
    }
    interface SolutionItemDetails {
        /**
          * A template's itemId.
         */
        "itemId": string;
    }
    interface SolutionItemIcon {
        /**
          * Indicate if this is portal
         */
        "isPortal": boolean;
        /**
          * The type for the item
         */
        "type": string;
        /**
          * The typeKeywords for the item
         */
        "typeKeywords": string[];
    }
    interface SolutionItemSharing {
        "getShareInfo": () => Promise<any>;
        /**
          * A template's groupId.
         */
        "groupId": string;
    }
    interface SolutionOrganizationVariables {
        /**
          * Contains the public value for this component.
         */
        "value": string;
    }
    interface SolutionResourceItem {
        /**
          * Credentials for requests
         */
        "authentication": UserSession;
        /**
          * A template's itemId. This is used to get the correct model from a store in the json-editor
         */
        "itemId": string;
    }
    interface SolutionSpatialRef {
        /**
          * Returns the spatial reference description of the supplied value. (Exposes protected method `_createSpatialRefDisplay` for testing.)
          * @param value WKID or WKT or null for default
          * @returns If component is using a WKID, description using WKID; otherwise, the WKT; defaults to 102100
         */
        "createSpatialRefDisplay": (value: string) => Promise<ISpatialRefRepresentation>;
        /**
          * The wkid that will be used as the default when no user selection has been made.
         */
        "defaultWkid": number;
        /**
          * Returns the current spatial reference description. (Exposes protected variable `spatialRef` for testing.)
         */
        "getSpatialRef": () => Promise<ISpatialRefRepresentation>;
        /**
          * When true, all but the main switch are disabled to prevent interaction.
         */
        "locked": boolean;
        /**
          * List of service names the spatial reference should apply to
         */
        "services": string[];
        /**
          * Contains the public value for this component, which is a wkid or a wkt.
         */
        "value": string;
        /**
          * Converts a WKID into a spatial reference description. (Exposes protected method `_wkidToDisplay` for testing.)
          * @param wkid WKID to look up
          * @returns Description, or "WKID &lt;wkid&gt;" if a description doesn't exist for the WKID
         */
        "wkidToDisplay": (wkid: number) => Promise<string>;
    }
    interface SolutionTemplateData {
        /**
          * This needs to be unique for props vs data of an item
         */
        "instanceid": string;
        /**
          * A template's itemId. This is used to get the correct model from a store in the json-editor
         */
        "itemId": string;
        "organizationVariables": string;
        /**
          * Contains the solution based variables
         */
        "solutionVariables": string;
        /**
          * Used to show/hide the variable containers
         */
        "varsOpen": boolean;
    }
    interface SolutionVariables {
        /**
          * Contains the public value for this component.
         */
        "value": string;
    }
    interface StoreManager {
        /**
          * Credentials for requests
         */
        "authentication": UserSession;
        /**
          * Templates for the current solution
         */
        "templates": any[];
        /**
          * Contains source json as a string
         */
        "value": string;
    }
}
export interface BufferToolsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBufferToolsElement;
}
export interface DeductCalculatorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDeductCalculatorElement;
}
export interface MapCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMapCardElement;
}
export interface MapDrawToolsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMapDrawToolsElement;
}
export interface MapLayerPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMapLayerPickerElement;
}
export interface MapSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMapSearchElement;
}
export interface MapSelectToolsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMapSelectToolsElement;
}
export interface PublicNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPublicNotificationElement;
}
export interface RefineSelectionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRefineSelectionElement;
}
export interface RefineSelectionToolsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRefineSelectionToolsElement;
}
export interface SolutionContentsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSolutionContentsElement;
}
export interface SolutionOrganizationVariablesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSolutionOrganizationVariablesElement;
}
export interface SolutionSpatialRefCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSolutionSpatialRefElement;
}
export interface SolutionVariablesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSolutionVariablesElement;
}
export interface StoreManagerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStoreManagerElement;
}
declare global {
    interface HTMLAddRecordModalElement extends Components.AddRecordModal, HTMLStencilElement {
    }
    var HTMLAddRecordModalElement: {
        prototype: HTMLAddRecordModalElement;
        new (): HTMLAddRecordModalElement;
    };
    interface HTMLBufferToolsElement extends Components.BufferTools, HTMLStencilElement {
    }
    var HTMLBufferToolsElement: {
        prototype: HTMLBufferToolsElement;
        new (): HTMLBufferToolsElement;
    };
    interface HTMLCardManagerElement extends Components.CardManager, HTMLStencilElement {
    }
    var HTMLCardManagerElement: {
        prototype: HTMLCardManagerElement;
        new (): HTMLCardManagerElement;
    };
    interface HTMLCommentCardElement extends Components.CommentCard, HTMLStencilElement {
    }
    var HTMLCommentCardElement: {
        prototype: HTMLCommentCardElement;
        new (): HTMLCommentCardElement;
    };
    interface HTMLCrowdsourceManagerElement extends Components.CrowdsourceManager, HTMLStencilElement {
    }
    var HTMLCrowdsourceManagerElement: {
        prototype: HTMLCrowdsourceManagerElement;
        new (): HTMLCrowdsourceManagerElement;
    };
    interface HTMLCrowdsourceReporterElement extends Components.CrowdsourceReporter, HTMLStencilElement {
    }
    var HTMLCrowdsourceReporterElement: {
        prototype: HTMLCrowdsourceReporterElement;
        new (): HTMLCrowdsourceReporterElement;
    };
    interface HTMLDeductCalculatorElement extends Components.DeductCalculator, HTMLStencilElement {
    }
    var HTMLDeductCalculatorElement: {
        prototype: HTMLDeductCalculatorElement;
        new (): HTMLDeductCalculatorElement;
    };
    interface HTMLEditRecordModalElement extends Components.EditRecordModal, HTMLStencilElement {
    }
    var HTMLEditRecordModalElement: {
        prototype: HTMLEditRecordModalElement;
        new (): HTMLEditRecordModalElement;
    };
    interface HTMLInfoCardElement extends Components.InfoCard, HTMLStencilElement {
    }
    var HTMLInfoCardElement: {
        prototype: HTMLInfoCardElement;
        new (): HTMLInfoCardElement;
    };
    interface HTMLJsonEditorElement extends Components.JsonEditor, HTMLStencilElement {
    }
    var HTMLJsonEditorElement: {
        prototype: HTMLJsonEditorElement;
        new (): HTMLJsonEditorElement;
    };
    interface HTMLLayerTableElement extends Components.LayerTable, HTMLStencilElement {
    }
    var HTMLLayerTableElement: {
        prototype: HTMLLayerTableElement;
        new (): HTMLLayerTableElement;
    };
    interface HTMLListItemElement extends Components.ListItem, HTMLStencilElement {
    }
    var HTMLListItemElement: {
        prototype: HTMLListItemElement;
        new (): HTMLListItemElement;
    };
    interface HTMLMapCardElement extends Components.MapCard, HTMLStencilElement {
    }
    var HTMLMapCardElement: {
        prototype: HTMLMapCardElement;
        new (): HTMLMapCardElement;
    };
    interface HTMLMapDrawToolsElement extends Components.MapDrawTools, HTMLStencilElement {
    }
    var HTMLMapDrawToolsElement: {
        prototype: HTMLMapDrawToolsElement;
        new (): HTMLMapDrawToolsElement;
    };
    interface HTMLMapLayerPickerElement extends Components.MapLayerPicker, HTMLStencilElement {
    }
    var HTMLMapLayerPickerElement: {
        prototype: HTMLMapLayerPickerElement;
        new (): HTMLMapLayerPickerElement;
    };
    interface HTMLMapSearchElement extends Components.MapSearch, HTMLStencilElement {
    }
    var HTMLMapSearchElement: {
        prototype: HTMLMapSearchElement;
        new (): HTMLMapSearchElement;
    };
    interface HTMLMapSelectToolsElement extends Components.MapSelectTools, HTMLStencilElement {
    }
    var HTMLMapSelectToolsElement: {
        prototype: HTMLMapSelectToolsElement;
        new (): HTMLMapSelectToolsElement;
    };
    interface HTMLMediaCardElement extends Components.MediaCard, HTMLStencilElement {
    }
    var HTMLMediaCardElement: {
        prototype: HTMLMediaCardElement;
        new (): HTMLMediaCardElement;
    };
    interface HTMLPciCalculatorElement extends Components.PciCalculator, HTMLStencilElement {
    }
    var HTMLPciCalculatorElement: {
        prototype: HTMLPciCalculatorElement;
        new (): HTMLPciCalculatorElement;
    };
    interface HTMLPdfDownloadElement extends Components.PdfDownload, HTMLStencilElement {
    }
    var HTMLPdfDownloadElement: {
        prototype: HTMLPdfDownloadElement;
        new (): HTMLPdfDownloadElement;
    };
    interface HTMLPublicNotificationElement extends Components.PublicNotification, HTMLStencilElement {
    }
    var HTMLPublicNotificationElement: {
        prototype: HTMLPublicNotificationElement;
        new (): HTMLPublicNotificationElement;
    };
    interface HTMLRefineSelectionElement extends Components.RefineSelection, HTMLStencilElement {
    }
    var HTMLRefineSelectionElement: {
        prototype: HTMLRefineSelectionElement;
        new (): HTMLRefineSelectionElement;
    };
    interface HTMLRefineSelectionToolsElement extends Components.RefineSelectionTools, HTMLStencilElement {
    }
    var HTMLRefineSelectionToolsElement: {
        prototype: HTMLRefineSelectionToolsElement;
        new (): HTMLRefineSelectionToolsElement;
    };
    interface HTMLSolutionConfigurationElement extends Components.SolutionConfiguration, HTMLStencilElement {
    }
    var HTMLSolutionConfigurationElement: {
        prototype: HTMLSolutionConfigurationElement;
        new (): HTMLSolutionConfigurationElement;
    };
    interface HTMLSolutionContentsElement extends Components.SolutionContents, HTMLStencilElement {
    }
    var HTMLSolutionContentsElement: {
        prototype: HTMLSolutionContentsElement;
        new (): HTMLSolutionContentsElement;
    };
    interface HTMLSolutionItemElement extends Components.SolutionItem, HTMLStencilElement {
    }
    var HTMLSolutionItemElement: {
        prototype: HTMLSolutionItemElement;
        new (): HTMLSolutionItemElement;
    };
    interface HTMLSolutionItemDetailsElement extends Components.SolutionItemDetails, HTMLStencilElement {
    }
    var HTMLSolutionItemDetailsElement: {
        prototype: HTMLSolutionItemDetailsElement;
        new (): HTMLSolutionItemDetailsElement;
    };
    interface HTMLSolutionItemIconElement extends Components.SolutionItemIcon, HTMLStencilElement {
    }
    var HTMLSolutionItemIconElement: {
        prototype: HTMLSolutionItemIconElement;
        new (): HTMLSolutionItemIconElement;
    };
    interface HTMLSolutionItemSharingElement extends Components.SolutionItemSharing, HTMLStencilElement {
    }
    var HTMLSolutionItemSharingElement: {
        prototype: HTMLSolutionItemSharingElement;
        new (): HTMLSolutionItemSharingElement;
    };
    interface HTMLSolutionOrganizationVariablesElement extends Components.SolutionOrganizationVariables, HTMLStencilElement {
    }
    var HTMLSolutionOrganizationVariablesElement: {
        prototype: HTMLSolutionOrganizationVariablesElement;
        new (): HTMLSolutionOrganizationVariablesElement;
    };
    interface HTMLSolutionResourceItemElement extends Components.SolutionResourceItem, HTMLStencilElement {
    }
    var HTMLSolutionResourceItemElement: {
        prototype: HTMLSolutionResourceItemElement;
        new (): HTMLSolutionResourceItemElement;
    };
    interface HTMLSolutionSpatialRefElement extends Components.SolutionSpatialRef, HTMLStencilElement {
    }
    var HTMLSolutionSpatialRefElement: {
        prototype: HTMLSolutionSpatialRefElement;
        new (): HTMLSolutionSpatialRefElement;
    };
    interface HTMLSolutionTemplateDataElement extends Components.SolutionTemplateData, HTMLStencilElement {
    }
    var HTMLSolutionTemplateDataElement: {
        prototype: HTMLSolutionTemplateDataElement;
        new (): HTMLSolutionTemplateDataElement;
    };
    interface HTMLSolutionVariablesElement extends Components.SolutionVariables, HTMLStencilElement {
    }
    var HTMLSolutionVariablesElement: {
        prototype: HTMLSolutionVariablesElement;
        new (): HTMLSolutionVariablesElement;
    };
    interface HTMLStoreManagerElement extends Components.StoreManager, HTMLStencilElement {
    }
    var HTMLStoreManagerElement: {
        prototype: HTMLStoreManagerElement;
        new (): HTMLStoreManagerElement;
    };
    interface HTMLElementTagNameMap {
        "add-record-modal": HTMLAddRecordModalElement;
        "buffer-tools": HTMLBufferToolsElement;
        "card-manager": HTMLCardManagerElement;
        "comment-card": HTMLCommentCardElement;
        "crowdsource-manager": HTMLCrowdsourceManagerElement;
        "crowdsource-reporter": HTMLCrowdsourceReporterElement;
        "deduct-calculator": HTMLDeductCalculatorElement;
        "edit-record-modal": HTMLEditRecordModalElement;
        "info-card": HTMLInfoCardElement;
        "json-editor": HTMLJsonEditorElement;
        "layer-table": HTMLLayerTableElement;
        "list-item": HTMLListItemElement;
        "map-card": HTMLMapCardElement;
        "map-draw-tools": HTMLMapDrawToolsElement;
        "map-layer-picker": HTMLMapLayerPickerElement;
        "map-search": HTMLMapSearchElement;
        "map-select-tools": HTMLMapSelectToolsElement;
        "media-card": HTMLMediaCardElement;
        "pci-calculator": HTMLPciCalculatorElement;
        "pdf-download": HTMLPdfDownloadElement;
        "public-notification": HTMLPublicNotificationElement;
        "refine-selection": HTMLRefineSelectionElement;
        "refine-selection-tools": HTMLRefineSelectionToolsElement;
        "solution-configuration": HTMLSolutionConfigurationElement;
        "solution-contents": HTMLSolutionContentsElement;
        "solution-item": HTMLSolutionItemElement;
        "solution-item-details": HTMLSolutionItemDetailsElement;
        "solution-item-icon": HTMLSolutionItemIconElement;
        "solution-item-sharing": HTMLSolutionItemSharingElement;
        "solution-organization-variables": HTMLSolutionOrganizationVariablesElement;
        "solution-resource-item": HTMLSolutionResourceItemElement;
        "solution-spatial-ref": HTMLSolutionSpatialRefElement;
        "solution-template-data": HTMLSolutionTemplateDataElement;
        "solution-variables": HTMLSolutionVariablesElement;
        "store-manager": HTMLStoreManagerElement;
    }
}
declare namespace LocalJSX {
    interface AddRecordModal {
        /**
          * When true the component is displayed
         */
        "open"?: boolean;
    }
    interface BufferTools {
        /**
          * string: The appearance of display. Can be a "slider" or "text" inputs for distance/value
         */
        "appearance"?: "slider" | "text";
        /**
          * number: The distance used for buffer
         */
        "distance"?: number;
        /**
          * esri/geometry/Geometry: https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html
         */
        "geometries"?: __esri.Geometry[];
        /**
          * number: The component's maximum selectable value.
         */
        "max"?: number;
        /**
          * number: The component's minimum selectable value.
         */
        "min"?: number;
        /**
          * Emitted on demand when a buffer is generated.
         */
        "onBufferComplete"?: (event: BufferToolsCustomEvent<__esri.Polygon | __esri.Polygon[]>) => void;
        /**
          * Emitted on demand when the distance value changes
         */
        "onDistanceChanged"?: (event: BufferToolsCustomEvent<IValueChange>) => void;
        /**
          * Emitted on demand when the unit changes
         */
        "onUnitChanged"?: (event: BufferToolsCustomEvent<IValueChange>) => void;
        /**
          * number: Displays tick marks on the number line at a specified interval.
         */
        "sliderTicks"?: number;
        /**
          * boolean: option to control if buffer results should be unioned
         */
        "unionResults"?: boolean;
        /**
          * DistanceUnit: "feet"|"meters"|"miles"|"kilometers"
         */
        "unit"?: DistanceUnit;
    }
    interface CardManager {
    }
    interface CommentCard {
    }
    interface CrowdsourceManager {
    }
    interface CrowdsourceReporter {
    }
    interface DeductCalculator {
        /**
          * Emitted on demand when the user clicks to calculate the deduct value
         */
        "onDeductValueComplete"?: (event: DeductCalculatorCustomEvent<string>) => void;
    }
    interface EditRecordModal {
        /**
          * When true the component is displayed
         */
        "open"?: boolean;
    }
    interface InfoCard {
        /**
          * string: the components title
         */
        "cardTitle"?: string;
        /**
          * IInfoCardValues: key value pairs to show in the components table
         */
        "values"?: IInfoCardValues;
    }
    interface JsonEditor {
        /**
          * Contains a public value to indicate if the model has any changes.
         */
        "hasChanges"?: boolean;
        /**
          * Contains a public value to indicate if the model has any errors that would prevent saving it.
         */
        "hasErrors"?: boolean;
        /**
          * Contains a unique identifier for when we have multiple instances of the editor. For example when we want to show an item's data as well as an item's properties.
         */
        "instanceid"?: any;
        /**
          * Contains the public value for this component; it is not changed by the editor. When changed, the change overwrites the contents of the editor.
         */
        "value"?: any;
    }
    interface LayerTable {
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
    }
    interface ListItem {
    }
    interface MapCard {
        /**
          * IMapInfo[]: array of map infos (name and id)
         */
        "mapInfos"?: IMapInfo[];
        /**
          * Emitted when the expand button is clicked
         */
        "onExpandMap"?: (event: MapCardCustomEvent<EExpandType>) => void;
    }
    interface MapDrawTools {
        /**
          * boolean: sketch is used by multiple components...need a way to know who should respond...
         */
        "active"?: boolean;
        /**
          * boolean: Optionally draw a border around the draw tools
         */
        "border"?: boolean;
        /**
          * esri/Graphic: https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html
         */
        "graphics"?: __esri.Graphic[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        /**
          * Emitted on demand when the sketch graphics change.
         */
        "onSketchGraphicsChange"?: (event: MapDrawToolsCustomEvent<__esri.Graphic[]>) => void;
        /**
          * esri/symbols/SimpleMarkerSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleMarkerSymbol.html
         */
        "pointSymbol"?: __esri.SimpleMarkerSymbol;
        /**
          * esri/symbols/SimpleFillSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleFillSymbol.html
         */
        "polygonSymbol"?: __esri.SimpleFillSymbol;
        /**
          * esri/symbols/SimpleLineSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleLineSymbol.html
         */
        "polylineSymbol"?: __esri.SimpleLineSymbol;
    }
    interface MapLayerPicker {
        /**
          * string[]: Optional list of enabled layer ids  If empty all layers will be available
         */
        "enabledLayerIds"?: string[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        /**
          * Emitted on demand when a layer is selected
         */
        "onLayerSelectionChange"?: (event: MapLayerPickerCustomEvent<string[]>) => void;
        /**
          * string[]: list of layer ids that have been selected by the end user
         */
        "selectedLayerIds"?: string[];
        /**
          * SelectionMode: "single" | "multi"  Should the component support selection against a single layer or multiple layers.
         */
        "selectionMode"?: SelectionMode;
    }
    interface MapSearch {
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        /**
          * Emitted on demand when the status of the search widget changes
         */
        "onSearchChange"?: (event: MapSearchCustomEvent<ISearchResult>) => void;
        /**
          * ISearchConfiguration: Configuration details for the Search widget
         */
        "searchConfiguration"?: ISearchConfiguration;
    }
    interface MapSelectTools {
        /**
          * string | number[] |  object with r, g, b, a: https://developers.arcgis.com/javascript/latest/api-reference/esri-Color.html
         */
        "bufferColor"?: any;
        /**
          * string | number[] | object with r, g, b, a: https://developers.arcgis.com/javascript/latest/api-reference/esri-Color.html
         */
        "bufferOutlineColor"?: any;
        /**
          * number: The default value to show for the buffer distance
         */
        "defaultBufferDistance"?: number;
        /**
          * number: The default value to show for the buffer unit
         */
        "defaultBufferUnit"?: DistanceUnit;
        /**
          * string[]: Optional list of enabled layer ids  If empty all layers will be available
         */
        "enabledLayerIds"?: string[];
        /**
          * esri/geometry: https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry.html
         */
        "geometries"?: __esri.Geometry[];
        /**
          * boolean: When true a new label is not generated for the stored selection set
         */
        "isUpdate"?: boolean;
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        /**
          * Emitted on demand when the selection set changes.
         */
        "onSelectionSetChange"?: (event: MapSelectToolsCustomEvent<number>) => void;
        /**
          * Emitted on demand when the sketch type changes.
         */
        "onSketchTypeChange"?: (event: MapSelectToolsCustomEvent<ESketchType>) => void;
        /**
          * Emitted on demand when the workflow type changes.
         */
        "onWorkflowTypeChange"?: (event: MapSelectToolsCustomEvent<EWorkflowType>) => void;
        /**
          * ISearchConfiguration: Configuration details for the Search widget
         */
        "searchConfiguration"?: ISearchConfiguration;
        /**
          * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html
         */
        "selectLayerView"?: __esri.FeatureLayerView;
        /**
          * utils/interfaces/ISelectionSet: Used to store key details about any selections that have been made.
         */
        "selectionSet"?: ISelectionSet;
        /**
          * boolean: When true the buffer tools will be available for use
         */
        "showBufferTools"?: boolean;
    }
    interface MediaCard {
        /**
          * IMediaCardValues[]: Array of objects that contain the name, description, and image to display
         */
        "values"?: IMediaCardValues[];
    }
    interface PciCalculator {
    }
    interface PdfDownload {
        /**
          * boolean: Controls the enabled/disabled state of download
         */
        "disabled"?: boolean;
        /**
          * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html
         */
        "layerView"?: __esri.FeatureLayerView;
    }
    interface PublicNotification {
        /**
          * string[]: List of layer ids that should be shown as potential addressee layers
         */
        "addresseeLayerIds"?: string[];
        /**
          * string | number[] |  object with r, g, b, a: https://developers.arcgis.com/javascript/latest/api-reference/esri-Color.html
         */
        "bufferColor"?: any;
        /**
          * string | number[] | object with r, g, b, a: https://developers.arcgis.com/javascript/latest/api-reference/esri-Color.html
         */
        "bufferOutlineColor"?: any;
        /**
          * boolean: When true the user can define a name for each notification list
         */
        "customLabelEnabled"?: boolean;
        /**
          * number: The default value to show for the buffer distance
         */
        "defaultBufferDistance"?: number;
        /**
          * number: The default value to show for the buffer unit ("feet"|"meters"|"miles"|"kilometers")
         */
        "defaultBufferUnit"?: DistanceUnit;
        /**
          * The effect that will be applied when featureHighlightEnabled is true  esri/layers/support/FeatureEffect: https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html
         */
        "featureEffect"?: __esri.FeatureEffect;
        /**
          * boolean: When enabled features will be highlighted when their notification list item is clicked.
         */
        "featureHighlightEnabled"?: boolean;
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        /**
          * string: The value to show for no results when left empty the default text "0 selected features from {layerTitle}" will be shown
         */
        "noResultText"?: string;
        /**
          * Emitted on demand when a buffer is generated.
         */
        "onLabelChange"?: (event: PublicNotificationCustomEvent<string>) => void;
        /**
          * ISearchConfiguration: Configuration details for the Search widget
         */
        "searchConfiguration"?: ISearchConfiguration;
        /**
          * string[]: List of layer ids that should be shown as potential selection layers when skectching with "Use layer features" option
         */
        "selectionLayerIds"?: string[];
        /**
          * boolean: When true the refine selection workflow will be included in the UI
         */
        "showRefineSelection"?: boolean;
        /**
          * boolean: When false no buffer distance or unit controls will be exposed
         */
        "showSearchSettings"?: boolean;
    }
    interface RefineSelection {
        "GraphicsLayer"?: any;
        "SketchViewModel"?: any;
        /**
          * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html
         */
        "addresseeLayer"?: __esri.FeatureLayerView;
        /**
          * string[]: Optional list of enabled layer ids  If empty all layers will be available
         */
        "enabledLayerIds"?: string[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        /**
          * Emitted on demand when selection sets change.
         */
        "onSelectionSetsChanged"?: (event: RefineSelectionCustomEvent<ISelectionSet[]>) => void;
        /**
          * utils/interfaces/ISelectionSet: An array of user defined selection sets
         */
        "selectionSets"?: ISelectionSet[];
    }
    interface RefineSelectionTools {
        /**
          * boolean: sketch is used by multiple components...need a way to know who should respond...
         */
        "active"?: boolean;
        /**
          * boolean: Optionally draw a border around the draw tools
         */
        "border"?: boolean;
        /**
          * string[]: Optional list of enabled layer ids  If empty all layers will be available
         */
        "enabledLayerIds"?: string[];
        /**
          * esri/Graphic: https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html
         */
        "graphics"?: __esri.Graphic[];
        /**
          * number: The oids of the selected features
         */
        "ids"?: number[];
        /**
          * esri/views/layers/LayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-LayerView.html
         */
        "layerView"?: __esri.FeatureLayerView;
        /**
          * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html
         */
        "layerViews"?: __esri.FeatureLayerView[];
        /**
          * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html
         */
        "mapView"?: __esri.MapView;
        /**
          * utils/interfaces/ESelectionMode: ADD, REMOVE
         */
        "mode"?: ESelectionMode;
        /**
          * Emitted on demand when selection graphics change.
         */
        "onRefineSelectionGraphicsChange"?: (event: RefineSelectionToolsCustomEvent<any[]>) => void;
        /**
          * Emitted on demand when selection ids change
         */
        "onRefineSelectionIdsChange"?: (event: RefineSelectionToolsCustomEvent<{ addIds: any[]; removeIds: any[]; }>) => void;
        /**
          * utils/interfaces/ERefineMode: ALL, SUBSET
         */
        "refineMode"?: ERefineMode;
        /**
          * utils/interfaces/ISelectionSet: Refine selection set
         */
        "refineSelectionSet"?: ISelectionSet;
        /**
          * boolean: Used to control the visibility of the layer picker
         */
        "useLayerPicker"?: boolean;
    }
    interface SolutionConfiguration {
        /**
          * Credentials for requests, which can be a serialized UserSession
         */
        "authentication"?: UserSession;
        "serializedAuthentication"?: string;
        /**
          * Used to show/hide loading indicator
         */
        "showLoading"?: boolean;
        /**
          * Contains the current solution item id
         */
        "solutionItemId"?: string;
    }
    interface SolutionContents {
        "onSolutionItemSelected"?: (event: SolutionContentsCustomEvent<string>) => void;
        /**
          * Contains the current item that is selected.
         */
        "selectedItemId"?: string;
        /**
          * Contains the public value for this component.
         */
        "templateHierarchy"?: IInventoryItem[];
    }
    interface SolutionItem {
        /**
          * Credentials for requests
         */
        "authentication"?: UserSession;
        /**
          * A template's itemId.
         */
        "itemId"?: string;
        /**
          * Contains the organization based variables
         */
        "organizationVariables"?: string;
        /**
          * Contains the solution based variables
         */
        "solutionVariables"?: string;
    }
    interface SolutionItemDetails {
        /**
          * A template's itemId.
         */
        "itemId"?: string;
    }
    interface SolutionItemIcon {
        /**
          * Indicate if this is portal
         */
        "isPortal"?: boolean;
        /**
          * The type for the item
         */
        "type"?: string;
        /**
          * The typeKeywords for the item
         */
        "typeKeywords"?: string[];
    }
    interface SolutionItemSharing {
        /**
          * A template's groupId.
         */
        "groupId"?: string;
    }
    interface SolutionOrganizationVariables {
        "onOrganizationVariableSelected"?: (event: SolutionOrganizationVariablesCustomEvent<{ itemId: string, value: string }>) => void;
        /**
          * Contains the public value for this component.
         */
        "value"?: string;
    }
    interface SolutionResourceItem {
        /**
          * Credentials for requests
         */
        "authentication"?: UserSession;
        /**
          * A template's itemId. This is used to get the correct model from a store in the json-editor
         */
        "itemId"?: string;
    }
    interface SolutionSpatialRef {
        /**
          * The wkid that will be used as the default when no user selection has been made.
         */
        "defaultWkid"?: number;
        /**
          * When true, all but the main switch are disabled to prevent interaction.
         */
        "locked"?: boolean;
        "onFeatureServiceSpatialReferenceChange"?: (event: SolutionSpatialRefCustomEvent<{ name: string, enabled: boolean }>) => void;
        /**
          * List of service names the spatial reference should apply to
         */
        "services"?: string[];
        /**
          * Contains the public value for this component, which is a wkid or a wkt.
         */
        "value"?: string;
    }
    interface SolutionTemplateData {
        /**
          * This needs to be unique for props vs data of an item
         */
        "instanceid"?: string;
        /**
          * A template's itemId. This is used to get the correct model from a store in the json-editor
         */
        "itemId"?: string;
        "organizationVariables"?: string;
        /**
          * Contains the solution based variables
         */
        "solutionVariables"?: string;
        /**
          * Used to show/hide the variable containers
         */
        "varsOpen"?: boolean;
    }
    interface SolutionVariables {
        "onSolutionVariableSelected"?: (event: SolutionVariablesCustomEvent<{ itemId: string, value: string }>) => void;
        /**
          * Contains the public value for this component.
         */
        "value"?: string;
    }
    interface StoreManager {
        /**
          * Credentials for requests
         */
        "authentication"?: UserSession;
        "onStateLoaded"?: (event: StoreManagerCustomEvent<any>) => void;
        /**
          * Templates for the current solution
         */
        "templates"?: any[];
        /**
          * Contains source json as a string
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "add-record-modal": AddRecordModal;
        "buffer-tools": BufferTools;
        "card-manager": CardManager;
        "comment-card": CommentCard;
        "crowdsource-manager": CrowdsourceManager;
        "crowdsource-reporter": CrowdsourceReporter;
        "deduct-calculator": DeductCalculator;
        "edit-record-modal": EditRecordModal;
        "info-card": InfoCard;
        "json-editor": JsonEditor;
        "layer-table": LayerTable;
        "list-item": ListItem;
        "map-card": MapCard;
        "map-draw-tools": MapDrawTools;
        "map-layer-picker": MapLayerPicker;
        "map-search": MapSearch;
        "map-select-tools": MapSelectTools;
        "media-card": MediaCard;
        "pci-calculator": PciCalculator;
        "pdf-download": PdfDownload;
        "public-notification": PublicNotification;
        "refine-selection": RefineSelection;
        "refine-selection-tools": RefineSelectionTools;
        "solution-configuration": SolutionConfiguration;
        "solution-contents": SolutionContents;
        "solution-item": SolutionItem;
        "solution-item-details": SolutionItemDetails;
        "solution-item-icon": SolutionItemIcon;
        "solution-item-sharing": SolutionItemSharing;
        "solution-organization-variables": SolutionOrganizationVariables;
        "solution-resource-item": SolutionResourceItem;
        "solution-spatial-ref": SolutionSpatialRef;
        "solution-template-data": SolutionTemplateData;
        "solution-variables": SolutionVariables;
        "store-manager": StoreManager;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "add-record-modal": LocalJSX.AddRecordModal & JSXBase.HTMLAttributes<HTMLAddRecordModalElement>;
            "buffer-tools": LocalJSX.BufferTools & JSXBase.HTMLAttributes<HTMLBufferToolsElement>;
            "card-manager": LocalJSX.CardManager & JSXBase.HTMLAttributes<HTMLCardManagerElement>;
            "comment-card": LocalJSX.CommentCard & JSXBase.HTMLAttributes<HTMLCommentCardElement>;
            "crowdsource-manager": LocalJSX.CrowdsourceManager & JSXBase.HTMLAttributes<HTMLCrowdsourceManagerElement>;
            "crowdsource-reporter": LocalJSX.CrowdsourceReporter & JSXBase.HTMLAttributes<HTMLCrowdsourceReporterElement>;
            "deduct-calculator": LocalJSX.DeductCalculator & JSXBase.HTMLAttributes<HTMLDeductCalculatorElement>;
            "edit-record-modal": LocalJSX.EditRecordModal & JSXBase.HTMLAttributes<HTMLEditRecordModalElement>;
            "info-card": LocalJSX.InfoCard & JSXBase.HTMLAttributes<HTMLInfoCardElement>;
            "json-editor": LocalJSX.JsonEditor & JSXBase.HTMLAttributes<HTMLJsonEditorElement>;
            "layer-table": LocalJSX.LayerTable & JSXBase.HTMLAttributes<HTMLLayerTableElement>;
            "list-item": LocalJSX.ListItem & JSXBase.HTMLAttributes<HTMLListItemElement>;
            "map-card": LocalJSX.MapCard & JSXBase.HTMLAttributes<HTMLMapCardElement>;
            "map-draw-tools": LocalJSX.MapDrawTools & JSXBase.HTMLAttributes<HTMLMapDrawToolsElement>;
            "map-layer-picker": LocalJSX.MapLayerPicker & JSXBase.HTMLAttributes<HTMLMapLayerPickerElement>;
            "map-search": LocalJSX.MapSearch & JSXBase.HTMLAttributes<HTMLMapSearchElement>;
            "map-select-tools": LocalJSX.MapSelectTools & JSXBase.HTMLAttributes<HTMLMapSelectToolsElement>;
            "media-card": LocalJSX.MediaCard & JSXBase.HTMLAttributes<HTMLMediaCardElement>;
            "pci-calculator": LocalJSX.PciCalculator & JSXBase.HTMLAttributes<HTMLPciCalculatorElement>;
            "pdf-download": LocalJSX.PdfDownload & JSXBase.HTMLAttributes<HTMLPdfDownloadElement>;
            "public-notification": LocalJSX.PublicNotification & JSXBase.HTMLAttributes<HTMLPublicNotificationElement>;
            "refine-selection": LocalJSX.RefineSelection & JSXBase.HTMLAttributes<HTMLRefineSelectionElement>;
            "refine-selection-tools": LocalJSX.RefineSelectionTools & JSXBase.HTMLAttributes<HTMLRefineSelectionToolsElement>;
            "solution-configuration": LocalJSX.SolutionConfiguration & JSXBase.HTMLAttributes<HTMLSolutionConfigurationElement>;
            "solution-contents": LocalJSX.SolutionContents & JSXBase.HTMLAttributes<HTMLSolutionContentsElement>;
            "solution-item": LocalJSX.SolutionItem & JSXBase.HTMLAttributes<HTMLSolutionItemElement>;
            "solution-item-details": LocalJSX.SolutionItemDetails & JSXBase.HTMLAttributes<HTMLSolutionItemDetailsElement>;
            "solution-item-icon": LocalJSX.SolutionItemIcon & JSXBase.HTMLAttributes<HTMLSolutionItemIconElement>;
            "solution-item-sharing": LocalJSX.SolutionItemSharing & JSXBase.HTMLAttributes<HTMLSolutionItemSharingElement>;
            "solution-organization-variables": LocalJSX.SolutionOrganizationVariables & JSXBase.HTMLAttributes<HTMLSolutionOrganizationVariablesElement>;
            "solution-resource-item": LocalJSX.SolutionResourceItem & JSXBase.HTMLAttributes<HTMLSolutionResourceItemElement>;
            "solution-spatial-ref": LocalJSX.SolutionSpatialRef & JSXBase.HTMLAttributes<HTMLSolutionSpatialRefElement>;
            "solution-template-data": LocalJSX.SolutionTemplateData & JSXBase.HTMLAttributes<HTMLSolutionTemplateDataElement>;
            "solution-variables": LocalJSX.SolutionVariables & JSXBase.HTMLAttributes<HTMLSolutionVariablesElement>;
            "store-manager": LocalJSX.StoreManager & JSXBase.HTMLAttributes<HTMLStoreManagerElement>;
        }
    }
}
