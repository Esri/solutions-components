{"file":"calcite-color-picker-hex-input.entry.esm.js","mappings":"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","names":["Color","color"],"sources":["./node_modules/@esri/calcite-components/dist/collection/components/color-picker-hex-input/resources.js","./node_modules/@esri/calcite-components/dist/collection/components/color-picker-hex-input/color-picker-hex-input.css?tag=calcite-color-picker-hex-input&encapsulation=shadow","./node_modules/@esri/calcite-components/dist/collection/components/color-picker-hex-input/color-picker-hex-input.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.0.0-beta.97\n */\nexport const CSS = {\n  container: \"container\",\n  preview: \"preview\",\n  input: \"input\"\n};\n","/* mixins & extensions */\n@keyframes in {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n@keyframes in-down {\n  0% {\n    opacity: 0;\n    transform: translate3D(0, -5px, 0);\n  }\n  100% {\n    opacity: 1;\n    transform: translate3D(0, 0, 0);\n  }\n}\n@keyframes in-up {\n  0% {\n    opacity: 0;\n    transform: translate3D(0, 5px, 0);\n  }\n  100% {\n    opacity: 1;\n    transform: translate3D(0, 0, 0);\n  }\n}\n@keyframes in-scale {\n  0% {\n    opacity: 0;\n    transform: scale3D(0.95, 0.95, 1);\n  }\n  100% {\n    opacity: 1;\n    transform: scale3D(1, 1, 1);\n  }\n}\n:root {\n  --calcite-animation-timing: calc(150ms * var(--calcite-internal-duration-factor));\n  --calcite-internal-duration-factor: var(--calcite-duration-factor, 1);\n  --calcite-internal-animation-timing-fast: calc(100ms * var(--calcite-internal-duration-factor));\n  --calcite-internal-animation-timing-medium: calc(200ms * var(--calcite-internal-duration-factor));\n  --calcite-internal-animation-timing-slow: calc(300ms * var(--calcite-internal-duration-factor));\n}\n\n.calcite-animate {\n  opacity: 0;\n  animation-fill-mode: both;\n  animation-duration: var(--calcite-animation-timing);\n}\n\n.calcite-animate__in {\n  animation-name: in;\n}\n\n.calcite-animate__in-down {\n  animation-name: in-down;\n}\n\n.calcite-animate__in-up {\n  animation-name: in-up;\n}\n\n.calcite-animate__in-scale {\n  animation-name: in-scale;\n}\n\n@media (prefers-reduced-motion: reduce) {\n  :root {\n    --calcite-internal-duration-factor: 0.01;\n  }\n}\n/**\n* Currently only used in Checkbox.\n*/\n:root {\n  --calcite-floating-ui-transition: var(--calcite-animation-timing);\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n:host {\n  display: block;\n}\n\n.container {\n  display: inline-grid;\n  inline-size: 100%;\n  align-items: center;\n  grid-template-columns: 1fr auto;\n}\n\n.preview {\n  grid-column: 2/3;\n  pointer-events: none;\n  margin-block: 0px;\n  margin-inline: 0.25rem;\n  display: flex;\n  align-items: center;\n}\n\n.preview,\n.input {\n  grid-row: 1;\n}\n\n.input {\n  grid-column: 1/3;\n  inline-size: 100%;\n  text-transform: uppercase;\n}","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.0.0-beta.97\n */\nimport { h } from \"@stencil/core\";\nimport { hexChar, isLonghandHex, isValidHex, normalizeHex, rgbToHex } from \"../color-picker/utils\";\nimport Color from \"color\";\nimport { CSS } from \"./resources\";\nimport { focusElement } from \"../../utils/dom\";\nimport { TEXT } from \"../color-picker/resources\";\nconst DEFAULT_COLOR = Color();\nexport class ColorPickerHexInput {\n  constructor() {\n    //--------------------------------------------------------------------------\n    //\n    //  Public Properties\n    //\n    //--------------------------------------------------------------------------\n    /**\n     * When `false`, an empty color (`null`) will be allowed as a `value`. Otherwise, a color value is enforced on the component.\n     *\n     * When `true`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`. When `false`, an empty color (`null`) will be allowed as a `value`.\n     */\n    this.allowEmpty = false;\n    /**\n     * Accessible name for the Hex input.\n     *\n     * @default \"Hex\"\n     */\n    this.intlHex = TEXT.hex;\n    /**\n     * Accessible name for the Hex input when there is no color selected.\n     *\n     * @default \"No color\"\n     */\n    this.intlNoColor = TEXT.noColor;\n    /** Specifies the size of the component. */\n    this.scale = \"m\";\n    /**\n     * The Hex value.\n     */\n    this.value = normalizeHex(DEFAULT_COLOR.hex());\n    this.onCalciteInternalInputBlur = () => {\n      const node = this.inputNode;\n      const inputValue = node.value;\n      const hex = `#${inputValue}`;\n      const willClearValue = this.allowEmpty && !inputValue;\n      if (willClearValue || (isValidHex(hex) && isLonghandHex(hex))) {\n        return;\n      }\n      // manipulating DOM directly since rerender doesn't update input value\n      node.value =\n        this.allowEmpty && !this.internalColor\n          ? \"\"\n          : this.formatForInternalInput(rgbToHex(this.internalColor.object()));\n    };\n    this.onInputChange = () => {\n      this.internalSetValue(this.inputNode.value, this.value);\n    };\n    /**\n     * The last valid/selected color. Used as a fallback if an invalid hex code is entered.\n     */\n    this.internalColor = DEFAULT_COLOR;\n    this.previousNonNullValue = this.value;\n    this.storeInputRef = (node) => {\n      this.inputNode = node;\n    };\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n  connectedCallback() {\n    const { allowEmpty, value } = this;\n    if (value) {\n      const normalized = normalizeHex(value);\n      if (isValidHex(normalized)) {\n        this.internalSetValue(normalized, normalized, false);\n      }\n      return;\n    }\n    if (allowEmpty) {\n      this.internalSetValue(null, null, false);\n    }\n  }\n  handleValueChange(value, oldValue) {\n    this.internalSetValue(value, oldValue, false);\n  }\n  // using @Listen as a workaround for VDOM listener not firing\n  onInputKeyDown(event) {\n    const { altKey, ctrlKey, metaKey, shiftKey } = event;\n    const { internalColor, value } = this;\n    const { key } = event;\n    if (key === \"Tab\" || key === \"Enter\") {\n      this.onInputChange();\n      return;\n    }\n    const isNudgeKey = key === \"ArrowDown\" || key === \"ArrowUp\";\n    const oldValue = this.value;\n    if (isNudgeKey) {\n      if (!value) {\n        this.internalSetValue(this.previousNonNullValue, oldValue);\n        event.preventDefault();\n        return;\n      }\n      const direction = key === \"ArrowUp\" ? 1 : -1;\n      const bump = shiftKey ? 10 : 1;\n      this.internalSetValue(normalizeHex(this.nudgeRGBChannels(internalColor, bump * direction).hex()), oldValue);\n      event.preventDefault();\n      return;\n    }\n    const withModifiers = altKey || ctrlKey || metaKey;\n    const singleChar = key.length === 1;\n    const validHexChar = hexChar.test(key);\n    if (singleChar && !withModifiers && !validHexChar) {\n      event.preventDefault();\n    }\n  }\n  onPaste(event) {\n    const hex = event.clipboardData.getData(\"text\");\n    if (isValidHex(hex)) {\n      event.preventDefault();\n      this.inputNode.value = hex.slice(1);\n    }\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n  render() {\n    const { intlHex, value } = this;\n    const hexInputValue = this.formatForInternalInput(value);\n    return (h(\"div\", { class: CSS.container }, h(\"calcite-input\", { class: CSS.input, label: intlHex, maxLength: 6, numberingSystem: this.numberingSystem, onCalciteInputChange: this.onInputChange, onCalciteInternalInputBlur: this.onCalciteInternalInputBlur, onKeyDown: this.handleKeyDown, onPaste: this.onPaste, prefixText: \"#\", ref: this.storeInputRef, scale: this.scale, value: hexInputValue }), hexInputValue ? (h(\"calcite-color-picker-swatch\", { active: true, class: CSS.preview, color: `#${hexInputValue}`, scale: this.scale })) : null));\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n  /** Sets focus on the component. */\n  async setFocus() {\n    focusElement(this.inputNode);\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n  internalSetValue(value, oldValue, emit = true) {\n    if (value) {\n      const normalized = normalizeHex(value);\n      if (isValidHex(normalized)) {\n        const { internalColor } = this;\n        const changed = !internalColor || normalized !== normalizeHex(internalColor.hex());\n        this.internalColor = Color(normalized);\n        this.previousNonNullValue = normalized;\n        this.value = normalized;\n        if (changed && emit) {\n          this.calciteColorPickerHexInputChange.emit();\n        }\n        return;\n      }\n    }\n    else if (this.allowEmpty) {\n      this.internalColor = null;\n      this.value = null;\n      if (emit) {\n        this.calciteColorPickerHexInputChange.emit();\n      }\n      return;\n    }\n    this.value = oldValue;\n  }\n  formatForInternalInput(hex) {\n    return hex ? hex.replace(\"#\", \"\") : \"\";\n  }\n  nudgeRGBChannels(color, amount) {\n    return Color.rgb(color.array().map((channel) => channel + amount));\n  }\n  handleKeyDown(event) {\n    if (event.key === \"Enter\") {\n      event.preventDefault();\n    }\n  }\n  static get is() { return \"calcite-color-picker-hex-input\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"$\": [\"color-picker-hex-input.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"$\": [\"color-picker-hex-input.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"allowEmpty\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"When `false`, an empty color (`null`) will be allowed as a `value`. Otherwise, a color value is enforced on the component.\\n\\nWhen `true`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`. When `false`, an empty color (`null`) will be allowed as a `value`.\"\n        },\n        \"attribute\": \"allow-empty\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"intlHex\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"default\",\n              \"text\": \"\\\"Hex\\\"\"\n            }],\n          \"text\": \"Accessible name for the Hex input.\"\n        },\n        \"attribute\": \"intl-hex\",\n        \"reflect\": false,\n        \"defaultValue\": \"TEXT.hex\"\n      },\n      \"intlNoColor\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"default\",\n              \"text\": \"\\\"No color\\\"\"\n            }],\n          \"text\": \"Accessible name for the Hex input when there is no color selected.\"\n        },\n        \"attribute\": \"intl-no-color\",\n        \"reflect\": false,\n        \"defaultValue\": \"TEXT.noColor\"\n      },\n      \"scale\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"Scale\",\n          \"resolved\": \"\\\"l\\\" | \\\"m\\\" | \\\"s\\\"\",\n          \"references\": {\n            \"Scale\": {\n              \"location\": \"import\",\n              \"path\": \"../interfaces\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Specifies the size of the component.\"\n        },\n        \"attribute\": \"scale\",\n        \"reflect\": true,\n        \"defaultValue\": \"\\\"m\\\"\"\n      },\n      \"value\": {\n        \"type\": \"string\",\n        \"mutable\": true,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The Hex value.\"\n        },\n        \"attribute\": \"value\",\n        \"reflect\": true,\n        \"defaultValue\": \"normalizeHex(DEFAULT_COLOR.hex())\"\n      },\n      \"numberingSystem\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"NumberingSystem\",\n          \"resolved\": \"\\\"arab\\\" | \\\"arabext\\\" | \\\"bali\\\" | \\\"beng\\\" | \\\"deva\\\" | \\\"fullwide\\\" | \\\"gujr\\\" | \\\"guru\\\" | \\\"hanidec\\\" | \\\"khmr\\\" | \\\"knda\\\" | \\\"laoo\\\" | \\\"latn\\\" | \\\"limb\\\" | \\\"mlym\\\" | \\\"mong\\\" | \\\"mymr\\\" | \\\"orya\\\" | \\\"tamldec\\\" | \\\"telu\\\" | \\\"thai\\\" | \\\"tibt\\\"\",\n          \"references\": {\n            \"NumberingSystem\": {\n              \"location\": \"import\",\n              \"path\": \"../../utils/locale\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Specifies the Unicode numeral system used by the component for localization.\"\n        },\n        \"attribute\": \"numbering-system\",\n        \"reflect\": false\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"internalColor\": {}\n    };\n  }\n  static get events() {\n    return [{\n        \"method\": \"calciteColorPickerHexInputChange\",\n        \"name\": \"calciteColorPickerHexInputChange\",\n        \"bubbles\": true,\n        \"cancelable\": false,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted when the hex value changes.\"\n        },\n        \"complexType\": {\n          \"original\": \"void\",\n          \"resolved\": \"void\",\n          \"references\": {}\n        }\n      }];\n  }\n  static get methods() {\n    return {\n      \"setFocus\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Sets focus on the component.\",\n          \"tags\": []\n        }\n      }\n    };\n  }\n  static get elementRef() { return \"el\"; }\n  static get watchers() {\n    return [{\n        \"propName\": \"value\",\n        \"methodName\": \"handleValueChange\"\n      }];\n  }\n  static get listeners() {\n    return [{\n        \"name\": \"keydown\",\n        \"method\": \"onInputKeyDown\",\n        \"target\": undefined,\n        \"capture\": true,\n        \"passive\": false\n      }];\n  }\n}\n"],"version":3}