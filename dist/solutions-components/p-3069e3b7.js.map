{"file":"p-3069e3b7.js","mappings":";;;;;AAAA;;;;;;;;;;;;;;;AAgBA;;;;;SAKgB,SAAS,CACvB,MAAkB;;;EAIlB,MAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,IAAI,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC;EAEpG,gBAAgB,CAAC,WAAW,EAAE,UAAU,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;AACnE,CAAC;AAED;;;;;;;;AAQA,SAAS,gBAAgB,CACvB,WAAqB,EACrB,SAAiB;EAEjB,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;EACzC,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,EAAE;IAC/B,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,eAAe,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,yBAAyB,EAAE,CAAC,CAAC,CAAC;IAC5F,IAAI,CAAC,QAAQ,GAAG,GAAG,SAAS,MAAM,IAAI,YAAY,CAAC;IACnD,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC;IACjC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAChC,IAAI,CAAC,KAAK,EAAE,CAAC;IACb,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;GACjC;AACH;;;;","names":[],"sources":["./src/utils/csvUtils.ts"],"sourcesContent":["/** @license\r\n * Copyright 2022 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * Export a csv of the attributes from the features that match the provided ids\r\n *\r\n * @param labels Labels to write\r\n */\r\nexport function exportCSV(\r\n  labels: string[][],\r\n): void {\r\n  // Format values to string so it doesn't get tripped up when a value has a comma\r\n  // another option could be to export with a different delimiter\r\n  const outputLines = labels.map(label => Object.values(label).map(v => `\"${v}\"`).join(\",\") + \"\\r\\n\");\r\n\r\n  _downloadCSVFile(outputLines, `notify-${Date.now().toString()}`);\r\n}\r\n\r\n/**\r\n * Download the CSV file\r\n *\r\n * @param outputLines Lines of output to write to file\r\n * @param fileTitle Title (without file extension) to use for file; defaults to \"export\"\r\n *\r\n * @see {@link https://medium.com/@danny.pule/export-json-to-csv-file-using-javascript-a0b7bc5b00d2}\r\n */\r\nfunction _downloadCSVFile(\r\n  outputLines: string[],\r\n  fileTitle: string\r\n): void {\r\n  const link = document.createElement(\"a\");\r\n  if (link.download !== undefined) {\r\n    link.href = URL.createObjectURL(new Blob(outputLines, { type: \"text/csv;charset=utf-8;\" }));\r\n    link.download = `${fileTitle}.csv` || \"export.csv\";\r\n    link.style.visibility = \"hidden\";\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  }\r\n}\r\n"],"version":3}