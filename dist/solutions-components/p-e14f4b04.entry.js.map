{"file":"config-pdf-download.entry.esm.js","mappings":";;;;;;;;;;AAAA,MAAM,oBAAoB,GAAG,yNAAyN;;MC0BzO,iBAAiB;;;0BAkBc,IAAI;0BAWV,EAAE;;;;;;;;;;;;;;;;;;EA0CtC,MAAM,aAAa;IACjB,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,aAAa,EAAE,CAAC;IACzE,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,aAAa,EAAE,CAAC;IACnE,uCACK,aAAa,GACb,UAAU,EACb;GACH;;;;;;;;;;;;;;;;EAmBD,MAAM,iBAAiB;IACrB,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC9B,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;GAChC;;;;EAKD,MAAM;IACJ,QACE,EAAC,IAAI,QACH,eACE,WAAK,KAAK,EAAC,qBAAqB,IAC9B,qBAAe,KAAK,EAAC,eAAe,IACjC,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAC3B,CACZ,EACN,WAAK,KAAK,EAAC,4CAA4C,IACrD,kBACE,cAAc,EAAE,IAAI,CAAC,cAAc,EACnC,GAAG,EAAE,CAAC,EAAE,OAAO,IAAI,CAAC,uBAAuB,GAAG,EAAE,CAAC,EAAE,EACnD,MAAM,EAAE,IAAI,CAAC,cAAc,GAC3B,CACE,EACN,WAAK,KAAK,EAAC,qBAAqB,IAC9B,qBAAe,KAAK,EAAC,eAAe,IACjC,IAAI,CAAC,aAAa,CAAC,UAAU,CAChB,CACZ,EACN,WAAK,KAAK,EAAC,4CAA4C,IACrD,kBACE,cAAc,EAAE,IAAI,CAAC,cAAc,EACnC,GAAG,EAAE,CAAC,EAAE,OAAO,IAAI,CAAC,oBAAoB,GAAG,EAAE,CAAC,EAAE,EAChD,MAAM,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,GAC3C,CACE,CACF,CACD,EACP;GACH;;;;;;;;;;;EAaD,MAAM,iBAAiB;IACrB,MAAM,CAAC,GAAQ,QAAQ,CAAC;IACxB,MAAM,aAAa,GAAG,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;MAC/C,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,cAAc,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC;MAC/D,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,cAAc,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC;MAC/D,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAA;KACtC,CAAC,CAAC;IACH,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;MACvC,OAAO,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;KAClC,CAAC,CAAC;GACJ;;;;;;;;;EAUS,iBAAiB,CACzB,SAAc;IAEd,MAAM,IAAI,GAAG,SAAS,CAAC,cAAc,CAAC,oBAAoB,CAAC;IAC3D,MAAM,KAAK,GAAG,GAAG,SAAS,CAAC,cAAc,CAAC,iBAAiB,MAAM,SAAS,CAAC,cAAc,CAAC,kBAAkB,EAAE,CAAC;IAC/G,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;GAC3F;;;;;;;EAQS,MAAM,gBAAgB;IAC9B,MAAM,QAAQ,GAAG,MAAM,yBAAyB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC1D,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,CAAC,CAAiC,CAAC;GAClE;;;;;;;","names":[],"sources":["./src/components/config-pdf-download/config-pdf-download.css?tag=config-pdf-download&encapsulation=shadow","./src/components/config-pdf-download/config-pdf-download.tsx"],"sourcesContent":[":host {\r\n  display: block;\r\n}\r\n\r\n.label-spacing {\r\n  --calcite-label-margin-bottom: 0;\r\n}\r\n\r\n.padding-block-end-1 {\r\n  padding-block-end: 1rem;\r\n}\r\n\r\n.padding-inline-start-1 {\r\n  padding-inline-start: 1rem;\r\n}\r\n","/** @license\r\n * Copyright 2022 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { Component, Element, Host, h, Method, Prop, State } from '@stencil/core';\r\nimport ConfigPdfDownload_T9n from \"../../assets/t9n/config-pdf-download/resources.json\";\r\nimport { getLocaleComponentStrings } from \"../../utils/locale\";\r\nimport * as pdfUtils from \"../../assets/data/labelFormats.json\";\r\n\r\n@Component({\r\n  tag: 'config-pdf-download',\r\n  styleUrl: 'config-pdf-download.css',\r\n  shadow: true,\r\n})\r\nexport class ConfigPdfDownload {\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Host element access\r\n  //\r\n  //--------------------------------------------------------------------------\r\n  @Element() el: HTMLConfigPdfDownloadElement;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * boolean: All checkboxes checked state will be set with this value on first render.\r\n   * Default is true\r\n   */\r\n  @Prop({ reflect: true }) defaultChecked = true;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  State (internal)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * string[]: list of layer names from the map\r\n   */\r\n  @State() _formatOptions: string[] = [];\r\n\r\n  /**\r\n   * Contains the translations for this component.\r\n   * All UI strings should be defined here.\r\n   */\r\n  @State() _translations: typeof ConfigPdfDownload_T9n;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * HTMLCheckListElement: The format options check list element\r\n   */\r\n  protected _formatOptionsCheckList: HTMLCheckListElement;\r\n\r\n  /**\r\n   * HTMLCheckListElement: The CSV options check list element\r\n   */\r\n  protected _csvOptionsCheckList: HTMLCheckListElement;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Watch handlers\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Methods (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Returns a key/value pair that represents the checkbox value and checked state\r\n   *\r\n   * @returns Promise with the state of the checkboxes\r\n   */\r\n  @Method()\r\n  async getConfigInfo(): Promise<{ [key: string]: boolean }> {\r\n    const formatOptions = await this._formatOptionsCheckList.getConfigInfo();\r\n    const csvOptions = await this._csvOptionsCheckList.getConfigInfo();\r\n    return {\r\n      ...formatOptions,\r\n      ...csvOptions\r\n    };\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Events (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Functions (lifecycle)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * StencilJS: Called once just after the component is first connected to the DOM.\r\n   *\r\n   * @returns Promise when complete\r\n   */\r\n  async componentWillLoad(): Promise<void> {\r\n    await this._getTranslations();\r\n    await this._setFormatOptions();\r\n  }\r\n\r\n  /**\r\n   * Renders the component.\r\n   */\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <div>\r\n          <div class=\"padding-block-end-1\">\r\n            <calcite-label class=\"label-spacing\">\r\n              {this._translations.availableLabelFormats}\r\n            </calcite-label>\r\n          </div>\r\n          <div class=\"padding-block-end-1 padding-inline-start-1\">\r\n            <check-list\r\n              defaultChecked={this.defaultChecked}\r\n              ref={(el) => { this._formatOptionsCheckList = el; }}\r\n              values={this._formatOptions}\r\n            />\r\n          </div>\r\n          <div class=\"padding-block-end-1\">\r\n            <calcite-label class=\"label-spacing\">\r\n              {this._translations.csvOptions}\r\n            </calcite-label>\r\n          </div>\r\n          <div class=\"padding-block-end-1 padding-inline-start-1\">\r\n            <check-list\r\n              defaultChecked={this.defaultChecked}\r\n              ref={(el) => { this._csvOptionsCheckList = el; }}\r\n              values={[this._translations.csvColumnTitle]}\r\n            />\r\n          </div>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Functions (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Fetch the names of the layers from the map\r\n   *\r\n   * @returns Promise when the operation has completed\r\n   */\r\n  async _setFormatOptions(): Promise<void> {\r\n    const s: any = pdfUtils;\r\n    const sortedPdfIndo = (s.default || s).sort((a, b) => {\r\n      const _a = parseInt(a.descriptionPDF.labelsPerPageDisplay, 10);\r\n      const _b = parseInt(b.descriptionPDF.labelsPerPageDisplay, 10);\r\n      return _a < _b ? -1 : _a > _b ? 1 : 0\r\n    });\r\n    this._formatOptions = sortedPdfIndo.map(l => {\r\n      return this._getLabelSizeText(l);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets the formatted pdf export size text\r\n   *\r\n   * @param labelInfo current user selected label info\r\n   *\r\n   * @returns the pdf label as a string\r\n   * @protected\r\n   */\r\n  protected _getLabelSizeText(\r\n    labelInfo: any\r\n  ): string {\r\n    const lNum = labelInfo.descriptionPDF.labelsPerPageDisplay;\r\n    const lSize = `${labelInfo.descriptionPDF.labelWidthDisplay} x ${labelInfo.descriptionPDF.labelHeightDisplay}`;\r\n    return this._translations.pdfLabel.replace(\"{{n}}\", lNum).replace(\"{{labelSize}}\", lSize);\r\n  }\r\n\r\n  /**\r\n   * Fetches the component's translations\r\n   *\r\n   * @returns Promise when complete\r\n   * @protected\r\n   */\r\n  protected async _getTranslations(): Promise<void> {\r\n    const messages = await getLocaleComponentStrings(this.el);\r\n    this._translations = messages[0] as typeof ConfigPdfDownload_T9n;\r\n  }\r\n}\r\n"],"version":3}