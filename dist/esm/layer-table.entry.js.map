{"file":"layer-table.entry.js","mappings":"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","names":[],"sources":["./src/components/layer-table/layer-table.css?tag=layer-table&encapsulation=shadow","./src/components/layer-table/layer-table.tsx"],"sourcesContent":["/** @license\r\n * Copyright 2022 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n:host {\r\n  display: block;\r\n}\r\n\r\n.table {\r\n  display: table;\r\n  width: 100%;\r\n}\r\n\r\n.header {\r\n  display: table-header-group;\r\n  background-color: #757575;\r\n  font-weight: 500;\r\n  font-size: var(--calcite-font-size-0);\r\n  color: var(--calcite-ui-text-inverse);\r\n  position: -webkit-sticky;\r\n  position: sticky;\r\n  top: 0;\r\n  z-index: 1;\r\n}\r\n\r\n.table-header-cell {\r\n  display: table-cell;\r\n  text-align: justify;\r\n  border-right: 1px solid var(--calcite-ui-border-2);\r\n  padding: 0.5rem;\r\n}\r\n\r\n.table-body {\r\n  display: table-row-group;\r\n}\r\n\r\n.row {\r\n  display: table-row;\r\n}\r\n\r\n.table-cell {\r\n  display: table-cell;\r\n  padding: 0.5rem;\r\n}\r\n\r\n.display-table-header {\r\n  display: table-header-group;\r\n}\r\n\r\n.display-flex {\r\n  display: flex;\r\n}\r\n\r\n.table-border {\r\n  border: 1px solid var(--calcite-ui-border-2);\r\n}\r\n\r\n.justify-center {\r\n  justify-content: center;\r\n}\r\n\r\n.table-container {\r\n  width: 100%;\r\n}\r\n\r\n.overflow-auto {\r\n  overflow: auto;\r\n}\r\n\r\n.data-container {\r\n  overflow: auto;\r\n  height: calc(100% - 35px);\r\n}\r\n\r\n.row:nth-child(odd) {\r\n  background: var(--calcite-ui-foreground-3);\r\n}\r\n\r\n.padding-3-4 {\r\n  padding: 0.75rem;\r\n}\r\n\r\n.field-width {\r\n  white-space: nowrap;\r\n  min-width: 300px;\r\n  max-width: 300px;\r\n  overflow: hidden;\r\n}\r\n","/** @license\r\n * Copyright 2022 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { Component, Element, Host, h, Prop, State, VNode } from '@stencil/core';\r\nimport LayerTable_T9n from \"../../assets/t9n/layer-table/resources.json\";\r\nimport { getLocaleComponentStrings } from \"../../utils/locale\";\r\nimport { getMapLayerView, goToSelection } from \"../../utils/mapViewUtils\";\r\nimport { queryAllFeatures } from \"../../utils/queryUtils\";\r\nimport { queryFeaturesByID } from \"../../utils/queryUtils\";\r\nimport { exportCSV } from \"../../utils/csvUtils\";\r\n\r\n// TODO look for options to better handle very large number of records\r\n//  has a hard time especially with select all when we have many rows\r\n// TODO test with data that contains domains\r\n\r\n@Component({\r\n  tag: 'layer-table',\r\n  styleUrl: 'layer-table.css',\r\n  shadow: true,\r\n})\r\nexport class LayerTable {\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Host element access\r\n  //\r\n  //--------------------------------------------------------------------------\r\n  @Element() el: HTMLCrowdsourceManagerElement;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html\r\n   */\r\n  @Prop() mapView: __esri.MapView;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  State (internal)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Contains the translations for this component.\r\n   * All UI strings should be defined here.\r\n   */\r\n  @State() _translations: typeof LayerTable_T9n;\r\n\r\n  /**\r\n   * A list of indexes that are currently selected\r\n   */\r\n  @State() _selectedIndexes: number[] = [];\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * HTMLEditRecordModalElement: Modal used to edit multiple records\r\n   */\r\n  protected _editMultipleMpdal: HTMLEditRecordModalElement;\r\n\r\n  /**\r\n   * esri/Graphic[]: https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html\r\n   */\r\n  protected _graphics: __esri.Graphic[] = [];\r\n\r\n  /**\r\n   * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html\r\n   */\r\n  protected _layerView: __esri.FeatureLayerView;\r\n\r\n  /**\r\n   * string[]: List of field names to display\r\n   */\r\n  protected _fieldNames: string[] = [];\r\n\r\n  /**\r\n   * HTMLCalciteCheckboxElement: Element to force selection of all records\r\n   */\r\n  protected _selectAllElement: HTMLCalciteCheckboxElement;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Watch handlers\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Methods (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Events (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Functions (lifecycle)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * StencilJS: Called once just after the component is first connected to the DOM.\r\n   *\r\n   * @returns Promise when complete\r\n   */\r\n  async componentWillLoad(): Promise<void> {\r\n    await this._getTranslations();\r\n  }\r\n\r\n  /**\r\n   * Renders the component.\r\n   */\r\n  render() {\r\n    return (\r\n      <Host>\r\n        {this._getTableControlRow()}\r\n        <div class=\"data-container\">\r\n          <div class=\"table-container\">\r\n            <div class=\"table\">\r\n              {this._getTableHeader()}\r\n              {this._getTableRows()}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <edit-record-modal\r\n          ref={(el) => this._editMultipleMpdal = el}\r\n        />\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Functions (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Gets a row of controls that can be used for various interactions with the table\r\n   *\r\n   * @returns The dom node that contains the controls\r\n   */\r\n  protected _getTableControlRow(): VNode {\r\n    const featuresSelected = this._selectedIndexes.length > 0;\r\n    const multiFeaturesSelected = this._selectedIndexes.length > 1;\r\n    return (\r\n      <div class=\"display-flex table-border\">\r\n        <map-layer-picker\r\n          mapView={this.mapView}\r\n          onLayerSelectionChange={(evt) => this._layerSelectionChanged(evt)}\r\n        />\r\n        <div>\r\n          <calcite-button\r\n            appearance='transparent'\r\n            color='neutral'\r\n            disabled={!featuresSelected}\r\n            iconStart='magnifying-glass'\r\n            onClick={() => this._zoom()}\r\n          >\r\n            {this._translations.zoom}\r\n          </calcite-button>\r\n          <calcite-button\r\n            appearance='transparent'\r\n            color='neutral'\r\n            disabled={!multiFeaturesSelected}\r\n            iconStart='pencil'\r\n            onClick={() => this._editMultiple()}\r\n          >\r\n            {this._translations.editMultiple}\r\n          </calcite-button>\r\n          <calcite-button\r\n            appearance='transparent'\r\n            color='neutral'\r\n            disabled={!featuresSelected}\r\n            iconStart='trash'\r\n            onClick={() => this._delete()}\r\n          >\r\n            {this._translations.delete}\r\n          </calcite-button>\r\n          <calcite-split-button\r\n            appearance=\"transparent\"\r\n            color=\"neutral\"\r\n            primary-text={this._translations.more}\r\n          >\r\n            <calcite-dropdown-group selection-mode=\"none\">\r\n              <calcite-dropdown-item\r\n                iconStart='list-check-all'\r\n                onClick={() => this._selectAll(true)}\r\n              >\r\n                {this._translations.selectAll}\r\n              </calcite-dropdown-item>\r\n              <calcite-dropdown-item\r\n                iconStart='selected-items-filter'\r\n                onClick={() => this._showSelected()}\r\n              >\r\n                {this._translations.showSelected}\r\n              </calcite-dropdown-item>\r\n              <calcite-dropdown-item\r\n                iconStart='erase'\r\n                onClick={() => this._clearSelection()}\r\n              >\r\n                {this._translations.clearSelection}\r\n              </calcite-dropdown-item>\r\n              <calcite-dropdown-item\r\n                iconStart='refresh'\r\n                onClick={() => this._switchSelected()}\r\n              >\r\n                {this._translations.switchSelected}\r\n              </calcite-dropdown-item>\r\n              <calcite-dropdown-item\r\n                iconStart='export'\r\n                onClick={() => this._exportToCSV()}\r\n              >\r\n                {this._translations.exportCSV}\r\n              </calcite-dropdown-item>\r\n            </calcite-dropdown-group>\r\n          </calcite-split-button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets the table header with a select all control and column headers for each field\r\n   *\r\n   * @returns The dom node that contains the header\r\n   */\r\n  protected _getTableHeader(): VNode {\r\n    return (\r\n      <div class=\"header\">\r\n        <div class=\"table-header-cell padding-3-4\">\r\n          <calcite-checkbox\r\n            class=\"display-flex justify-center\"\r\n            onClick={() => this._selectAll(this._selectAllElement.checked)}\r\n            ref={(el) => this._selectAllElement = el}\r\n          />\r\n        </div>\r\n        {this._fieldNames.map(name => this._getTableHeaderCell(name))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets a header cell for the table header\r\n   *\r\n   * @param name the string to display in the cell\r\n   *\r\n   * @returns The dom node that contains the header cell\r\n   */\r\n  protected _getTableHeaderCell(\r\n    name: string\r\n  ): VNode {\r\n    return (\r\n      <div class=\"table-header-cell field-width\">\r\n        {name}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets the table rows for all features\r\n   *\r\n   * @returns The dom node that contains the body of the table\r\n   */\r\n  protected _getTableRows(): VNode[] {\r\n    return (\r\n      <div class=\"table-body\">\r\n        {this._graphics.map((g, i) => this._getTableRow(g, i))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets the individual table row for a feature\r\n   *\r\n   * @param g the graphic the row is based on\r\n   * @param index the index location of the row within the table\r\n   *\r\n   * @returns The dom node that contains the row\r\n   */\r\n  protected _getTableRow(\r\n    g: __esri.Graphic,\r\n    index: number\r\n  ): VNode {\r\n    // TODO think through this more...should build the fieldType info once up front rather\r\n    // than on every single value...\r\n    const checked = this._selectedIndexes.indexOf(index) > -1;\r\n    return (\r\n      <div class=\"row\">\r\n        <div class=\"table-cell table-border padding-3-4\">\r\n          <calcite-checkbox\r\n            checked={checked}\r\n            class=\"display-flex justify-center\"\r\n            onClick={() => this._rowSelected(index)}\r\n            value={index}\r\n          />\r\n        </div>\r\n        {\r\n          this._fieldNames.map(name => {\r\n            const field = this._layerView.layer.fieldsIndex.get(name);\r\n            return this._getTableRowCell(g.attributes[name], field, checked);\r\n          })\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets the individual table cell for the provided field\r\n   *\r\n   * @param v the value to display\r\n   * @param field the field the row is based on\r\n   * @param rowSelected when true editable fields will render a control that will allow the value to be updated\r\n   *\r\n   * @returns The dom node that contains the table cell\r\n   */\r\n  protected _getTableRowCell(\r\n    v: string,\r\n    field: __esri.Field,\r\n    rowSelected: boolean\r\n  ): VNode {\r\n    const editable = field.editable && rowSelected;\r\n    const inputType = this._getInputType(field.type);\r\n    // TODO find some domain data to test with..this has not been tested\r\n    let domainInput;\r\n    const domain = field.domain;\r\n    if (domain) {\r\n      if (domain.type === \"coded-value\") {\r\n        domainInput = (\r\n          <calcite-select label=''>\r\n            {domain.codedValues.map(cv => {\r\n              return (<calcite-option label={cv.name} selected={v === cv.code.toString()} value={cv.code} />);\r\n            })}\r\n          </calcite-select>\r\n        )\r\n      } else {\r\n        // range domain\r\n        const range = domain as __esri.RangeDomain;\r\n        domainInput = (<calcite-input max={range.maxValue} min={range.minValue} type=\"number\" value={v} />);\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div class=\"table-cell table-border field-width\">\r\n        {editable && domainInput ? domainInput : editable ? (<calcite-input type={inputType} value={v} />) : v}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Simple lookup that will get the appropriate edit control for the value type\r\n   *\r\n   * @param type the Esri field type\r\n   *\r\n   * @returns A string for the type of control to create based on the provided field type\r\n   */\r\n  protected _getInputType(\r\n    type: string\r\n  ): \"number\" | \"datetime-local\" | \"text\" {\r\n    // JS API field types\r\n    // \"string\" | \"small-integer\" | \"integer\" | \"single\" | \"double\" | \"long\" | \"date\" | \"oid\" | \"geometry\" | \"blob\" | \"raster\" | \"guid\" | \"global-id\" | \"xml\"\r\n    // not sure about these: \"geometry\" | \"blob\" | \"raster\" |  | \"xml\"\r\n\r\n    // Calcite input types\r\n    // color date datetime-local email file image month number password search tel text(default) textarea time url week\r\n    const inputTypes = {\r\n      \"string\": 'text',\r\n      \"small-integer\": \"number\",\r\n      \"integer\": \"number\",\r\n      \"single\": \"number\",\r\n      \"double\": \"number\",\r\n      \"long\": \"number\",\r\n      \"date\": \"datetime-local\",\r\n      \"oid\": \"number\",\r\n      \"guid\": \"text\",\r\n      \"global-id\": \"text\"\r\n    };\r\n\r\n    return Object.keys(inputTypes).indexOf(type) > -1 ? inputTypes[type] : \"text\";\r\n  }\r\n\r\n  /**\r\n   * Select or deselect all rows\r\n   *\r\n   * @param checked When true all rows will be selected\r\n   *\r\n   * @returns void\r\n   */\r\n  protected _selectAll(\r\n    checked: boolean\r\n  ): void {\r\n    this._selectedIndexes = checked ? this._graphics.map((_g, i) => i) : [];\r\n  }\r\n\r\n  // need to discuss with team\r\n  protected _showSelected(): void {\r\n    console.log(\"_showSelected\");\r\n  }\r\n\r\n  /**\r\n   * Clears the selected indexes\r\n   *\r\n   * @returns void\r\n   */\r\n  protected _clearSelection(): void {\r\n    this._selectedIndexes = [];\r\n  }\r\n\r\n  /**\r\n   * Select all rows that are not currently selectd\r\n   *\r\n   * @returns void\r\n   */\r\n  protected _switchSelected(): void {\r\n    const currentIndexes = [...this._selectedIndexes];\r\n    this._selectedIndexes = this._graphics.reduce((prev, _cur, i) => {\r\n      if (currentIndexes.indexOf(i) < 0) {\r\n        prev.push(i);\r\n      }\r\n      return prev;\r\n    }, []);\r\n  }\r\n\r\n  /**\r\n   * Export all selected rows as CSV\r\n   *\r\n   * @returns a promise that will resolve when the operation is complete\r\n   */\r\n  protected async _exportToCSV(): Promise<void> {\r\n    // Get the attributes of the features to export\r\n    const ids = this._getSelectedIds();\r\n    const featureSet = await queryFeaturesByID(ids, this._layerView.layer);\r\n    const attributes: string[][] = featureSet.features.map(f => f.attributes);\r\n\r\n    // Get the column headings from the first record and add to front of list of attributes\r\n    const columnNames = [];\r\n    const entry = attributes[0];\r\n    Object.keys(entry).forEach(k => {\r\n      if (entry.hasOwnProperty(k)) {\r\n        columnNames.push(k);\r\n      }\r\n    });\r\n    attributes.unshift(columnNames);\r\n\r\n    return exportCSV(attributes);\r\n  }\r\n\r\n  /**\r\n   * Zoom to all selected features\r\n   *\r\n   * @returns a promise that will resolve when the operation is complete\r\n   */\r\n  protected _zoom(): void {\r\n    const ids = this._getSelectedIds();\r\n    void goToSelection(ids, this._layerView, this.mapView, true);\r\n  }\r\n\r\n  /**\r\n   * Open the edit multiple modal\r\n   *\r\n   * @returns void\r\n   */\r\n  protected _editMultiple(): void {\r\n    this._editMultipleMpdal.open = true;\r\n  }\r\n\r\n  /**\r\n   * Delete all selected records\r\n   *\r\n   * @returns a promise that will resolve when the operation is complete\r\n   */\r\n  protected _delete(): void {\r\n    console.log(\"delete\")\r\n  }\r\n\r\n  /**\r\n   * Get the graphics for all selected indexes\r\n   *\r\n   * @param indexes the indexes for the graphics to fetch\r\n   *\r\n   * @returns An array of selected graphics\r\n   */\r\n  protected _getGraphics(\r\n    indexes: number[]\r\n  ): __esri.Graphic[] {\r\n    return this._graphics.filter((_g, i) => indexes.indexOf(i) > -1);\r\n  }\r\n\r\n  /**\r\n   * Gets the object ids for all selected rows\r\n   *\r\n   * @returns An array of object ids\r\n   */\r\n  protected _getSelectedIds(): number[] {\r\n    const graphics = this._getGraphics(this._selectedIndexes);\r\n    return graphics.map(g => g.getObjectId());\r\n  }\r\n\r\n  /**\r\n   * Update the selected indexes based on the current row\r\n   *\r\n   * @param index the index of the selected row\r\n   *\r\n   * @returns void\r\n   */\r\n  protected _rowSelected(\r\n    index: number\r\n  ): void {\r\n    const indexOfSelected = this._selectedIndexes.indexOf(index);\r\n    if (indexOfSelected > -1) {\r\n      this._selectedIndexes.splice(indexOfSelected, 1);\r\n      this._selectedIndexes = [...this._selectedIndexes];\r\n    } else {\r\n      this._selectedIndexes = [...this._selectedIndexes, index];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles layer selection change to show new table\r\n   *\r\n   * @returns a promise that will resolve when the operation is complete\r\n   */\r\n  protected async _layerSelectionChanged(\r\n    evt: CustomEvent\r\n  ): Promise<void> {\r\n    const layerName: string = evt.detail[0];\r\n    this._layerView = await getMapLayerView(this.mapView, layerName);\r\n    // TODO rethink this...when we use later we need to be able to lookup with name\r\n    this._fieldNames = this._layerView.layer.fields.map(f => f.alias || f.name);\r\n    this._graphics = await queryAllFeatures(0, this._layerView.layer, []);\r\n    this._selectedIndexes = [];\r\n  }\r\n\r\n  /**\r\n   * Fetches the component's translations\r\n   *\r\n   * @returns Promise when complete\r\n   * @protected\r\n   */\r\n  protected async _getTranslations(): Promise<void> {\r\n    const messages = await getLocaleComponentStrings(this.el);\r\n    this._translations = messages[0] as typeof LayerTable_T9n;\r\n  }\r\n\r\n}\r\n"],"version":3}