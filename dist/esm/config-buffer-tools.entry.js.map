{"file":"config-buffer-tools.entry.js","mappings":";;;;;;;;;AAAA,MAAM,oBAAoB,GAAG,8WAA8W;;MCyB9X,iBAAiB;;;oBAiBuB,GAAG;gBAMP,QAAQ;8BAWzB,IAAI;;;;;;;;;;;;;;;;;;EAqClC,MAAM,aAAa;IACjB,OAAO;MACL,UAAU,EAAE,IAAI,CAAC,QAAQ;MACzB,MAAM,EAAE,IAAI,CAAC,IAAI;KAClB,CAAC;GACH;;;;;;;;;;;;;;;;EAmBD,MAAM,iBAAiB;IACrB,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;GAC/B;;;;EAKD,MAAM;IACJ,QACE,EAAC,IAAI,QACH,eACE,qBAAe,MAAM,EAAC,QAAQ,IAC5B,wBACE,OAAO,EAAE,IAAI,CAAC,kBAAkB,EAChC,uBAAuB,EAAE,MAAM,IAAI,CAAC,qBAAqB,EAAE,EAC3D,GAAG,EAAE,CAAC,EAAE,OAAO,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAA,EAAE,GAC7C,EACD,IAAI,CAAC,aAAa,CAAC,kBAAkB,CACxB,CACZ,EACN,WAAK,KAAK,EAAC,wBAAwB,IACjC,WAAK,KAAK,EAAC,gCAAgC,IACzC,qBAAe,KAAK,EAAC,eAAe,IACjC,IAAI,CAAC,aAAa,CAAC,qBAAqB,EACzC,qBACE,QAAQ,EAAE,CAAC,IAAI,CAAC,kBAAkB,EAClC,GAAG,EAAE,CAAC,wBACa,UAAU,EAC7B,mBAAmB,EAAE,CAAC,GAAG,OAAO,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,EAAE,EAC7D,IAAI,EAAC,QAAQ,EACb,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAC/B,CACY,CACZ,EACN,WAAK,KAAK,EAAC,YAAY,IACrB,qBAAe,KAAK,EAAC,eAAe,IACjC,IAAI,CAAC,aAAa,CAAC,WAAW,EAC/B,sBACE,QAAQ,EAAE,CAAC,IAAI,CAAC,kBAAkB,EAClC,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,WAAW,EACrC,qBAAqB,EAAE,CAAC,GAAG,OAAO,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,EAAE,IAElE,IAAI,CAAC,kBAAkB,EAAE,CACX,CACH,CACZ,CACF,CACD,EACP;GACH;;;;;;;;;;;EAaS,gBAAgB,CACxB,GAAgB;IAEhB,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;GAClC;;;;;;EAOS,oBAAoB,CAC5B,GAAgB;IAEhB,IAAI,CAAC,IAAI,GAAI,GAAG,CAAC,MAAmC,CAAC,KAAK,CAAC;GAC5D;;;;;;;EAQS,kBAAkB;IAC1B,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,IAAI,EAAE,CAAC;IAChD,MAAM,KAAK,GAAa,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IACpE,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI;MACnB,QAAQ,sBAAgB,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,KAAK,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,GAAI,EAAE;KACrF,CAAC,CAAC;GACJ;;;;;;EAOS,qBAAqB;IAC7B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC;GAC3D;;;;;;;EAQS,MAAM,gBAAgB;IAC9B,MAAM,QAAQ,GAAG,MAAM,yBAAyB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC1D,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,CAAC,CAAiC,CAAC;GAClE;;;;;;;","names":[],"sources":["./src/components/config-buffer-tools/config-buffer-tools.css?tag=config-buffer-tools&encapsulation=shadow","./src/components/config-buffer-tools/config-buffer-tools.tsx"],"sourcesContent":[":host {\r\n  display: block;\r\n}\r\n\r\n.horizontal-display {\r\n  display: flex;\r\n}\r\n\r\n.label-spacing {\r\n  --calcite-label-margin-bottom: 0;\r\n}\r\n\r\n.padding-inline-end-1 {\r\n  padding-inline-end: 1rem;\r\n}\r\n\r\n.padding-inline-start-1 {\r\n  padding-inline-start: 1rem;\r\n}\r\n\r\n.padding-block-end-1 {\r\n  padding-block-end: 1rem;\r\n}\r\n\r\n.width-half {\r\n  width: 50%;\r\n}\r\n\r\n.width-full {\r\n  width: 100%;\r\n}\r\n","/** @license\r\n * Copyright 2022 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { Component, Element, Host, h, Method, Prop, State, VNode } from '@stencil/core';\r\nimport ConfigBufferTools_T9n from \"../../assets/t9n/config-buffer-tools/resources.json\";\r\nimport { getLocaleComponentStrings } from \"../../utils/locale\";\r\n\r\n@Component({\r\n  tag: 'config-buffer-tools',\r\n  styleUrl: 'config-buffer-tools.css',\r\n  shadow: true,\r\n})\r\nexport class ConfigBufferTools {\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Host element access\r\n  //\r\n  //--------------------------------------------------------------------------\r\n  @Element() el: HTMLConfigBufferToolsElement;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * number: Default distance value.\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) distance = 100;\r\n\r\n  /**\r\n   * string: Default unit value.\r\n   * Should be a unit listed in assets/t9n/config-buffer-tools/resources\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) unit = \"Meters\";\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  State (internal)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * When checked the buffer tools will be show in the config\r\n   */\r\n  @State() _showBufferChecked = true;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * When checked the buffer tools will be avalible at runtime.\r\n   */\r\n  protected _showBufferElement: HTMLCalciteCheckboxElement;\r\n\r\n  /**\r\n   * Contains the translations for this component.\r\n   * All UI strings should be defined here.\r\n   */\r\n  @State() _translations: typeof ConfigBufferTools_T9n;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Watch handlers\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Methods (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Returns a key/value pair that represents the checkbox value and checked state\r\n   *\r\n   * @returns Promise with the state of the checkboxes\r\n   */\r\n  @Method()\r\n  async getConfigInfo(): Promise<{ [key: string]: number | string }> {\r\n    return {\r\n      \"distance\": this.distance,\r\n      \"unit\": this.unit\r\n    };\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Events (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Functions (lifecycle)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * StencilJS: Called once just after the component is first connected to the DOM.\r\n   *\r\n   * @returns Promise when complete\r\n   */\r\n  async componentWillLoad(): Promise<void> {\r\n    await this._getTranslations();\r\n  }\r\n\r\n  /**\r\n   * Renders the component.\r\n   */\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <div>\r\n          <calcite-label layout=\"inline\">\r\n            <calcite-checkbox\r\n              checked={this._showBufferChecked}\r\n              onCalciteCheckboxChange={() => this._setShowBufferChecked()}\r\n              ref={(el) => { this._showBufferElement = el }}\r\n            />\r\n            {this._translations.showSearchDistance}\r\n          </calcite-label>\r\n        </div>\r\n        <div class=\"padding-inline-start-1\">\r\n          <div class=\"padding-block-end-1 width-full\">\r\n            <calcite-label class=\"label-spacing\">\r\n              {this._translations.defaultBufferDistance}\r\n              <calcite-input\r\n                disabled={!this._showBufferChecked}\r\n                min={0}\r\n                number-button-type=\"vertical\"\r\n                onCalciteInputInput={(evt) => { this._distanceChanged(evt); }}\r\n                type=\"number\"\r\n                value={this.distance.toString()}\r\n              />\r\n            </calcite-label>\r\n          </div>\r\n          <div class=\"width-full\">\r\n            <calcite-label class=\"label-spacing\">\r\n              {this._translations.defaultUnit}\r\n              <calcite-select\r\n                disabled={!this._showBufferChecked}\r\n                label={this._translations.defaultUnit}\r\n                onCalciteSelectChange={(evt) => { this._unitSelectionChange(evt); }}\r\n              >\r\n                {this._renderUnitOptions()}\r\n              </calcite-select>\r\n            </calcite-label>\r\n          </div>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Functions (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Store the user defined distance\r\n   *\r\n   * @protected\r\n   */\r\n  protected _distanceChanged(\r\n    evt: CustomEvent\r\n  ): void {\r\n    this.distance = evt.detail.value;\r\n  }\r\n\r\n  /**\r\n   * Store the user defined unit\r\n   *\r\n   * @protected\r\n   */\r\n  protected _unitSelectionChange(\r\n    evt: CustomEvent\r\n  ): void {\r\n    this.unit = (evt.target as HTMLCalciteSelectElement).value;\r\n  }\r\n\r\n  /**\r\n   * Render the various unit options\r\n   *\r\n   * @returns Promise when complete\r\n   * @protected\r\n   */\r\n  protected _renderUnitOptions(): VNode[] {\r\n    const nlsUnits = this._translations.units || {};\r\n    const units: string[] = Object.keys(nlsUnits).map(k => nlsUnits[k]);\r\n    return units.map(unit => {\r\n      return (<calcite-option label={unit} selected={unit === this.unit} value={unit} />);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * When not checked the buffer options will be disabled in the config and not visible in the UI at runtime\r\n   *\r\n   * @protected\r\n   */\r\n  protected _setShowBufferChecked(): void {\r\n    this._showBufferChecked = this._showBufferElement.checked;\r\n  }\r\n\r\n  /**\r\n   * Fetches the component's translations\r\n   *\r\n   * @returns Promise when complete\r\n   * @protected\r\n   */\r\n  protected async _getTranslations(): Promise<void> {\r\n    const messages = await getLocaleComponentStrings(this.el);\r\n    this._translations = messages[0] as typeof ConfigBufferTools_T9n;\r\n  }\r\n}\r\n"],"version":3}