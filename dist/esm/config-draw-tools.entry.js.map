{"file":"config-draw-tools.entry.js","mappings":";;;;;;;;;AAAA,MAAM,kBAAkB,GAAG,yNAAyN;;MCyBvO,eAAe;;;0BAkBgB,IAAI;;;;;;;;;;;;;;;;;;EA2C9C,MAAM,aAAa;IACjB,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC;GACxC;;;;;;;;;;;;;;;;EAmBD,MAAM,iBAAiB;IACrB,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;GAC/B;;;;EAKD,MAAM;IACJ,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,IAAI,EAAE,CAAC;IAChD,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1D,QACE,EAAC,IAAI,QACH,eACE,WAAK,KAAK,EAAC,qBAAqB,IAC9B,qBAAe,KAAK,EAAC,eAAe,IACjC,IAAI,CAAC,aAAa,CAAC,SAAS,CACf,CACZ,EACN,WAAK,KAAK,EAAC,wBAAwB,IACjC,kBACE,cAAc,EAAE,IAAI,CAAC,cAAc,EACnC,GAAG,EAAE,CAAC,EAAE,OAAO,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC,EAAE,EACtC,MAAM,EAAE,KAAK,GACb,CACE,CACF,CACD,EACP;GACH;;;;;;;;;;;;EAcS,MAAM,gBAAgB;IAC9B,MAAM,QAAQ,GAAG,MAAM,yBAAyB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC1D,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,CAAC,CAA+B,CAAC;GAChE;;;;;;;","names":[],"sources":["./src/components/config-draw-tools/config-draw-tools.css?tag=config-draw-tools&encapsulation=shadow","./src/components/config-draw-tools/config-draw-tools.tsx"],"sourcesContent":[":host {\r\n  display: block;\r\n}\r\n\r\n.label-spacing {\r\n  --calcite-label-margin-bottom: 0;\r\n}\r\n\r\n.padding-block-end-1 {\r\n  padding-block-end: 1rem;\r\n}\r\n\r\n.padding-inline-start-1 {\r\n  padding-inline-start: 1rem;\r\n}\r\n","/** @license\r\n * Copyright 2022 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { Component, Element, Host, h, Method, Prop, State } from '@stencil/core';\r\nimport ConfigDrawTools_T9n from \"../../assets/t9n/config-draw-tools/resources.json\";\r\nimport { getLocaleComponentStrings } from \"../../utils/locale\";\r\n\r\n@Component({\r\n  tag: 'config-draw-tools',\r\n  styleUrl: 'config-draw-tools.css',\r\n  shadow: true,\r\n})\r\nexport class ConfigDrawTools {\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Host element access\r\n  //\r\n  //--------------------------------------------------------------------------\r\n  @Element() el: HTMLConfigDrawToolsElement;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * boolean: All checkboxes checked state will be set with this value on first render.\r\n   * Default is true\r\n   */\r\n  @Prop({ reflect: true }) defaultChecked = true;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  State (internal)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Contains the translations for this component.\r\n   * All UI strings should be defined here.\r\n   */\r\n  @State() _translations: typeof ConfigDrawTools_T9n;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * HTMLCheckListElement: The check list element\r\n   */\r\n  protected _checkList: HTMLCheckListElement;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Watch handlers\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Methods (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Returns a key/value pair that represents the checkbox value and checked state\r\n   *\r\n   * @returns Promise with the state of the checkboxes\r\n   */\r\n  @Method()\r\n  async getConfigInfo(): Promise<{ [key: string]: boolean }> {\r\n    return this._checkList.getConfigInfo();\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Events (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Functions (lifecycle)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * StencilJS: Called once just after the component is first connected to the DOM.\r\n   *\r\n   * @returns Promise when complete\r\n   */\r\n  async componentWillLoad(): Promise<void> {\r\n    await this._getTranslations();\r\n  }\r\n\r\n  /**\r\n   * Renders the component.\r\n   */\r\n  render() {\r\n    const nlsTypes = this._translations.types || {};\r\n    const types = Object.keys(nlsTypes).map(k => nlsTypes[k]);\r\n    return (\r\n      <Host>\r\n        <div>\r\n          <div class=\"padding-block-end-1\">\r\n            <calcite-label class=\"label-spacing\">\r\n              {this._translations.drawTools}\r\n            </calcite-label>\r\n          </div>\r\n          <div class=\"padding-inline-start-1\">\r\n            <check-list\r\n              defaultChecked={this.defaultChecked}\r\n              ref={(el) => { this._checkList = el; }}\r\n              values={types}\r\n            />\r\n          </div>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Functions (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Fetches the component's translations\r\n   *\r\n   * @returns Promise when complete\r\n   * @protected\r\n   */\r\n  protected async _getTranslations(): Promise<void> {\r\n    const messages = await getLocaleComponentStrings(this.el);\r\n    this._translations = messages[0] as typeof ConfigDrawTools_T9n;\r\n  }\r\n}\r\n"],"version":3}