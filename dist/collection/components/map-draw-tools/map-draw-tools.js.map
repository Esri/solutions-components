{"version":3,"file":"map-draw-tools.js","sourceRoot":"","sources":["../../../src/components/map-draw-tools/map-draw-tools.tsx"],"names":[],"mappings":"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","sourcesContent":["/** @license\r\n * Copyright 2022 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { Component, Element, Event, EventEmitter, Host, h, Method, Prop, State, VNode, Watch } from \"@stencil/core\";\r\nimport { loadModules } from \"../../utils/loadModules\";\r\nimport state from \"../../utils/publicNotificationStore\";\r\nimport MapDrawTools_T9n from \"../../assets/t9n/map-draw-tools/resources.json\";\r\nimport { getLocaleComponentStrings } from \"../../utils/locale\";\r\n\r\n@Component({\r\n  tag: \"map-draw-tools\",\r\n  styleUrl: \"map-draw-tools.css\",\r\n  shadow: false,\r\n})\r\nexport class MapDrawTools {\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Host element access\r\n  //\r\n  //--------------------------------------------------------------------------\r\n  @Element() el: HTMLMapDrawToolsElement;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * boolean: sketch is used by multiple components...need a way to know who should respond...\r\n   */\r\n  @Prop() active = false;\r\n\r\n  /**\r\n   * boolean: Optionally draw a border around the draw tools\r\n   */\r\n  @Prop() border = false;\r\n\r\n  /**\r\n   * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html\r\n   */\r\n  @Prop({ mutable: true }) mapView: __esri.MapView;\r\n\r\n  /**\r\n   * esri/symbols/SimpleMarkerSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleMarkerSymbol.html\r\n   */\r\n  @Prop({ mutable: true }) pointSymbol: __esri.SimpleMarkerSymbol;\r\n\r\n  /**\r\n   * esri/symbols/SimpleLineSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleLineSymbol.html\r\n   */\r\n  @Prop({ mutable: true }) polylineSymbol: __esri.SimpleLineSymbol;\r\n\r\n  /**\r\n   * esri/symbols/SimpleFillSymbol: https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleFillSymbol.html\r\n   */\r\n  @Prop({ mutable: true }) polygonSymbol: __esri.SimpleFillSymbol;\r\n\r\n  /**\r\n   * esri/Graphic: https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html\r\n   */\r\n  @Prop({ mutable: true }) graphics: __esri.Graphic[] = [];\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  State (internal)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Contains the translations for this component.\r\n   * All UI strings should be defined here.\r\n   */\r\n  @State() protected _translations: typeof MapDrawTools_T9n;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * esri/layers/GraphicsLayer: https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GraphicsLayer.html?#constructors-summary\r\n   */\r\n  protected GraphicsLayer: typeof import(\"esri/layers/GraphicsLayer\");\r\n\r\n  /**\r\n   * esri/widgets/Sketch: https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Sketch.html#constructors-summary\r\n   */\r\n  protected Sketch: typeof import(\"esri/widgets/Sketch\");\r\n\r\n  /**\r\n   * A timer used to prevent redundant selections while drawing shapes\r\n   */\r\n  protected _selectionTimer;\r\n\r\n  /**\r\n   * The container element for the sketch widget\r\n   */\r\n  protected _sketchElement: HTMLElement;\r\n\r\n  /**\r\n   * esri/layers/GraphicsLayer: https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GraphicsLayer.html\r\n   */\r\n  protected _sketchGraphicsLayer: __esri.GraphicsLayer;\r\n\r\n  /**\r\n   * esri/widgets/Sketch: https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Sketch.html\r\n   */\r\n  protected _sketchWidget: __esri.Sketch;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Watch handlers\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Called each time the graphics prop is changed.\r\n   *\r\n   */\r\n  @Watch(\"graphics\")\r\n  graphicsWatchHandler(v: any, oldV: any): void {\r\n    if (v && v.length > 0 && JSON.stringify(v) !== JSON.stringify(oldV) && this._sketchGraphicsLayer) {\r\n      this._sketchGraphicsLayer.removeAll();\r\n      this._sketchGraphicsLayer.addMany(v);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called each time the mapView prop is changed.\r\n   *\r\n   */\r\n  @Watch(\"mapView\")\r\n  mapViewWatchHandler(v: any, oldV: any): void {\r\n    if (v && v !== oldV) {\r\n      this._init();\r\n    }\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Methods (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Clears the user drawn graphics\r\n   *\r\n   * @returns Promise that resolves when the operation is complete\r\n   */\r\n  @Method()\r\n  async clear(): Promise<void> {\r\n    this._clearSketch();\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Events (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Emitted on demand when the sketch graphics change.\r\n   *\r\n   */\r\n  @Event() sketchGraphicsChange: EventEmitter<__esri.Graphic[]>;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Functions (lifecycle)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * StencilJS: Called once just after the component is first connected to the DOM.\r\n   *\r\n   * @returns Promise when complete\r\n   */\r\n  async componentWillLoad(): Promise<void> {\r\n    await this._getTranslations();\r\n    await this._initModules();\r\n  }\r\n\r\n  /**\r\n   * StencilJS: Called once just after the component is fully loaded and the first render() occurs.\r\n   *\r\n   * @returns Promise when complete\r\n   */\r\n  componentDidLoad(): void {\r\n    this._init();\r\n  }\r\n\r\n  /**\r\n   * Renders the component.\r\n   */\r\n  render(): VNode {\r\n    const drawClass = this.border ? \"border\" : \"\";\r\n    return (\r\n      <Host>\r\n        <div class={drawClass}>\r\n          <div ref={(el) => { this._sketchElement = el }} />\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Functions (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Load esri javascript api modules\r\n   *\r\n   * @returns Promise resolving when function is done\r\n   *\r\n   * @protected\r\n   */\r\n  protected async _initModules(): Promise<void> {\r\n    const [GraphicsLayer, Sketch] = await loadModules([\r\n      \"esri/layers/GraphicsLayer\",\r\n      \"esri/widgets/Sketch\"\r\n    ]);\r\n    this.GraphicsLayer = GraphicsLayer;\r\n    this.Sketch = Sketch;\r\n  }\r\n\r\n  /**\r\n   * Initialize the graphics layer and the tools that support creating new graphics\r\n   *\r\n   * @protected\r\n   */\r\n  protected _init(): void {\r\n    if (this.mapView && this._sketchElement) {\r\n      this._initGraphicsLayer();\r\n      this._initDrawTools();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create or find the graphics layer and add any existing graphics\r\n   *\r\n   * @protected\r\n   */\r\n  protected _initGraphicsLayer(): void {\r\n    const title = this._translations.sketchLayer;\r\n    const sketchIndex = this.mapView.map.layers.findIndex((l) => l.title === title);\r\n    if (sketchIndex > -1) {\r\n      this._sketchGraphicsLayer = this.mapView.map.layers.getItemAt(sketchIndex) as __esri.GraphicsLayer;\r\n    } else {\r\n      this._sketchGraphicsLayer = new this.GraphicsLayer({ title });\r\n      state.managedLayers.push(title);\r\n      this.mapView.map.layers.add(this._sketchGraphicsLayer);\r\n    }\r\n\r\n    if (this.graphics && this.graphics.length > 0) {\r\n      this._sketchGraphicsLayer.addMany(this.graphics);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize the skecth widget and store the associated symbols for each geometry type\r\n   *\r\n   * @protected\r\n   */\r\n  protected _initDrawTools(): void {\r\n    this._sketchWidget = new this.Sketch({\r\n      layer: this._sketchGraphicsLayer,\r\n      view: this.mapView,\r\n      container: this._sketchElement,\r\n      creationMode: \"single\",\r\n      defaultCreateOptions: {\r\n        \"mode\": \"hybrid\"\r\n      }\r\n    });\r\n\r\n    this.pointSymbol = this._sketchWidget.viewModel.pointSymbol as __esri.SimpleMarkerSymbol;\r\n    this.polylineSymbol = this._sketchWidget.viewModel.polylineSymbol as __esri.SimpleLineSymbol;\r\n    this.polygonSymbol = this._sketchWidget.viewModel.polygonSymbol as __esri.SimpleFillSymbol;\r\n\r\n    this._sketchWidget.visibleElements = {\r\n      selectionTools: {\r\n        \"lasso-selection\": false,\r\n        \"rectangle-selection\": false\r\n      }, createTools: {\r\n        \"circle\": false\r\n      },\r\n      undoRedoMenu: false\r\n    }\r\n\r\n    this._sketchWidget.on(\"update\", (evt) => {\r\n      if (evt.state === \"start\") {\r\n        this.graphics = evt.graphics;\r\n        this.sketchGraphicsChange.emit(this.graphics);\r\n      }\r\n      if (evt.state === \"active\") {\r\n        clearTimeout(this._selectionTimer);\r\n        this._selectionTimer = setTimeout(() => {\r\n          this.graphics = evt.graphics;\r\n          this.sketchGraphicsChange.emit(this.graphics);\r\n        }, 500);\r\n      }\r\n    });\r\n\r\n    this._sketchWidget.on(\"delete\", () => {\r\n      this.graphics = [];\r\n      this.sketchGraphicsChange.emit(this.graphics);\r\n    });\r\n\r\n    this._sketchWidget.on(\"undo\", (evt) => {\r\n      this.graphics = evt.graphics;\r\n      this.sketchGraphicsChange.emit(this.graphics);\r\n    });\r\n\r\n    this._sketchWidget.on(\"redo\", (evt) => {\r\n      this.graphics = evt.graphics;\r\n      this.sketchGraphicsChange.emit(this.graphics);\r\n    });\r\n\r\n    this._sketchWidget.on(\"create\", (evt) => {\r\n      if (evt.state === \"complete\") {\r\n        this.graphics = [evt.graphic];\r\n        this.sketchGraphicsChange.emit(this.graphics);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear any stored graphics and remove all graphics from the graphics layer\r\n   *\r\n   * @protected\r\n   */\r\n  protected _clearSketch(): void {\r\n    this.graphics = [];\r\n    this._sketchGraphicsLayer.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Fetches the component's translations\r\n   *\r\n   * @protected\r\n   */\r\n  protected async _getTranslations(): Promise<void> {\r\n    const translations = await getLocaleComponentStrings(this.el);\r\n    this._translations = translations[0] as typeof MapDrawTools_T9n;\r\n  }\r\n}\r\n"]}