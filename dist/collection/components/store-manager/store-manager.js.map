{"version":3,"file":"store-manager.js","sourceRoot":"","sources":["../../../src/components/store-manager/store-manager.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH;;;;;;;;;EASE;AAEF,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAgB,IAAI,EAAS,MAAM,eAAe,CAAC;AAQrF,MAAM,OAAO,YAAY;;iBAmByB,EAAE;qBAKS,EAAE;;;EAO7D,4EAA4E;EAC5E,EAAE;EACF,aAAa;EACb,EAAE;EACF,4EAA4E;EAE5E,iBAAiB;IACf,IAAI,CAAC,kBAAkB,EAAE,CAAC;EAC5B,CAAC;EAED;;KAEG;EACH,MAAM;IACJ,OAAO,CAAC,IAAI,CAAC,CAAC;EAChB,CAAC;EAkBD;;;KAGG;EACO,kBAAkB;IAC1B,oBAAoB;IACpB,IAAI,CAAC,cAAc,GAAG,IAAI,gBAAgB,CAAC,EAAE,CAAC,EAAE;MAC9C,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;QACjB,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QACzD,IAAI,QAAQ,CAAC,IAAI,KAAK,YAAY,IAAI,QAAQ,CAAC,aAAa,KAAK,OAAO;UACtE,QAAQ,KAAK,QAAQ,CAAC,QAAQ,IAAI,QAAQ,KAAK,EAAE,EAAE;UACnD;;;;;;;;;;YAUE;UACF,OAAO,IAAI,CAAC;SACb;MACH,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAC;IACH,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC,CAAC;EACtF,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["/** @license\r\n * Copyright 2022 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * The json-editor componet leverages a stencil/store to manage data.\r\n * If a component uses the json-editor but does not have logic to hydrate the store this component can be used.\r\n * It will create and hydrate the store based on the value provided.\r\n *\r\n * The value must be a string so it can be observed by the MutationObserver implemented below.\r\n * The observer does not notify when passing complex attributes as you can with stencil.\r\n *\r\n *\r\n*/\r\n\r\nimport { Component, Element, Event, EventEmitter, Prop, VNode } from '@stencil/core';\r\n//import { state } from '../../utils/editStore';\r\nimport { /*getItemDataAsJson,*/ UserSession } from '@esri/solution-common';\r\n\r\n@Component({\r\n  tag: 'store-manager',\r\n  shadow: false\r\n})\r\nexport class StoreManager {\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Host element access\r\n  //\r\n  //--------------------------------------------------------------------------\r\n  @Element() el: HTMLStoreManagerElement;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Contains source json as a string\r\n   *\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) value = \"\";\r\n\r\n  /**\r\n   * Templates for the current solution\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) templates: any[] = [];\r\n\r\n  /**\r\n   * Credentials for requests\r\n   */\r\n  @Prop({ mutable: true }) authentication: UserSession;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Lifecycle\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  connectedCallback(): void {\r\n    this._initValueObserver();\r\n  }\r\n\r\n  /**\r\n   * Renders the component.\r\n   */\r\n  render(): VNode {\r\n    return (null);\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Events\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  @Event() stateLoaded: EventEmitter<any>;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Private Methods\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  protected _valueObserver;\r\n\r\n  /**\r\n   * Initialize the observer that will monitor and respond to changes in the value.\r\n   * When we get a new value we are dealinmg with a new solution and need to fetch the items data and load the state.\r\n   */\r\n  protected _initValueObserver(): void {\r\n    //const self = this;\r\n    this._valueObserver = new MutationObserver(ml => {\r\n      ml.some(mutation => {\r\n        const newValue = mutation.target[mutation.attributeName];\r\n        if (mutation.type === 'attributes' && mutation.attributeName === \"value\" &&\r\n          newValue !== mutation.oldValue && newValue !== \"\") {\r\n          /*\r\n          const v = JSON.parse(newValue);\r\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n          getItemDataAsJson(v, self.authentication).then(data => {\r\n            state.models = getModels(Array.isArray(v) ? v : [v], self.authentication, v);\r\n            state.featureServices = getFeatureServices(Array.isArray(v) ? v : [v])\r\n            state.get(\"spatialReferenceInfo\") = getSpatialReferenceInfo(state.featureServices, data);\r\n            self.templates = v;\r\n            self.stateLoaded.emit(state);\r\n          });\r\n          */\r\n          return true;\r\n        }\r\n      })\r\n    });\r\n    this._valueObserver.observe(this.el, { attributes: true, attributeOldValue: true });\r\n  }\r\n}\r\n"]}