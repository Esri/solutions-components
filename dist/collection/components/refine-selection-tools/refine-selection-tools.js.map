{"version":3,"file":"refine-selection-tools.js","sourceRoot":"","sources":["../../../src/components/refine-selection-tools/refine-selection-tools.tsx"],"names":[],"mappings":"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","sourcesContent":["/** @license\r\n * Copyright 2022 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { Component, Element, Event, EventEmitter, Host, h, Method, Prop, State, VNode, Watch } from \"@stencil/core\";\r\nimport { ERefineMode, ESelectionMode, ESelectionType, IRefineOperation } from \"../../utils/interfaces\";\r\nimport { loadModules } from \"../../utils/loadModules\";\r\nimport { getMapLayerView, highlightFeatures } from \"../../utils/mapViewUtils\";\r\nimport { queryFeaturesByGeometry } from \"../../utils/queryUtils\";\r\nimport state from \"../../utils/publicNotificationStore\";\r\nimport RefineSelectionTools_T9n from \"../../assets/t9n/refine-selection-tools/resources.json\";\r\nimport { getLocaleComponentStrings } from \"../../utils/locale\";\r\n\r\n@Component({\r\n  tag: \"refine-selection-tools\",\r\n  styleUrl: \"refine-selection-tools.css\",\r\n  shadow: true,\r\n})\r\nexport class RefineSelectionTools {\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Host element access\r\n  //\r\n  //--------------------------------------------------------------------------\r\n  @Element() el: HTMLRefineSelectionToolsElement;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * boolean: sketch is used by multiple components...need a way to know who should respond...\r\n   */\r\n  @Prop() active = false;\r\n\r\n  /**\r\n   * boolean: Optionally draw a border around the draw tools\r\n   */\r\n  @Prop() border = false;\r\n\r\n  /**\r\n   * esri/Graphic: https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html\r\n   */\r\n  @Prop({ mutable: true }) graphics: __esri.Graphic[];\r\n\r\n  /**\r\n   * number: The oids of the selected features\r\n   */\r\n  @Prop() ids: number[] = [];\r\n\r\n  /**\r\n   * esri/views/layers/LayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-LayerView.html\r\n   */\r\n  @Prop() layerView: __esri.FeatureLayerView;\r\n\r\n  /**\r\n   * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html\r\n   */\r\n  @Prop() layerViews: __esri.FeatureLayerView[] = [];\r\n\r\n  /**\r\n   * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html\r\n   */\r\n  @Prop() mapView: __esri.MapView;\r\n\r\n  /**\r\n   * utils/interfaces/ESelectionMode: ADD, REMOVE\r\n   */\r\n  @Prop() mode: ESelectionMode;\r\n\r\n  /**\r\n   * utils/interfaces/ERefineMode: ALL, SUBSET\r\n   */\r\n  @Prop() refineMode: ERefineMode;\r\n\r\n  /**\r\n   * boolean: Used to control the visibility of the layer picker\r\n   */\r\n  @Prop() useLayerPicker = true;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  State (internal)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * boolean: Is selected enabled\r\n   */\r\n  @State() _selectEnabled = false;\r\n\r\n  /**\r\n   * utils/interfaces/ESelectionType: POINT, LINE, POLY, RECT\r\n   */\r\n  @State() _selectionMode: ESelectionType;\r\n\r\n  /**\r\n   * Contains the translations for this component.\r\n   * All UI strings should be defined here.\r\n   */\r\n  @State() _translations: typeof RefineSelectionTools_T9n;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * esri/layers/GraphicsLayer: https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GraphicsLayer.html\r\n   * The graphics layer constructor\r\n   */\r\n  protected GraphicsLayer: typeof import(\"esri/layers/GraphicsLayer\");\r\n\r\n  /**\r\n   * esri/widgets/Sketch/SketchViewModel: https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Sketch-SketchViewModel.html\r\n   * The sketch view model constructor\r\n   */\r\n  protected SketchViewModel: typeof import(\"esri/widgets/Sketch/SketchViewModel\");\r\n\r\n  /**\r\n   * {<layer title>: Graphic[]}: Collection of graphics returned from queries to the layer\r\n   */\r\n  protected _featuresCollection: { [key: string]: __esri.Graphic[] } = {};\r\n\r\n  /**\r\n   * esri/core/Handles: https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Handles.html#Handle\r\n   */\r\n  protected _hitTestHandle: __esri.Handle;\r\n\r\n  /**\r\n   * IRefineOperation[]: Array to maintain the possible redo operations\r\n   */\r\n  protected _redoStack: IRefineOperation[] = [];\r\n\r\n  /**\r\n   * esri/geometry/Geometry: https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html\r\n   */\r\n  protected _sketchGeometry: __esri.Geometry;\r\n\r\n  /**\r\n   * esri/layers/GraphicsLayer: https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GraphicsLayer.html\r\n   * The graphics layer used to show selections.\r\n   */\r\n  protected _sketchGraphicsLayer: __esri.GraphicsLayer;\r\n\r\n  /**\r\n   * esri/widgets/Sketch/SketchViewModel: The html element for selecting buffer unit\r\n   * The sketch view model used to create graphics\r\n   */\r\n  protected _sketchViewModel: __esri.SketchViewModel;\r\n\r\n  /**\r\n   * IRefineOperation[]: Array to maintain the possible undo operations\r\n   */\r\n  protected _undoStack: IRefineOperation[] = [];\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Watch handlers\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Called each time the ids prop is changed.\r\n   * Highlight the features based on the provided ids\r\n   */\r\n  @Watch(\"ids\")\r\n  idsWatchHandler(v: any, oldV: any): void {\r\n    if (v && JSON.stringify(v) !== JSON.stringify(oldV)) {\r\n      void this._highlightFeatures(v);\r\n    }\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Methods (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Reset the ids collection\r\n   *\r\n   * @returns Promise when complete\r\n   */\r\n  @Method()\r\n  async reset(): Promise<void> {\r\n    this.ids = [];\r\n  }\r\n\r\n  /**\r\n   * Clear current highlight handle\r\n   *\r\n   * @returns Promise when complete\r\n   */\r\n  @Method()\r\n  async clearHighlight(): Promise<void> {\r\n    this._clearHighlight();\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Events (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Emitted on demand when selection graphics change.\r\n   */\r\n  @Event() refineSelectionGraphicsChange: EventEmitter<any[]>;\r\n\r\n  /**\r\n   * Emitted on demand when selection ids change\r\n   */\r\n  @Event() refineSelectionIdsChange: EventEmitter<{ addIds: any[]; removeIds: any[]; }>;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Functions (lifecycle)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * StencilJS: Called once just after the component is first connected to the DOM.\r\n   */\r\n  async componentWillLoad(): Promise<void> {\r\n    await this._getTranslations();\r\n    await this._initModules();\r\n  }\r\n\r\n  /**\r\n   * StencilJS: Called once just after the component is fully loaded and the first render() occurs.\r\n   */\r\n  componentDidLoad(): void {\r\n    this._init();\r\n  }\r\n\r\n  /**\r\n   * StencilJS: Called every time the component is disconnected from the DOM, ie,\r\n   * it can be dispatched more than once, DO not confuse with a \"onDestroy\" kind of event.\r\n   */\r\n  disconnectedCallback(): void {\r\n    this.active = false;\r\n  }\r\n\r\n  /**\r\n   * Called every time the component is connected to the DOM.\r\n   * When the component is first connected, this method is called before componentWillLoad.\r\n   */\r\n  connectedCallback(): void {\r\n    this.active = true;\r\n    if (this.ids.length > 0) {\r\n      this._selectEnabled = true;\r\n      void this._highlightFeatures(this.ids);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Renders the component.\r\n   */\r\n  render(): VNode {\r\n    const showLayerPickerClass = this.useLayerPicker ? \"div-visible\" : \"div-not-visible\";\r\n    const drawClass = this.border ? \" border\" : \"\";\r\n    return (\r\n      <Host>\r\n        <div>\r\n          {/* Removed if we use checkbox above to control layer vs interactive select */}\r\n          {/* <div class={\"main-label \" + showLayerPickerClass}>\r\n            <calcite-label>{this._translations.selectLayers}</calcite-label>\r\n          </div> */}\r\n          <map-layer-picker\r\n            class={showLayerPickerClass}\r\n            mapView={this.mapView}\r\n            onLayerSelectionChange={(evt) => { void this._layerSelectionChange(evt) }}\r\n            selectedLayers={this.layerViews.map(l => l.layer.title)}\r\n            selectionMode={\"single\"}\r\n          />\r\n          <div class={\"margin-top-1\" + drawClass}>\r\n            <div class=\"esri-sketch esri-widget\">\r\n              <div class=\"esri-sketch__panel\">\r\n                <div class=\"esri-sketch__tool-section esri-sketch__section\">\r\n                  <calcite-action\r\n                    disabled={!this._selectEnabled}\r\n                    icon=\"select\"\r\n                    onClick={() => this._setSelectionMode(ESelectionType.POINT)}\r\n                    scale=\"s\"\r\n                    text={this._translations.select}\r\n                  />\r\n                </div>\r\n                <div class=\"esri-sketch__tool-section esri-sketch__section\">\r\n                  <calcite-action\r\n                    disabled={!this._selectEnabled}\r\n                    icon=\"line\"\r\n                    onClick={() => this._setSelectionMode(ESelectionType.LINE)}\r\n                    scale=\"s\"\r\n                    text={this._translations.selectLine}\r\n                  />\r\n                  <calcite-action\r\n                    disabled={!this._selectEnabled}\r\n                    icon=\"polygon\"\r\n                    onClick={() => this._setSelectionMode(ESelectionType.POLY)}\r\n                    scale=\"s\"\r\n                    text={this._translations.selectPolygon}\r\n                  />\r\n                  <calcite-action\r\n                    disabled={!this._selectEnabled}\r\n                    icon=\"rectangle\"\r\n                    onClick={() => this._setSelectionMode(ESelectionType.RECT)}\r\n                    scale=\"s\"\r\n                    text={this._translations.selectRectangle}\r\n                  />\r\n                </div>\r\n                <div class=\"esri-sketch__tool-section esri-sketch__section\">\r\n                  <calcite-action\r\n                    disabled={this._undoStack.length === 0}\r\n                    icon=\"undo\"\r\n                    onClick={() => this._undo()}\r\n                    scale=\"s\"\r\n                    text={this._translations.undo}\r\n                  />\r\n                  <calcite-action\r\n                    disabled={this._redoStack.length === 0}\r\n                    icon=\"redo\"\r\n                    onClick={() => this._redo()}\r\n                    scale=\"s\"\r\n                    text={this._translations.redo}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Functions (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Initialize the graphics layer and skecth view model\r\n   *\r\n   * @returns Promise when the operation has completed\r\n   * @protected\r\n   */\r\n  protected _init(): void {\r\n    this._initGraphicsLayer();\r\n    this._initSketchViewModel();\r\n  }\r\n\r\n  /**\r\n   * Load esri javascript api modules\r\n   *\r\n   * @returns Promise resolving when function is done\r\n   *\r\n   * @protected\r\n   */\r\n  protected async _initModules(): Promise<void> {\r\n    const [GraphicsLayer, SketchViewModel] = await loadModules([\r\n      \"esri/layers/GraphicsLayer\",\r\n      \"esri/widgets/Sketch/SketchViewModel\"\r\n    ]);\r\n    this.GraphicsLayer = GraphicsLayer;\r\n    this.SketchViewModel = SketchViewModel;\r\n  }\r\n\r\n  /**\r\n   * Initialize the skecth view model\r\n   *\r\n   * @returns Promise when the operation has completed\r\n   * @protected\r\n   */\r\n  protected _initSketchViewModel(): void {\r\n    this._sketchViewModel = new this.SketchViewModel({\r\n      layer: this._sketchGraphicsLayer,\r\n      defaultUpdateOptions: {\r\n        tool: \"reshape\",\r\n        toggleToolOnClick: false\r\n      },\r\n      view: this.mapView\r\n    });\r\n\r\n    this._sketchViewModel.on(\"create\", (event) => {\r\n      if (event.state === \"complete\" && this.active) {\r\n        this._featuresCollection = {};\r\n        this._sketchGeometry = event.graphic.geometry;\r\n        void this._selectFeatures(this._sketchGeometry);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear any skecth graphics\r\n   *\r\n   * @returns Promise when the operation has completed\r\n   * @protected\r\n   */\r\n  protected _clear(): void {\r\n    this._sketchGeometry = null;\r\n    this._sketchViewModel.cancel();\r\n    this._sketchGraphicsLayer.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Initialize the graphics layer\r\n   *\r\n   * @returns Promise when the operation has completed\r\n   * @protected\r\n   */\r\n  protected _initGraphicsLayer(): void {\r\n    const title = this._translations.sketchLayer;\r\n    const sketchIndex = this.mapView.map.layers.findIndex((l) => l.title === title);\r\n    if (sketchIndex > -1) {\r\n      this._sketchGraphicsLayer = this.mapView.map.layers.getItemAt(sketchIndex) as __esri.GraphicsLayer;\r\n    } else {\r\n      this._sketchGraphicsLayer = new this.GraphicsLayer({ title });\r\n      state.managedLayers.push(title);\r\n      this.mapView.map.layers.add(this._sketchGraphicsLayer);\r\n    }\r\n\r\n    if (this.graphics && this.graphics.length > 0) {\r\n      this._sketchGraphicsLayer.addMany(this.graphics);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear selection based on map click\r\n   *\r\n   * @protected\r\n   */\r\n  protected _initHitTest(): void {\r\n    if (this._hitTestHandle) {\r\n      this._hitTestHandle.remove();\r\n    }\r\n    this._hitTestHandle = this.mapView.on(\"click\", (event) => {\r\n      event.stopPropagation();\r\n      const opts = {\r\n        include: this.layerViews.map(lv => lv.layer)\r\n      };\r\n      void this.mapView.hitTest(event, opts).then((response) => {\r\n        let graphics = [];\r\n        if (response.results.length > 0) {\r\n          graphics = response.results.reduce((prev, cur) => {\r\n            const g = (cur as any)?.graphic;\r\n            if (g) {\r\n              prev.push(g);\r\n            }\r\n            return prev;\r\n          }, []);\r\n        }\r\n        this.refineSelectionGraphicsChange.emit(graphics);\r\n        this._clear();\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * Gets the layer views from the map when the layer selection changes\r\n   *\r\n   * @returns Promise resolving when function is done\r\n   *\r\n   * @protected\r\n   */\r\n  protected async _layerSelectionChange(\r\n    evt: CustomEvent\r\n  ): Promise<void> {\r\n    if (Array.isArray(evt.detail) && evt.detail.length > 0) {\r\n      this._selectEnabled = true;\r\n      const layerPromises = evt.detail.map(title => {\r\n        return getMapLayerView(this.mapView, title)\r\n      });\r\n\r\n      return Promise.all(layerPromises).then((layerViews) => {\r\n        this.layerViews = layerViews;\r\n      });\r\n    } else {\r\n      this._selectEnabled = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Store the current selection mode\r\n   *\r\n   * @protected\r\n   */\r\n  protected _setSelectionMode(\r\n    mode: ESelectionType\r\n  ): void {\r\n    this._selectionMode = mode;\r\n\r\n    if (this._hitTestHandle) {\r\n      this._hitTestHandle.remove();\r\n    }\r\n\r\n    switch (this._selectionMode) {\r\n      case ESelectionType.POINT:\r\n        this._sketchViewModel.create(\"point\");\r\n        //this._initHitTest();\r\n        break;\r\n      case ESelectionType.LINE:\r\n        this._sketchViewModel.create(\"polyline\");\r\n        break;\r\n      case ESelectionType.POLY:\r\n        this._sketchViewModel.create(\"polygon\");\r\n        break;\r\n      case ESelectionType.RECT:\r\n        this._sketchViewModel.create(\"rectangle\");\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Select features based on the input geometry\r\n   *\r\n   * @param geom the geometry used for selection\r\n   *\r\n   * @returns Promise resolving when function is done\r\n   *\r\n   * @protected\r\n   */\r\n  protected async _selectFeatures(\r\n    geom: __esri.Geometry\r\n  ): Promise<void> {\r\n    const queryFeaturePromises = this.layerViews.map(layerView => {\r\n      this._featuresCollection[layerView.layer.title] = [];\r\n      return queryFeaturesByGeometry(0, layerView.layer, geom, this._featuresCollection)\r\n    });\r\n\r\n    return Promise.all(queryFeaturePromises).then(async response => {\r\n      let graphics = [];\r\n      response.forEach(r => {\r\n        Object.keys(r).forEach(k => {\r\n          graphics = graphics.concat(r[k]);\r\n        })\r\n      });\r\n\r\n      if (this.refineMode === ERefineMode.SUBSET) {\r\n        this.refineSelectionGraphicsChange.emit(graphics);\r\n      } else {\r\n        const oids = Array.isArray(graphics) ? graphics.map(g => g.attributes[g?.layer?.objectIdField]) : [];\r\n        await this._updateIds(oids, this.mode, this._undoStack, this.mode);\r\n      }\r\n      this._clear();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Highlight any selected features in the map\r\n   *\r\n   * @returns Promise resolving when function is done\r\n   * @protected\r\n   */\r\n  protected async _highlightFeatures(\r\n    ids: number[],\r\n    updateExtent = false\r\n  ): Promise<void> {\r\n    this._clearHighlight();\r\n    if (ids.length > 0) {\r\n      state.highlightHandle = await highlightFeatures(ids, this.layerViews[0], this.mapView, updateExtent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear any highlighted features in the map\r\n   *\r\n   * @protected\r\n   */\r\n  protected _clearHighlight(): void {\r\n    state.highlightHandle?.remove();\r\n  }\r\n\r\n  /**\r\n   * Update the ids for any ADD or REMOVE operation and highlight the features.\r\n   *\r\n   * @param oids the ids to add or remove\r\n   * @param mode ADD or REMOVE this will control if the ids are added or removed\r\n   * @param operationStack the undo or redo stack to push the operation to\r\n   * @param operationMode ADD or REMOVE the mode of the individual refine operation\r\n   *\r\n   * @returns Promise resolving when function is done\r\n   *\r\n   * @protected\r\n   */\r\n  protected async _updateIds(\r\n    oids: number[],\r\n    mode: ESelectionMode,\r\n    operationStack: IRefineOperation[],\r\n    operationMode: ESelectionMode\r\n  ): Promise<void> {\r\n    const idUpdates = { addIds: [], removeIds: [] };\r\n    if (mode === ESelectionMode.ADD) {\r\n      idUpdates.addIds = oids.filter(id => this.ids.indexOf(id) < 0);\r\n      this.ids = [...this.ids, ...idUpdates.addIds];\r\n      operationStack.push({ mode: operationMode, ids: idUpdates.addIds });\r\n    } else {\r\n      idUpdates.removeIds = oids.filter(id => this.ids.indexOf(id) > -1);\r\n      this.ids = this.ids.filter(id => idUpdates.removeIds.indexOf(id) < 0);\r\n      operationStack.push({ mode: operationMode, ids: idUpdates.removeIds });\r\n    }\r\n    await this._highlightFeatures(this.ids).then(() => {\r\n      this.refineSelectionIdsChange.emit(idUpdates);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Undo the most current ADD or REMOVE operation\r\n   *\r\n   * @returns Promise resolving when function is done\r\n   *\r\n   * @protected\r\n   */\r\n  protected _undo(): void {\r\n    const undoOp = this._undoStack.pop();\r\n    void this._updateIds(\r\n      undoOp.ids,\r\n      undoOp.mode === ESelectionMode.ADD ? ESelectionMode.REMOVE : ESelectionMode.ADD,\r\n      this._redoStack,\r\n      undoOp.mode\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Redo the most current ADD or REMOVE operation\r\n   *\r\n   * @returns Promise resolving when function is done\r\n   *\r\n   * @protected\r\n   */\r\n  protected _redo(): void {\r\n    const redoOp = this._redoStack.pop();\r\n    void this._updateIds(\r\n      redoOp.ids,\r\n      redoOp.mode,\r\n      this._undoStack,\r\n      redoOp.mode\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Fetches the component's translations\r\n   *\r\n   * @protected\r\n   */\r\n  protected async _getTranslations(): Promise<void> {\r\n    const translations = await getLocaleComponentStrings(this.el);\r\n    this._translations = translations[0] as typeof RefineSelectionTools_T9n;\r\n  }\r\n}\r\n"]}