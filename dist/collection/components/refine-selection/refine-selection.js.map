{"version":3,"file":"refine-selection.js","sourceRoot":"","sources":["../../../src/components/refine-selection/refine-selection.tsx"],"names":[],"mappings":"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","sourcesContent":["/** @license\r\n * Copyright 2022 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { Component, Element, Event, EventEmitter, Host, h, Listen, Prop, State, VNode, Watch } from \"@stencil/core\";\r\nimport { ERefineMode, ESelectionMode, EWorkflowType, ISelectionSet } from \"../../utils/interfaces\";\r\nimport * as utils from \"../../utils/publicNotificationUtils\";\r\nimport RefineSelection_T9n from \"../../assets/t9n/refine-selection/resources.json\";\r\nimport { getLocaleComponentStrings } from \"../../utils/locale\";\r\n\r\n@Component({\r\n  tag: \"refine-selection\",\r\n  styleUrl: \"refine-selection.css\",\r\n  shadow: false,\r\n})\r\nexport class RefineSelection {\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Host element access\r\n  //\r\n  //--------------------------------------------------------------------------\r\n  @Element() el: HTMLRefineSelectionToolsElement;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html\r\n   */\r\n  @Prop() addresseeLayer: __esri.FeatureLayerView;\r\n\r\n  /**\r\n   * string[]: Optional list of enabled layer ids\r\n   *  If empty all layers will be available\r\n   */\r\n  @Prop() enabledLayerIds: string[] = [];\r\n\r\n  /**\r\n   * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html\r\n   */\r\n  @Prop() mapView: __esri.MapView;\r\n\r\n  /**\r\n   * utils/interfaces/ISelectionSet: An array of user defined selection sets\r\n   */\r\n  @Prop({ mutable: true }) selectionSets: ISelectionSet[] = [];\r\n\r\n  @Prop() GraphicsLayer: any;\r\n\r\n  @Prop() SketchViewModel: any;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  State (internal)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Contains the translations for this component.\r\n   * All UI strings should be defined here.\r\n   */\r\n  @State() protected _translations: typeof RefineSelection_T9n;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * boolean: Indicates if any new graphics should be added or removed\r\n   */\r\n  protected _addEnabled = true;\r\n\r\n  /**\r\n   * HTMLRefineSelectionToolsElement: The html element for the refine selection tools\r\n   */\r\n  protected _refineTools: HTMLRefineSelectionToolsElement;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Watch handlers\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Called each time the addresseeLayer is changed.\r\n   * Add a new clean refine set for the new addressee layer.\r\n   */\r\n  @Watch(\"addresseeLayer\")\r\n  addresseeLayerWatchHandler(): void {\r\n    const selectionSets = this.selectionSets.filter(ss => ss.workflowType !== EWorkflowType.REFINE);\r\n    this.selectionSets = this._initRefineSelectionSet(selectionSets);\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Methods (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Events (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Emitted on demand when selection sets change.\r\n   *\r\n   */\r\n  @Event() selectionSetsChanged: EventEmitter<ISelectionSet[]>;\r\n\r\n  /**\r\n   * Handles changes to refine selection ids.\r\n   *\r\n   */\r\n  @Listen(\"refineSelectionIdsChange\", { target: \"window\" })\r\n  refineSelectionIdsChange(event: CustomEvent): void {\r\n    const addIds = event.detail?.addIds || [];\r\n    const removeIds = event.detail?.removeIds || [];\r\n\r\n    this._updateSelectionSets(removeIds);\r\n    this._updateRefineSelectionSet(addIds, removeIds);\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Functions (lifecycle)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * StencilJS: Called once just after the component is first connected to the DOM.\r\n   */\r\n  async componentWillLoad(): Promise<void> {\r\n    await this._getTranslations();\r\n    const refineSet = this._getRefineSelectionSet(this.selectionSets);\r\n    if (!refineSet) {\r\n      this.selectionSets = this._initRefineSelectionSet(this.selectionSets);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Renders the component.\r\n   */\r\n  render(): VNode {\r\n    return (\r\n      <Host>\r\n        <div class=\"padding-1\">\r\n          <div>\r\n            <calcite-radio-group\r\n              class=\"w-100\"\r\n              onCalciteRadioGroupChange={(evt) => this._modeChanged(evt)}\r\n            >\r\n              <calcite-radio-group-item\r\n                checked={this._addEnabled}\r\n                class=\"w-50\"\r\n                onClick={() => this._setSelectionMode(ESelectionMode.ADD)}\r\n                value={ESelectionMode.ADD}\r\n              >\r\n                {this._translations.add}\r\n              </calcite-radio-group-item>\r\n              <calcite-radio-group-item\r\n                checked={!this._addEnabled}\r\n                class=\"w-50\"\r\n                onClick={() => this._setSelectionMode(ESelectionMode.REMOVE)}\r\n                value={ESelectionMode.REMOVE}\r\n              >\r\n                {this._translations.remove}\r\n              </calcite-radio-group-item>\r\n            </calcite-radio-group>\r\n            <refine-selection-tools\r\n              border={true}\r\n              enabledLayerIds={this.enabledLayerIds}\r\n              ids={utils.getSelectionIds(this.selectionSets)}\r\n              layerViews={[this.addresseeLayer]}\r\n              mapView={this.mapView}\r\n              mode={this._addEnabled ? ESelectionMode.ADD : ESelectionMode.REMOVE}\r\n              ref={(el) => { this._refineTools = el }}\r\n              refineMode={ERefineMode.ALL}\r\n              refineSelectionSet={this._getRefineSelectionSet(this.selectionSets)}\r\n              useLayerPicker={false}\r\n            />\r\n          </div>\r\n          <br />\r\n          {\r\n            (\r\n              <calcite-list class=\"list-border\">\r\n                {this._getRefineSelectionSetList()}\r\n              </calcite-list>\r\n            )\r\n          }\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Functions (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Store the Add/Remove mode\r\n   *\r\n   * @protected\r\n   */\r\n  protected _modeChanged(\r\n    evt: CustomEvent\r\n  ): void {\r\n    this._addEnabled = evt.detail === ESelectionMode.ADD;\r\n  }\r\n\r\n  /**\r\n   * Set the refine tools selection mode\r\n   *\r\n   * @protected\r\n   */\r\n  protected _setSelectionMode(\r\n    mode: ESelectionMode\r\n  ): void {\r\n    this._refineTools.mode = mode;\r\n  }\r\n\r\n  /**\r\n   * Create a list to show the number added/removed/total unique selected\r\n   *\r\n   * @returns the list node\r\n   * @protected\r\n   */\r\n  protected _getRefineSelectionSetList(): VNode[] {\r\n    const total = utils.getTotal(this.selectionSets);\r\n    const refineSet = this._getRefineSelectionSet(this.selectionSets);\r\n    const numAdded = refineSet?.refineIds.addIds.length || 0;\r\n    const numRemoved = refineSet?.refineIds.removeIds.length || 0;\r\n\r\n    return [(\r\n      <calcite-list-item\r\n        label={this._translations.featuresAdded.replace(\"{{n}}\", numAdded.toString())}\r\n      />\r\n    ), (\r\n      <calcite-list-item\r\n        label={this._translations.featuresRemoved.replace(\"{{n}}\", numRemoved.toString())}\r\n      />\r\n    ), (\r\n      <calcite-list-item\r\n        label={this._translations.totalSelected.replace(\"{{n}}\", total.toString())}\r\n      />\r\n    )];\r\n  }\r\n\r\n  /**\r\n   * Fetch the refine selection set\r\n   *\r\n   * @returns the refine selection set\r\n   * @protected\r\n   */\r\n  protected _getRefineSelectionSet(\r\n    selectionSets: ISelectionSet[]\r\n  ): ISelectionSet {\r\n    let refineSelectionSet: ISelectionSet;\r\n    selectionSets.some(ss => {\r\n      if (ss.workflowType === EWorkflowType.REFINE) {\r\n        refineSelectionSet = ss;\r\n        return true;\r\n      }\r\n    });\r\n    return refineSelectionSet;\r\n  }\r\n\r\n  /**\r\n   * Remove ids from existing selection sets.\r\n   * Remove any selection sets than have no selected ids\r\n   * This can update any selection set not just the refine set.\r\n   * We do not do something similar for adds as we will only ever add from refine tools to the single REFINE selection set.\r\n   *\r\n   * @param removeIds the ids to remove\r\n   *\r\n   * @protected\r\n   */\r\n  protected _updateSelectionSets(\r\n    removeIds: number[]\r\n  ): void {\r\n    if (removeIds.length > 0) {\r\n      this.selectionSets = this.selectionSets.reduce((prev, cur) => {\r\n        cur.selectedIds = cur.selectedIds.filter(id => removeIds.indexOf(id) < 0);\r\n        if (cur.selectedIds.length > 0 || cur.workflowType === EWorkflowType.REFINE) {\r\n          prev.push(cur);\r\n        }\r\n        return prev;\r\n      }, []);\r\n      this.selectionSetsChanged.emit(this.selectionSets);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the refine selection set with any adds or removes\r\n   *\r\n   * @param addIds any ids to add\r\n   * @param removeIds any ids to remove\r\n   *\r\n   * @returns Promise resolving when function is done\r\n   * @protected\r\n   */\r\n  protected _updateRefineSelectionSet(\r\n    addIds: number[],\r\n    removeIds: number[]\r\n  ): void {\r\n    const selectionSet = this._getRefineSelectionSet(this.selectionSets);\r\n    this._updateRefineIds(selectionSet, addIds, removeIds);\r\n    this.selectionSetsChanged.emit(this.selectionSets);\r\n  }\r\n\r\n  /**\r\n   * Update the ids stored for the refine selection set\r\n   *\r\n   * @param selectionSet the refine selection set\r\n   * @param addIds any ids to add\r\n   * @param removeIds any ids to remove\r\n   *\r\n   * @returns updated selection sets\r\n   * @protected\r\n   */\r\n  protected _updateRefineIds(\r\n    selectionSet: ISelectionSet,\r\n    addIds: number[],\r\n    removeIds: number[]\r\n  ): ISelectionSet[] {\r\n    // remove ids if they exist in the current add or remove list\r\n    selectionSet.refineIds.addIds = selectionSet.refineIds.addIds.filter(id => removeIds.indexOf(id) < 0)\r\n    selectionSet.refineIds.removeIds = selectionSet.refineIds.removeIds.filter(id => addIds.indexOf(id) < 0)\r\n\r\n    const _addIds = [...new Set(selectionSet.refineIds.addIds.concat(addIds))];\r\n    const _removeIds = [...new Set(selectionSet.refineIds.removeIds.concat(removeIds))];\r\n    selectionSet.refineIds = {\r\n      addIds: _addIds.filter(id => _removeIds.indexOf(id) < 0),\r\n      removeIds: _removeIds.filter(id => _addIds.indexOf(id) < 0)\r\n    }\r\n    selectionSet.selectedIds = selectionSet.refineIds.addIds.length > 0 ?\r\n      [...new Set(selectionSet.selectedIds.concat(selectionSet.refineIds.addIds))] :\r\n      selectionSet.selectedIds.filter(id => selectionSet.refineIds.removeIds.indexOf(id) < 0);\r\n\r\n    return this.selectionSets.map(ss => {\r\n      return ss.workflowType === EWorkflowType.REFINE ? selectionSet : ss;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add a new refine selection set\r\n   *\r\n   * @returns updated selection sets\r\n   * @protected\r\n   */\r\n  protected _initRefineSelectionSet(\r\n    selectionSets: ISelectionSet[]\r\n  ): ISelectionSet[] {\r\n    return [\r\n      ...selectionSets,\r\n      ({\r\n        buffer: undefined,\r\n        distance: 0,\r\n        download: true,\r\n        geometries: [],\r\n        id: Date.now(),\r\n        label: \"Refine\",\r\n        layerView: this.addresseeLayer,\r\n        refineSelectLayers: [],\r\n        searchResult: undefined,\r\n        selectedIds: [],\r\n        unit: \"feet\",\r\n        workflowType: EWorkflowType.REFINE,\r\n        refineIds: {\r\n          addIds: [],\r\n          removeIds: []\r\n        },\r\n        redoStack: [],\r\n        undoStack: []\r\n      })\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Fetches the component's translations\r\n   *\r\n   * @protected\r\n   */\r\n  protected async _getTranslations(): Promise<void> {\r\n    const translations = await getLocaleComponentStrings(this.el);\r\n    this._translations = translations[0] as typeof RefineSelection_T9n;\r\n  }\r\n\r\n  /** Provides access to protected methods for unit testing.\r\n *\r\n *  @param methodName Name of protected method to run\r\n *  @param arg1 First argument to forward to method, e.g., for \"_modeChanged\", `ESelectionMode`\r\n *  @returns\r\n */\r\n  public _testAccess(\r\n    methodName: string,\r\n    arg1?: any\r\n  ): any {\r\n    switch (methodName) {\r\n      case \"_modeChanged\":\r\n        return this._modeChanged(arg1);\r\n      case \"_setSelectionMode\":\r\n        return this._setSelectionMode(arg1);\r\n      // case \"_getRefineSelectionSetList\":\r\n      //   return this._getRefineSelectionSetList();\r\n      // case \"_getRefineSelectionSet\":\r\n      //   return this._getRefineSelectionSet(arg1);\r\n      // case \"_updateSelectionSets\":\r\n      //   return this._updateSelectionSets(arg1);\r\n      // case \"_updateRefineSelectionSet\":\r\n      //   return this._updateRefineSelectionSet(arg1, arg2);\r\n      // case \"_updateRefineIds\":\r\n      //   return this._updateRefineIds(arg1, arg2, arg3);\r\n      // case \"_addRefineSelectionSet\":\r\n      //   return this._addRefineSelectionSet(arg1, arg2);\r\n    }\r\n    return null;\r\n  }\r\n}\r\n"]}