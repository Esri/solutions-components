{"version":3,"file":"pdf-download.js","sourceRoot":"","sources":["../../../src/components/pdf-download/pdf-download.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH,OAAO,0BAA0B,CAAC;AAClC,OAAO,KAAK,QAAQ,MAAM,qCAAqC,CAAC;AAEhE,OAAO,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AACtD,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAS,MAAM,eAAe,CAAC;AACxF,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AACjD,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AACjD,OAAO,EAAE,yBAAyB,EAAE,MAAM,oBAAoB,CAAC;AAC/D,OAAO,EAAE,iBAAiB,EAAE,MAAM,wBAAwB,CAAC;AAO3D,MAAM,OAAO,WAAW;;oBAiBH,KAAK;;;;EAmCxB,4EAA4E;EAC5E,EAAE;EACF,kBAAkB;EAClB,EAAE;EACF,4EAA4E;EAE5E,4EAA4E;EAC5E,EAAE;EACF,oBAAoB;EACpB,EAAE;EACF,4EAA4E;EAE5E;;;;;;;KAOG;EAEH,KAAK,CAAC,WAAW,CACf,GAAa,EACb,gBAAyB,EACzB,cAAc,GAAG,IAAI;IAErB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,gBAAgB,EAAE,cAAc,CAAC,CAAC;IAEhF,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC;EAC3B,CAAC;EAED;;;;;;KAMG;EAEH,KAAK,CAAC,WAAW,CACf,GAAa,EACb,gBAAyB;IAEzB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;IAEhE,MAAM,oBAAoB,GAAG,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,KAAK,CAAC;IAEzE,OAAO,SAAS,CAAC,MAAM,EAAE,oBAAoB,CAAC,CAAC;EACjD,CAAC;EAED,4EAA4E;EAC5E,EAAE;EACF,mBAAmB;EACnB,EAAE;EACF,4EAA4E;EAE5E,4EAA4E;EAC5E,EAAE;EACF,yBAAyB;EACzB,EAAE;EACF,4EAA4E;EAE5E;;KAEG;EACH,KAAK,CAAC,iBAAiB;IACrB,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC9B,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;EAC5B,CAAC;EAED;;KAEG;EACH,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MACH,sBACE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,KAAK,EAAC,EAAE,EACR,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAA,CAAC,CAAC,IAE3C,IAAI,CAAC,YAAY,EAAE,CACL,CACZ,CACR,CAAC;EACJ,CAAC;EAED,4EAA4E;EAC5E,EAAE;EACF,yBAAyB;EACzB,EAAE;EACF,4EAA4E;EAE5E;;;;;;KAMG;EACO,KAAK,CAAC,YAAY;IAC1B,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,WAAW,CAAC;MAC/B,WAAW;KACZ,CAAC,CAAC;IACH,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;EACpB,CAAC;EAED;;;;;;;KAOG;EACI,wBAAwB,CAC7B,SAAiB;IAEjB,6BAA6B;IAC7B,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;IAEnD,0GAA0G;IAC1G,iDAAiD;IACjD,IAAI,SAAS,GAAG,SAAS;OACtB,OAAO,CAAC,qBAAqB,EAAE,EAAE,CAAC;OAClC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;OACtB,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;OACtB,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;OACtB,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC;OACxB,KAAK,CAAC,GAAG,CAAC,CAAC;IAEd,gCAAgC;IAChC,SAAS,GAAG,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAE/E,OAAO,SAAS,CAAC;EACnB,CAAC;EAAA,CAAC;EAEF;;;;;;;KAOG;EACO,iBAAiB,CACzB,SAAc;IAEd,MAAM,IAAI,GAAG,SAAS,CAAC,cAAc,CAAC,oBAAoB,CAAC;IAC3D,MAAM,KAAK,GAAG,GAAG,SAAS,CAAC,cAAc,CAAC,iBAAiB,MAAM,SAAS,CAAC,cAAc,CAAC,kBAAkB,EAAE,CAAC;IAC/G,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;EAC5F,CAAC;EAED;;;;KAIG;EACO,KAAK,CAAC,gBAAgB;IAC9B,MAAM,YAAY,GAAG,MAAM,yBAAyB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC9D,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC,CAAC,CAA2B,CAAC;EACjE,CAAC;EAED;;;;;;;KAOG;EACO,KAAK,CAAC,cAAc,CAC5B,GAAa,EACb,gBAAyB,EACzB,kBAAkB,GAAG,KAAK;IAE1B,+CAA+C;IAC/C,MAAM,UAAU,GAAG,MAAM,iBAAiB,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACtE,MAAM,aAAa,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;IAEjE,2CAA2C;IAC3C,uEAAuE;IACvE,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IAEtG,6CAA6C;IAC7C,IAAI,MAAM,GAAe,aAAa,CAAC,GAAG,CACxC,iBAAiB,CAAC,EAAE;MAClB,MAAM,KAAK,GAAa,EAAE,CAAC;MAC3B,WAAW,CAAC,OAAO,CACjB,iBAAiB,CAAC,EAAE;QAClB,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,CAAC,IAAI,EAAE,CAAC;QACrF,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;UACxB,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SACvB;MACH,CAAC,CACF,CAAA;MACD,OAAO,KAAK,CAAC;IACf,CAAC,CACF;MACD,sBAAsB;OACrB,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAEnC,oBAAoB;IACpB,IAAI,gBAAgB,EAAE;MACpB,MAAM,eAAe,GAAa,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;MAC7E,MAAM,YAAY,GAAG,IAAI,GAAG,CAAC,eAAe,CAAC,CAAC;MAC9C,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,YAAY,EAC9B,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CACvC,CAAC;KACH;IAED,mBAAmB;IACnB,IAAI,kBAAkB,EAAE;MACtB,MAAM,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE,CAAC,eAAe,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;MAC9G,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;KAC7B;IAED,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;EACjC,CAAC;EAED;;;;;;KAMG;EACO,YAAY;IACpB,MAAM,CAAC,GAAQ,QAAQ,CAAC;IACxB,MAAM,aAAa,GAAG,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;MACnD,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,cAAc,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC;MAC/D,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,cAAc,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC;MAC/D,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IACvC,CAAC,CAAC,CAAC;IACH,OAAO,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;MAC7B,OAAO,CAAC,sBAAgB,KAAK,EAAE,CAAC,IAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAkB,CAAC,CAAA;IACjF,CAAC,CAAC,CAAC;EACL,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAEF","sourcesContent":["/** @license\r\n * Copyright 2022 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport \"@esri/calcite-components\";\r\nimport * as pdfUtils from \"../../assets/data/labelFormats.json\";\r\nimport PdfDownload_T9n from \"../../assets/t9n/pdf-download/resources.json\";\r\nimport { loadModules } from \"../../utils/loadModules\";\r\nimport { Component, Element, Host, h, Method, Prop, State, VNode } from \"@stencil/core\";\r\nimport { exportCSV } from \"../../utils/csvUtils\";\r\nimport { exportPDF } from \"../../utils/pdfUtils\";\r\nimport { getLocaleComponentStrings } from \"../../utils/locale\";\r\nimport { queryFeaturesByID } from \"../../utils/queryUtils\";\r\n\r\n@Component({\r\n  tag: \"pdf-download\",\r\n  styleUrl: \"pdf-download.css\",\r\n  shadow: true,\r\n})\r\nexport class PdfDownload {\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Host element access\r\n  //\r\n  //--------------------------------------------------------------------------\r\n  @Element() el: HTMLPdfDownloadElement;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * boolean: Controls the enabled/disabled state of download\r\n   */\r\n  @Prop() disabled = false;\r\n\r\n  /**\r\n   * esri/views/layers/FeatureLayerView: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html\r\n   */\r\n  @Prop() layerView: __esri.FeatureLayerView;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  State (internal)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Contains the translations for this component.\r\n   * All UI strings should be defined here.\r\n   */\r\n  @State() protected _translations: typeof PdfDownload_T9n;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * HTMLCalciteSelectElement: The html element for selecting buffer unit\r\n   */\r\n  protected _labelInfoElement: HTMLCalciteSelectElement;\r\n\r\n  /**\r\n   * intl: https://developers.arcgis.com/javascript/latest/api-reference/esri-intl.html\r\n   */\r\n  protected _intl: __esri.intl;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Watch handlers\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Methods (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Downloads csv of mailing labels for the provided list of ids\r\n   *\r\n   * @param ids List of ids to download\r\n   * @param removeDuplicates When true a single label is generated when multiple featues have a shared address value\r\n   * @param addColumnTitle Indicates if column headings should be included in output\r\n   * @returns Promise resolving when function is done\r\n   */\r\n  @Method()\r\n  async downloadCSV(\r\n    ids: number[],\r\n    removeDuplicates: boolean,\r\n    addColumnTitle = true\r\n  ): Promise<void> {\r\n    const labels = await this._prepareLabels(ids, removeDuplicates, addColumnTitle);\r\n\r\n    return exportCSV(labels);\r\n  }\r\n\r\n  /**\r\n   * Downloads pdf of mailing labels for the provided list of ids\r\n   *\r\n   * @param ids List of ids to download\r\n   * @param removeDuplicates When true a single label is generated when multiple featues have a shared address value\r\n   * @returns Promise resolving when function is done\r\n   */\r\n  @Method()\r\n  async downloadPDF(\r\n    ids: number[],\r\n    removeDuplicates: boolean\r\n  ): Promise<void> {\r\n    const labels = await this._prepareLabels(ids, removeDuplicates);\r\n\r\n    const labelPageDescription = this._labelInfoElement.selectedOption.value;\r\n\r\n    return exportPDF(labels, labelPageDescription);\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Events (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Functions (lifecycle)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * StencilJS: Called once just after the component is first connected to the DOM.\r\n   */\r\n  async componentWillLoad(): Promise<void> {\r\n    await this._getTranslations();\r\n    await this._initModules();\r\n  }\r\n\r\n  /**\r\n   * Renders the component.\r\n   */\r\n  render(): VNode {\r\n    return (\r\n      <Host>\r\n        <calcite-select\r\n          disabled={this.disabled}\r\n          label=\"\"\r\n          ref={(el) => { this._labelInfoElement = el }}\r\n        >\r\n          {this._renderItems()}\r\n        </calcite-select>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Functions (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Load esri javascript api modules\r\n   *\r\n   * @returns Promise resolving when function is done\r\n   *\r\n   * @protected\r\n   */\r\n  protected async _initModules(): Promise<void> {\r\n    const [intl] = await loadModules([\r\n      \"esri/intl\"\r\n    ]);\r\n    this._intl = intl;\r\n  }\r\n\r\n  /**\r\n   * Converts the text of a custom popup into a multiline label specification; conversion splits text into\r\n   * lines on <br>s, and removes HTML tags. It does not handle Arcade and related records.\r\n   *\r\n   * @param popupInfo Layer's popupInfo structure containing description, fieldInfos, and expressionInfos, e.g.,\r\n   * \"<div style='text-align: left;'>{NAME}<br />{STREET}<br />{CITY}, {STATE} {ZIP} <br /></div>\"\r\n   * @return Label spec\r\n   */\r\n  public _convertPopupToLabelSpec(\r\n    popupInfo: string\r\n  ): string[] {\r\n    // Replace <br>, <br/> with |\r\n    popupInfo = popupInfo.replace(/<br\\s*\\/?>/gi, \"|\");\r\n\r\n    // Remove remaining HTML tags, replace 0xA0 that popup uses for spaces, replace some char representations,\r\n    // and split the label back into individual lines\r\n    let labelSpec = popupInfo\r\n      .replace(/<[\\s.]*[^<>]*\\/?>/gi, \"\")\r\n      .replace(/\\xA0/gi, \" \")\r\n      .replace(/&lt;/gi, \"<\")\r\n      .replace(/&gt;/gi, \">\")\r\n      .replace(/&nbsp;/gi, \" \")\r\n      .split(\"|\");\r\n\r\n    // Trim lines and remove empties\r\n    labelSpec = labelSpec.map(line => line.trim()).filter(line => line.length > 0);\r\n\r\n    return labelSpec;\r\n  };\r\n\r\n  /**\r\n   * Gets the formatted pdf export size text\r\n   *\r\n   * @param labelInfo current user selected label info\r\n   *\r\n   * @returns the pdf label as a string\r\n   * @protected\r\n   */\r\n  protected _getLabelSizeText(\r\n    labelInfo: any\r\n  ): string {\r\n    const lNum = labelInfo.descriptionPDF.labelsPerPageDisplay;\r\n    const lSize = `${labelInfo.descriptionPDF.labelWidthDisplay} x ${labelInfo.descriptionPDF.labelHeightDisplay}`;\r\n    return this._translations.pdfLabel.replace(\"{{n}}\", lNum).replace(\"{{labelSize}}\", lSize);\r\n  }\r\n\r\n  /**\r\n   * Fetches the component's translations\r\n   *\r\n   * @protected\r\n   */\r\n  protected async _getTranslations(): Promise<void> {\r\n    const translations = await getLocaleComponentStrings(this.el);\r\n    this._translations = translations[0] as typeof PdfDownload_T9n;\r\n  }\r\n\r\n  /**\r\n   * Creates labels from items.\r\n  *\r\n  * @param ids List of ids to download\r\n  * @param removeDuplicates When true a single label is generated when multiple featues have a shared address value\r\n  * @param includeHeaderNames Add the label format at the front of the list of generated labels\r\n  * @returns Promise resolving when function is done\r\n   */\r\n  protected async _prepareLabels(\r\n    ids: number[],\r\n    removeDuplicates: boolean,\r\n    includeHeaderNames = false\r\n  ): Promise<string[][]> {\r\n    // Get the attributes of the features to export\r\n    const featureSet = await queryFeaturesByID(ids, this.layerView.layer);\r\n    const featuresAttrs = featureSet.features.map(f => f.attributes);\r\n\r\n    // What data fields are used in the labels?\r\n    // Example labelFormat: ['{NAME}', '{STREET}', '{CITY}, {STATE} {ZIP}']\r\n    const labelFormat = this._convertPopupToLabelSpec(this.layerView.layer.popupTemplate.content[0].text);\r\n\r\n    // Convert attributes into an array of labels\r\n    let labels: string[][] = featuresAttrs.map(\r\n      featureAttributes => {\r\n        const label: string[] = [];\r\n        labelFormat.forEach(\r\n          labelLineTemplate => {\r\n            const labelLine = this._intl.substitute(labelLineTemplate, featureAttributes).trim();\r\n            if (labelLine.length > 0) {\r\n              label.push(labelLine);\r\n            }\r\n          }\r\n        )\r\n        return label;\r\n      }\r\n    )\r\n    // Remove empty labels\r\n    .filter(label => label.length > 0);\r\n\r\n    // Remove duplicates\r\n    if (removeDuplicates) {\r\n      const labelsAsStrings: string[] = labels.map(label => JSON.stringify(label));\r\n      const uniqueLabels = new Set(labelsAsStrings);\r\n      labels = Array.from(uniqueLabels,\r\n        labelString => JSON.parse(labelString)\r\n      );\r\n    }\r\n\r\n    // Add header names\r\n    if (includeHeaderNames) {\r\n      const headerNames = labelFormat.map(labelFormatLine => labelFormatLine.replace(/\\{/g, \"\").replace(/\\}/g, \"\"));\r\n      labels.unshift(headerNames);\r\n    }\r\n\r\n    return Promise.resolve(labels);\r\n  }\r\n\r\n  /**\r\n   * Renders the pdf export size options\r\n   *\r\n   * @returns Node array of size options\r\n   *\r\n   * @protected\r\n   */\r\n  protected _renderItems(): VNode[] {\r\n    const s: any = pdfUtils;\r\n    const sortedPdfIndo = (s.default || s).sort((a, b) => {\r\n      const _a = parseInt(a.descriptionPDF.labelsPerPageDisplay, 10);\r\n      const _b = parseInt(b.descriptionPDF.labelsPerPageDisplay, 10);\r\n      return _a < _b ? -1 : _a > _b ? 1 : 0\r\n    });\r\n    return sortedPdfIndo.map((l) => {\r\n      return (<calcite-option value={l}>{this._getLabelSizeText(l)}</calcite-option>)\r\n    });\r\n  }\r\n\r\n}\r\n"]}