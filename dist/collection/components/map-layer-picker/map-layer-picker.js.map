{"version":3,"file":"map-layer-picker.js","sourceRoot":"","sources":["../../../src/components/map-layer-picker/map-layer-picker.tsx"],"names":[],"mappings":"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","sourcesContent":["/** @license\r\n * Copyright 2022 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { Component, Element, Event, EventEmitter, Host, h, Prop, State, VNode, Watch } from \"@stencil/core\";\r\nimport { getMapLayerHash, getMapLayerIds } from \"../../utils/mapViewUtils\";\r\nimport { SelectionMode } from \"../../utils/interfaces\";\r\nimport state from \"../../utils/publicNotificationStore\";\r\n\r\n@Component({\r\n  tag: \"map-layer-picker\",\r\n  styleUrl: \"map-layer-picker.css\",\r\n  shadow: false,\r\n})\r\nexport class MapLayerPicker {\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Host element access\r\n  //\r\n  //--------------------------------------------------------------------------\r\n  @Element() el: HTMLMapLayerPickerElement;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * string[]: Optional list of enabled layer ids\r\n   *  If empty all layers will be available\r\n   */\r\n  @Prop() enabledLayerIds: string[] = [];\r\n\r\n  /**\r\n   * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html\r\n   */\r\n  @Prop() mapView: __esri.MapView;\r\n\r\n  /**\r\n   * string[]: list of layer ids that have been selected by the end user\r\n   */\r\n  @Prop({ mutable: true }) selectedLayerIds: string[] = [];\r\n\r\n  /**\r\n   * SelectionMode: \"single\" | \"multi\"\r\n   *\r\n   * Should the component support selection against a single layer or multiple layers.\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) selectionMode: SelectionMode = \"single\";\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  State (internal)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * string[]: list of layer ids from the map\r\n   */\r\n  @State() layerIds: string[] = [];\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * HTMLCalciteSelectElement: The html element for selecting layers\r\n   */\r\n  protected _layerElement: HTMLCalciteSelectElement;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Watch handlers\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Called each time the mapView prop is changed.\r\n   *\r\n   */\r\n  @Watch(\"mapView\")\r\n  async watchStateHandler(newValue: boolean, oldValue: boolean): Promise<void> {\r\n    if (newValue !== oldValue) {\r\n      await this._setLayers();\r\n      if (this.selectionMode === \"single\") {\r\n        this.layerSelectionChange.emit([this.layerIds[0]]);\r\n      }\r\n    }\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Methods (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Events (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Emitted on demand when a layer is selected\r\n   *\r\n   */\r\n  @Event() layerSelectionChange: EventEmitter<string[]>;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Functions (lifecycle)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * StencilJS: Called once just after the component is first connected to the DOM.\r\n   */\r\n  async componentWillLoad(): Promise<void> {\r\n    await this._setLayers();\r\n    if (this.selectionMode === \"single\" && (this.layerIds.length > 0 || this.selectedLayerIds.length === 1)) {\r\n      this.layerSelectionChange.emit(\r\n        this.selectedLayerIds.length === 1 ? [this.selectedLayerIds[0]] : [this.layerIds[0]]\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Renders the component.\r\n   */\r\n  render(): VNode {\r\n    return (\r\n      <Host>\r\n        <div class=\"map-layer-picker-container\">\r\n          <div class=\"map-layer-picker\">\r\n            {this.selectionMode === \"multi\" ? this._getCombobox() : this._getSelect()}\r\n          </div>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Functions (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Create a list of layers from the map\r\n   *\r\n   * Used for selecting a single layer.\r\n   *\r\n   * @returns Calcite Select component with the ids of the layers from the map\r\n   */\r\n  _getSelect(): VNode {\r\n    return (\r\n      <calcite-select\r\n        label=\"\"\r\n        onCalciteSelectChange={(evt) => this._layerSelectionChange(evt)}\r\n        ref={(el) => { this._layerElement = el }}\r\n      >\r\n        {this._addMapLayersOptions()}\r\n      </calcite-select>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create a list of layer ids from the map\r\n   *\r\n   * Used for selecting multiple layers\r\n   *\r\n   * @returns Calcite ComboBox component with the ids of the layers from the map\r\n   */\r\n  _getCombobox(): VNode {\r\n    return (\r\n      <calcite-combobox\r\n        label=\"\"\r\n        onCalciteComboboxChange={(evt) => this._layerSelectionChange(evt)}\r\n        selection-mode={this.selectionMode}\r\n      >\r\n        {this._addMapLayersOptions()}\r\n      </calcite-combobox>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Hydrate a select or combobox component with the ids of the layers in the map\r\n   *\r\n   * @returns Array of ComboBox items or Select options for the ids of the layers\r\n   */\r\n  _addMapLayersOptions(): VNode[] {\r\n    return this.layerIds.reduce((prev, cur) => {\r\n      if (state.managedLayers.indexOf(state.layerNameHash[cur]) < 0 && (this.enabledLayerIds.length > 0 ? this.enabledLayerIds.indexOf(cur) > -1 : true)) {\r\n        prev.push(\r\n          this.selectionMode === \"multi\" && this.selectedLayerIds.indexOf(cur) > -1 ?\r\n            (<calcite-combobox-item selected textLabel={state.layerNameHash[cur]} value={cur} />) :\r\n            this.selectionMode === \"multi\" ?\r\n              (<calcite-combobox-item textLabel={state.layerNameHash[cur]} value={cur} />) :\r\n              this.selectedLayerIds.indexOf(cur) > -1 ?\r\n                (<calcite-option label={state.layerNameHash[cur]} selected={true} value={cur} />) :\r\n                (<calcite-option label={state.layerNameHash[cur]} value={cur} />)\r\n        );\r\n      }\r\n      return prev;\r\n    }, []);\r\n  }\r\n\r\n  /**\r\n   * Fetch the ids of the layers from the map\r\n   *\r\n   * @returns Promise when the operation has completed\r\n   */\r\n  async _setLayers(): Promise<void> {\r\n    if (this.mapView) {\r\n      const mapLayerIds = await getMapLayerIds(this.mapView);\r\n      this.layerIds = mapLayerIds.filter(n => this.enabledLayerIds?.length > 0 ? this.enabledLayerIds.indexOf(n) > -1 : true);\r\n      await this._initLayerHashState();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a layer id:title hash for layer name display\r\n   *\r\n   * @returns Promise when the operation has completed\r\n   */\r\n  protected async _initLayerHashState(): Promise<void> {\r\n    if (this.mapView) {\r\n      state.layerNameHash = await getMapLayerHash(this.mapView);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch the ids of the layers from the map\r\n   *\r\n   * @returns Promise when the operation has completed\r\n   */\r\n  _layerSelectionChange(evt: CustomEvent): void {\r\n    this.selectedLayerIds = this.selectionMode === \"single\" ?\r\n      [this._layerElement.value] : evt.detail?.selectedItems.map(\r\n        (item: HTMLCalciteComboboxItemElement) => {\r\n          return item.value;\r\n        }\r\n      ) || [];\r\n    this.layerSelectionChange.emit(this.selectedLayerIds);\r\n  }\r\n}\r\n"]}