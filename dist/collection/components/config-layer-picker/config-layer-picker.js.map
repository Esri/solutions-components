{"version":3,"file":"config-layer-picker.js","sourceRoot":"","sources":["../../../src/components/config-layer-picker/config-layer-picker.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAS,KAAK,EAAE,MAAM,eAAe,CAAC;AAE/F,OAAO,EAAE,yBAAyB,EAAE,MAAM,oBAAoB,CAAC;AAC/D,OAAO,EAAE,gBAAgB,EAAE,MAAM,0BAA0B,CAAC;AAO5D,MAAM,OAAO,iBAAiB;;0BAkBc,IAAI;uBAMxB,EAAE;;uBAgBS,EAAE;;;EAmBnC,4EAA4E;EAC5E,EAAE;EACF,kBAAkB;EAClB,EAAE;EACF,4EAA4E;EAE5E;;;KAGG;EAEH,KAAK,CAAC,iBAAiB;IACrB,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;EAC1B,CAAC;EAED,4EAA4E;EAC5E,EAAE;EACF,oBAAoB;EACpB,EAAE;EACF,4EAA4E;EAE5E;;;;KAIG;EAEH,KAAK,CAAC,aAAa;IACjB,OAAO,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC;MAChD,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;EACpD,CAAC;EAED,4EAA4E;EAC5E,EAAE;EACF,mBAAmB;EACnB,EAAE;EACF,4EAA4E;EAE5E,4EAA4E;EAC5E,EAAE;EACF,yBAAyB;EACzB,EAAE;EACF,4EAA4E;EAE5E;;;;KAIG;EACH,KAAK,CAAC,iBAAiB;IACrB,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;IACxB,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;EAChC,CAAC;EAED;;KAEG;EACH,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MACH;QACE,WAAK,KAAK,EAAC,qBAAqB;UAC9B,qBAAe,KAAK,EAAC,eAAe,IACjC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,aAAa,CAAC,WAAW,CACrC,CACZ;QACN,WAAK,KAAK,EAAC,wBAAwB;UACjC,wBACE,KAAK,EAAC,EAAE,EACR,kBAAkB,EAAC,OAAO,EAC1B,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC,CAAC,CAAC,EACtC,aAAa,EAAC,UAAU,IAEvB,IAAI,CAAC,iBAAiB,EAAE,CACR,CACf,CACF,CACD,CACR,CAAC;EACJ,CAAC;EAED,4EAA4E;EAC5E,EAAE;EACF,yBAAyB;EACzB,EAAE;EACF,4EAA4E;EAE5E,iBAAiB;IACf,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CACrD,6BAAuB,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,GAAI,CACxD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;EACV,CAAC;EAED;;;;KAIG;EACH,KAAK,CAAC,UAAU;IACd,IAAI,IAAI,CAAC,OAAO,EAAE;MAChB,IAAI,CAAC,WAAW,GAAG,MAAM,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACzD;EACH,CAAC;EAED;;;;;KAKG;EACO,KAAK,CAAC,gBAAgB;IAC9B,MAAM,QAAQ,GAAG,MAAM,yBAAyB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC1D,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,CAAC,CAAiC,CAAC;EACnE,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["/** @license\r\n * Copyright 2022 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { Component, Element, Host, h, Method, Prop, State, VNode, Watch } from '@stencil/core';\r\nimport ConfigLayerPicker_T9n from \"../../assets/t9n/config-layer-picker/resources.json\";\r\nimport { getLocaleComponentStrings } from \"../../utils/locale\";\r\nimport { getMapLayerNames } from \"../../utils/mapViewUtils\";\r\n\r\n@Component({\r\n  tag: 'config-layer-picker',\r\n  styleUrl: 'config-layer-picker.css',\r\n  shadow: true,\r\n})\r\nexport class ConfigLayerPicker {\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Host element access\r\n  //\r\n  //--------------------------------------------------------------------------\r\n  @Element() el: HTMLConfigLayerPickerElement;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * boolean: All checkboxes checked state will be set with this value on first render.\r\n   * Default is true\r\n   */\r\n  @Prop({ reflect: true }) defaultChecked = true;\r\n\r\n  /**\r\n   * string: Value to be shown above the check list\r\n   * Allows this to support multiple sets of layers.\r\n   */\r\n  @Prop() instruction = \"\";\r\n\r\n  /**\r\n   * esri/views/View: https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html\r\n   */\r\n  @Prop() mapView: __esri.MapView;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  State (internal)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * string[]: list of layer names from the map\r\n   */\r\n  @State() _layerNames: string[] = [];\r\n\r\n  /**\r\n   * Contains the translations for this component.\r\n   * All UI strings should be defined here.\r\n   */\r\n  @State() _translations: typeof ConfigLayerPicker_T9n;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * HTMLCheckListElement: The check list element\r\n   */\r\n  protected _checkList: HTMLCalciteComboboxElement;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Watch handlers\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Called each time the mapView prop is changed.\r\n   *\r\n   */\r\n  @Watch(\"mapView\")\r\n  async watchStateHandler(): Promise<void> {\r\n    await this._setLayers();\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Methods (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Returns a list of layers that have been selected\r\n   *\r\n   * @returns Promise with a list of layer names to use\r\n   */\r\n  @Method()\r\n  async getConfigInfo(): Promise<string[]> {\r\n    return typeof this._checkList.value === \"string\" ?\r\n      [this._checkList.value] : this._checkList.value;\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Events (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Functions (lifecycle)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * StencilJS: Called once just after the component is first connected to the DOM.\r\n   *\r\n   * @returns Promise when complete\r\n   */\r\n  async componentWillLoad(): Promise<void> {\r\n    await this._setLayers();\r\n    await this._getTranslations();\r\n  }\r\n\r\n  /**\r\n   * Renders the component.\r\n   */\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <div>\r\n          <div class=\"padding-block-end-1\">\r\n            <calcite-label class=\"label-spacing\">\r\n              {this.instruction || this._translations.chooseLayer}\r\n            </calcite-label>\r\n          </div>\r\n          <div class=\"padding-inline-start-1\">\r\n            <calcite-combobox\r\n              label=''\r\n              overlayPositioning=\"fixed\"\r\n              ref={(el) => { this._checkList = el; }}\r\n              selectionMode=\"multiple\"\r\n            >\r\n              {this._getComboboxItems()}\r\n            </calcite-combobox>\r\n          </div>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Functions (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  _getComboboxItems(): VNode[] {\r\n    return this._layerNames ? this._layerNames.map(name => (\r\n      <calcite-combobox-item textLabel={name} value={name} />\r\n    )) : [];\r\n  }\r\n\r\n  /**\r\n   * Fetch the names of the layers from the map\r\n   *\r\n   * @returns Promise when the operation has completed\r\n   */\r\n  async _setLayers(): Promise<void> {\r\n    if (this.mapView) {\r\n      this._layerNames = await getMapLayerNames(this.mapView);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetches the component's translations\r\n   *\r\n   * @returns Promise when complete\r\n   * @protected\r\n   */\r\n  protected async _getTranslations(): Promise<void> {\r\n    const messages = await getLocaleComponentStrings(this.el);\r\n    this._translations = messages[0] as typeof ConfigLayerPicker_T9n;\r\n  }\r\n}\r\n"]}