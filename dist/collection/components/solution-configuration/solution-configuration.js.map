{"version":3,"file":"solution-configuration.js","sourceRoot":"","sources":["../../../src/components/solution-configuration/solution-configuration.tsx"],"names":[],"mappings":"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","sourcesContent":["/** @license\r\n * Copyright 2022 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { Component, Element, h, Host, Listen, Method, Prop, State, VNode, Watch } from \"@stencil/core\";\r\nimport { IInventoryItem, IItemTemplateEdit, ISolutionSpatialReferenceInfo } from \"../../utils/interfaces\";\r\nimport * as utils from \"../../utils/templates\";\r\nimport state from \"../../utils/solution-store\";\r\nimport { getProp, UserSession } from \"@esri/solution-common\";\r\nimport \"@esri/calcite-components\";\r\nimport SolutionConfiguration_T9n from \"../../assets/t9n/solution-configuration/resources.json\";\r\nimport { getLocaleComponentStrings } from \"../../utils/locale\";\r\n\r\n@Component({\r\n  tag: \"solution-configuration\",\r\n  styleUrl: \"solution-configuration.scss\",\r\n  shadow: false\r\n})\r\nexport class SolutionConfiguration {\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Host element access\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  @Element() el: HTMLSolutionConfigurationElement;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Credentials for requests, which can be a serialized UserSession\r\n   */\r\n  @Prop({ mutable: true }) authentication = new UserSession({});\r\n\r\n  @Prop({ mutable: true }) serializedAuthentication = \"\";\r\n\r\n  @Watch(\"serializedAuthentication\") async serializedAuthenticationWatchHandler(): Promise<void> {\r\n    this.authentication = this.serializedAuthentication ? UserSession.deserialize(this.serializedAuthentication) : new UserSession({});\r\n  }\r\n\r\n  /**\r\n   * Contains the current solution item id\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) solutionItemId = \"\";\r\n\r\n  @Watch(\"solutionItemId\") async valueWatchHandler(): Promise<void> {\r\n    await this._loadSolution(this.solutionItemId);\r\n  }\r\n\r\n  /**\r\n  * Used to show/hide loading indicator\r\n  */\r\n  @Prop({ mutable: true, reflect: true }) showLoading = false;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Lifecycle\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  constructor() {\r\n    if (this.serializedAuthentication) {\r\n      this.authentication = UserSession.deserialize(this.serializedAuthentication);\r\n    }\r\n\r\n    void this._loadSolution(this.solutionItemId);\r\n\r\n    window.addEventListener(\"solutionStoreHasChanges\",\r\n      (evt) => {\r\n        this._updateSaveability(\r\n          this._solutionStoreHasChanges = (evt as any).detail, this._solutionEditorHasChanges, this._solutionEditorHasErrors);\r\n      }\r\n    );\r\n    window.addEventListener(\"solutionEditorHasChanges\",\r\n      (evt) => {\r\n        this._updateSaveability(\r\n          this._solutionStoreHasChanges, this._solutionEditorHasChanges = (evt as any).detail, this._solutionEditorHasErrors);\r\n      }\r\n    );\r\n    window.addEventListener(\"solutionEditorHasErrors\",\r\n      (evt) => {\r\n        this._updateSaveability(\r\n          this._solutionStoreHasChanges, this._solutionEditorHasChanges, this._solutionEditorHasErrors = (evt as any).detail);\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * StencilJS: Called once just after the component is first connected to the DOM.\r\n   *\r\n   * @returns Promise when complete\r\n   */\r\n  async componentWillLoad(): Promise<void> {\r\n    return this._getTranslations();\r\n  }\r\n\r\n  /**\r\n   * Renders the component.\r\n   */\r\n  render(): VNode {\r\n    const wkid = getProp(state.getStoreInfo(\"spatialReferenceInfo\"), \"spatialReference\");\r\n    const hasServices: boolean = state.getStoreInfo(\"featureServices\").length > 0;\r\n\r\n    const solutionData = state.getStoreInfo(\"solutionData\");\r\n    this._solutionVariables = JSON.stringify(utils.getSolutionVariables(solutionData.templates, this._translations));\r\n    this._organizationVariables = JSON.stringify(utils.getOrganizationVariables(this._translations));\r\n\r\n    return (\r\n      <Host>\r\n        {\r\n          !this._solutionIsLoaded\r\n            ? <calcite-loader active label='' />\r\n            : null\r\n        }\r\n        <div class=\"configuration-container\">\r\n          <div class=\"configuration\">\r\n            <calcite-tabs class=\"config-tabs\">\r\n              <calcite-tab-nav slot=\"tab-nav\">\r\n                <calcite-tab-title>{this._translations.definitionTab}</calcite-tab-title>\r\n                {hasServices ?\r\n                  <calcite-tab-title>{this._translations.spatialReferenceTab}</calcite-tab-title> :\r\n                  null\r\n                }\r\n              </calcite-tab-nav>\r\n              <calcite-tab class=\"config-tab\" selected={true}>\r\n                <div class=\"config-solution\">\r\n                  <div class={this._treeOpen ? \"config-inventory\" : \"config-inventory-hide\"}>\r\n                    <solution-contents\r\n                      id=\"configInventory\"\r\n                      key={`${this.solutionItemId}-contents`}\r\n                      ref={(el) => (this._solutionContentsComponent = el)}\r\n                    />\r\n                  </div>\r\n                  <calcite-button\r\n                    appearance=\"transparent\"\r\n                    class=\"collapse-btn\"\r\n                    icon-start={this._treeOpen ? \"chevrons-left\" : \"chevrons-right\"}\r\n                    id=\"collapse-vars\"\r\n                    onClick={() => this._toggleTree()}\r\n                    scale=\"s\"\r\n                    title={this._treeOpen ? this._translations.collapse : this._translations.expand}\r\n                  />\r\n                  <div class=\"config-item\">\r\n                    <solution-item\r\n                      authentication={this.authentication}\r\n                      item-id={this._currentEditItemId}\r\n                      key={`${this.solutionItemId}-item`}\r\n                      organization-variables={this._organizationVariables}\r\n                      solution-item-id={this.solutionItemId}\r\n                      solution-variables={this._solutionVariables}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </calcite-tab>\r\n              {\r\n                hasServices\r\n                  ? <calcite-tab class=\"config-tab\">\r\n                      <div class=\"config-solution\">\r\n                        <solution-spatial-ref\r\n                          defaultWkid={wkid}\r\n                          id=\"configure-solution-spatial-ref\"\r\n                          key={`${this.solutionItemId}-spatial-ref`}\r\n                          locked={!wkid}\r\n                          services={state.getStoreInfo(\"featureServices\").map(fs => fs.name)}\r\n                        />\r\n                      </div>\r\n                    </calcite-tab>\r\n                  : null\r\n              }\r\n            </calcite-tabs>\r\n          </div>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Contains the current item we are working with\r\n   */\r\n  @State() protected _currentEditItemId = \"\";\r\n\r\n  @State() protected _organizationVariables = \"\";\r\n\r\n  @State() protected _solutionContentsComponent: HTMLSolutionContentsElement;\r\n\r\n  @State() protected _solutionIsLoaded = false;\r\n\r\n  @State() protected _solutionVariables = \"\";\r\n\r\n  /**\r\n   * Contains the hierarchy of template items for the current solution.\r\n   */\r\n  @State() protected _templateHierarchy: IInventoryItem[] = [];\r\n\r\n  /**\r\n   * Contains the _translations for this component.\r\n   * All UI strings should be defined here.\r\n   */\r\n  @State() protected _translations: typeof SolutionConfiguration_T9n;\r\n\r\n  /**\r\n   * Used to show/hide the content tree\r\n   */\r\n  @State() protected _treeOpen = true;\r\n\r\n  protected _solutionStoreHasChanges = false;\r\n\r\n  protected _solutionEditorHasChanges = false;\r\n\r\n  protected _solutionEditorHasErrors = false;\r\n\r\n  protected _canSave = false;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Event Listeners\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  @Listen(\"solutionItemSelected\", { target: \"window\" })\r\n  _solutionItemSelected(event: CustomEvent): void {\r\n    this._currentEditItemId = event.detail;\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Events\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Public Methods (async)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /*\r\n  @Method()\r\n  async getEditModels(): Promise<ISolutionItems> {\r\n    return Promise.resolve(state.items);\r\n  }\r\n  */\r\n\r\n  @Method()\r\n  async getSpatialReferenceInfo(): Promise<ISolutionSpatialReferenceInfo> {\r\n    return Promise.resolve(state.getStoreInfo(\"spatialReferenceInfo\"));\r\n  }\r\n\r\n  /*\r\n  @Method()\r\n  async getSourceTemplates(): Promise<any> {\r\n    return Promise.resolve(this._templates);\r\n  }\r\n  */\r\n\r\n  @Method()\r\n  async saveSolution(): Promise<void> {\r\n    this._solutionIsLoaded = false;\r\n    await state.saveSolution();\r\n    this._solutionIsLoaded = true;\r\n    this.solutionItemId = null;\r\n  }\r\n\r\n  @Method()\r\n  async unloadSolution(): Promise<void> {\r\n    this.solutionItemId = null;\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Private Methods\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Update the store with the initial values\r\n   *\r\n   * @param templates the solution items templates\r\n   * @param isReset (defaults to false) indicates if we are resetting the controls after save\r\n   */\r\n  /*\r\n  protected _initState(\r\n    templates: any[],\r\n    isReset = false\r\n  ): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      if (isReset) {\r\n        // clear models and state so we can refresh after save\r\n        this.modelsSet = false;\r\n        state.reset();\r\n      }\r\n      getModels(templates, this.authentication, this.solutionItemId).then(models => {\r\n        state.models = models;\r\n\r\n        state.featureServices = getFeatureServices(templates);\r\n        state.getStoreInfo(\"spatialReferenceInfo\") = getSpatialReferenceInfo(state.featureServices, this._sourceItemData);\r\n\r\n        if (isReset) {\r\n          // reset for undo/redo stack and diff editor tracking\r\n          const jsonEditors = Array.from(this.el.getElementsByTagName(\"json-editor\"));\r\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n          jsonEditors.forEach(e => void e.reset());\r\n        }\r\n\r\n        this.modelsSet = true;\r\n        resolve(true);\r\n      }, () => reject);\r\n    });\r\n  }\r\n  */\r\n\r\n  /**\r\n   * Set Props with the initial values\r\n   *\r\n   * @protected\r\n   */\r\n  protected _initProps(): void {\r\n    const solutionData = state.getStoreInfo(\"solutionData\");\r\n\r\n    this._templateHierarchy = [...utils.getInventoryItems(solutionData.templates)];\r\n\r\n    if (this._solutionContentsComponent) {\r\n      this._solutionContentsComponent.templateHierarchy = this._templateHierarchy;\r\n    }\r\n\r\n    let firstItem: IItemTemplateEdit;\r\n    if (this._templateHierarchy.length > 0) {\r\n      // Start with the first item in the contents\r\n      firstItem = state.getItemInfo(this._templateHierarchy[0].id);\r\n    }\r\n    this._currentEditItemId = firstItem ? firstItem.itemId : \"\";\r\n  }\r\n\r\n  /**\r\n   * Loads a solution.\r\n   *\r\n   * @param solutionItemId AGO id of solution to load\r\n   *\r\n   * @returns Resolved promise when task is done\r\n   *\r\n   * @protected\r\n   */\r\n  protected async _loadSolution(solutionItemId: string): Promise<void> {\r\n    if (solutionItemId) {\r\n      this._solutionIsLoaded = false;\r\n      await state.loadSolution(solutionItemId, this.authentication);\r\n      this._initProps();\r\n      this._solutionIsLoaded = true;\r\n    } else {\r\n      this._reset();\r\n    }\r\n    return Promise.resolve();\r\n  }\r\n\r\n  /**\r\n   * Resets internal variables.\r\n   *\r\n   * @protected\r\n   */\r\n  protected _reset(): void {\r\n    this._currentEditItemId = \"\";\r\n    this._organizationVariables = \"\";\r\n    this._solutionVariables = \"\";\r\n    this._templateHierarchy = [];\r\n  }\r\n\r\n  /**\r\n   * Toggle _treeOpen prop to show/hide content tree.\r\n   *\r\n   * @protected\r\n   */\r\n  protected _toggleTree(): void {\r\n    this._treeOpen = !this._treeOpen;\r\n  }\r\n\r\n  /**\r\n   * Dispatches an event indicating if the configuration is saveable or not. It's not saveable if there are no\r\n   * changes or if there's an error in the JSON editor.\r\n   *\r\n   * @param solutionStoreHasChanges Are there changes in the configuration editor's internal store?\r\n   * @param solutionEditorHasChanges Are there changes in the configuration editor's JSON editor?\r\n   * @param solutionEditorHasErrors Are there errors in the configuration editor's JSON editor?\r\n   *\r\n   * @protected\r\n   */\r\n  protected _updateSaveability(\r\n    solutionStoreHasChanges: boolean,\r\n    solutionEditorHasChanges: boolean,\r\n    solutionEditorHasErrors: boolean\r\n  ): void {\r\n    const updateSaveability = (solutionStoreHasChanges || solutionEditorHasChanges) && !solutionEditorHasErrors;\r\n\r\n    if (this._canSave !== updateSaveability) {\r\n      window.dispatchEvent(new CustomEvent(\"solutionCanSave\", {\r\n        detail: updateSaveability,\r\n        bubbles: true,\r\n        cancelable: false,\r\n        composed: true\r\n      }));\r\n    }\r\n\r\n    this._canSave = updateSaveability;\r\n  }\r\n\r\n  /**\r\n   * Save all edits from the current configuration\r\n   *\r\n   * @returns a response that will indicate success or failure and any associated messages\r\n   */\r\n  /*\r\n  protected async _save() {\r\n    const templateUpdates = await this._updateTemplates();\r\n    const data = this._setSrInfo(templateUpdates.templates);\r\n    return templateUpdates.errors.length === 0 ? save(\r\n      this.solutionItemId,\r\n      data,\r\n      state.models,\r\n      this.authentication,\r\n      this._translations\r\n    ).then(saveResult => {\r\n      // need to trigger re-render...and re-fetch\r\n      this._fetchData = true;\r\n      this.modelsSet = false;\r\n      return Promise.resolve(saveResult)\r\n    }).catch(e => Promise.reject(e)) : Promise.reject({\r\n      success: false,\r\n      message: `The following templates have errors: ${templateUpdates.errors.join(\", \")}`\r\n    } as IResponse);\r\n  }\r\n  */\r\n\r\n  /**\r\n   * Update the solutions templates based on the stored changes\r\n   *\r\n   * @returns an object that contains the updated templates as well as any errors that were found\r\n   */\r\n  /*\r\n  protected async _updateTemplates(): Promise<IUpdateTemplateResponse> {\r\n    const errors = [];\r\n    const models = await this.getEditModels();\r\n    let templates = this._updateGroupDependencies(models, this._templates);\r\n    Object.keys(models).forEach(k => {\r\n      const m = models[k];\r\n      templates = templates.map(t => {\r\n        if (t.itemId === m.itemId) {\r\n          this._setItem(t, m);\r\n          const hasDataError = this._setData(t, m);\r\n          const hasPropError = this._setProps(t, m);\r\n          if (hasDataError || hasPropError) {\r\n            errors.push(m.itemId);\r\n          }\r\n        }\r\n        return t;\r\n      });\r\n    });\r\n    errors.concat(window.monaco.editor.getModelMarkers({}));\r\n    return Promise.resolve({\r\n      templates,\r\n      errors\r\n    });\r\n  }\r\n  */\r\n\r\n  /**\r\n   * Review all models and store itemIds that should be added or removed from group dependencies\r\n   *\r\n   * @param models the corresponding models for the current templates\r\n   *\r\n   * @returns group info (an object with keys of groupIds and\r\n   * arrays of itemIds that should be added or removed from group dependencies)\r\n   */\r\n  /*\r\n  protected _getGroupInfo(\r\n    models: any\r\n  ): any {\r\n    const groupInfo = {}\r\n    Object.keys(models).forEach(k => {\r\n      const m = models[k];\r\n      if (m.shareInfo) {\r\n        const groupId = m.shareInfo.groupId;\r\n        const type = m.shareInfo.shared ? \"share\" : \"unshare\";\r\n        if (groupInfo[groupId]) {\r\n          groupInfo[groupId][type].push(m.itemId);\r\n        } else {\r\n          groupInfo[groupId] = {};\r\n          groupInfo[groupId][type] = [m.itemId];\r\n          if (m.shareInfo.shared) {\r\n            groupInfo[groupId][\"unshare\"] = [];\r\n          } else {\r\n            groupInfo[groupId][\"share\"] = [];\r\n          }\r\n        }\r\n      }\r\n    });\r\n    return groupInfo;\r\n  }\r\n  */\r\n\r\n  /**\r\n   * Updates group dependency arrays by adding or removing itemIds\r\n   *\r\n   * @param templates the current templates to update\r\n   * @param models the corresponding models for the current templates\r\n   *\r\n   * @returns updated templates array\r\n   */\r\n  /*\r\n  protected _updateGroupDependencies(\r\n    models: any,\r\n    templates: any[]\r\n  ): any[] {\r\n    const groupInfo = this._getGroupInfo(models);\r\n    Object.keys(groupInfo).forEach(k => {\r\n      templates.some(t => {\r\n        if (t.itemId === k) {\r\n          // add share items as deps\r\n          groupInfo[k].share.forEach(s => {\r\n            if (t.dependencies.indexOf(s) < 0) {\r\n              t.dependencies.push(s);\r\n            }\r\n          });\r\n\r\n          // remove unshare items from deps\r\n          groupInfo[k].unshare.forEach(s => {\r\n            const index = t.dependencies.indexOf(s);\r\n            if (index > -1) {\r\n              t.dependencies.splice(index, 1);\r\n            }\r\n          });\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      })\r\n    })\r\n    return templates;\r\n  }\r\n  */\r\n\r\n  /**\r\n   * Add group IDs to items that should be shared\r\n   * This function will update the provided template when shareInfo is available\r\n   *\r\n   * @param template the current template to update\r\n   * @param shareInfo the corresponding shareInfo from the model for the current template\r\n   *\r\n   */\r\n  /*\r\n  protected _updateItemGroups(\r\n    template: any,\r\n    shareInfo: any\r\n  ): void {\r\n    if (shareInfo) {\r\n      const groupIndex = template.groups.indexOf(shareInfo.groupId);\r\n      if (groupIndex < 0 && shareInfo.shared) {\r\n        template.groups.push(shareInfo.groupId);\r\n      }\r\n      if (groupIndex > -1 && !shareInfo.shared) {\r\n        template.groups.splice(groupIndex, 1);\r\n      }\r\n    }\r\n  }\r\n  */\r\n\r\n  /**\r\n   * Set a templates data property with changes from the models\r\n   *\r\n   * @param template the current template to update\r\n   * @param model the corresponding model for the current template (stores any user changes)\r\n   *\r\n   * @returns a boolean that indicates if any errors were detected\r\n   */\r\n  /*\r\n  protected _setData(\r\n    template: any,\r\n    model: any\r\n  ): boolean {\r\n    return this._setTemplateProp(\r\n      template,\r\n      model.dataOriginalValue,\r\n      model.dataCurrentValue,\r\n      \"data\"\r\n    );\r\n  }\r\n  */\r\n\r\n  /**\r\n   * Set a templates properties property with changes from the models\r\n   *\r\n   * @param template the current template to update\r\n   * @param model the corresponding model for the current template (stores any user changes)\r\n   *\r\n   * @returns a boolean that indicates if any errors were detected\r\n   */\r\n  /*\r\n  protected _setProps(\r\n    template: any,\r\n    model: any\r\n  ): boolean {\r\n    return this._setTemplateProp(\r\n      template,\r\n      model.propsOriginalValue,\r\n      model.propsCurrentValue,\r\n      \"properties\"\r\n    );\r\n  }\r\n  */\r\n\r\n  /**\r\n   * Generic function used to set properties or data property on a given template\r\n   *\r\n   * @param template the current template to update\r\n   * @param originValue the original value from the solution template\r\n   * @param modelValue the current value from the model (will contain any edits that have been made)\r\n   * @param path the path to the property we should update if any changes are found\r\n   *\r\n   * @returns a boolean that indicates if any errors were detected\r\n   */\r\n  /*\r\n  protected _setTemplateProp(\r\n    template: any,\r\n    originValue: any,\r\n    modelValue: any,\r\n    path: string\r\n  ): boolean {\r\n    let hasError = false;\r\n    try {\r\n      const _originValue = JSON.parse(originValue);\r\n      const _modelValue = JSON.parse(modelValue);\r\n\r\n      if (_originValue && _modelValue && (JSON.stringify(_originValue) !== JSON.stringify(_modelValue))) {\r\n        setProp(template, path, _modelValue);\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n      hasError = true;\r\n    }\r\n    return hasError;\r\n  }\r\n  */\r\n\r\n  /**\r\n   * Set a templates item property with changes from the models\r\n   *\r\n   * @param template the current template to update\r\n   * @param model the corresponding model for the current template (stores any user changes)\r\n   *\r\n   * This function will update the template argument when edits are found\r\n   */\r\n  /*\r\n  protected _setItem(\r\n    template: any,\r\n    model: any\r\n  ): void {\r\n    this._updateItemGroups(template, model.shareInfo);\r\n    if (model.updateItemValues && Object.keys(model.updateItemValues).length > 0) {\r\n      Object.keys(model.updateItemValues).forEach(k => {\r\n        template.item[k] = model.updateItemValues[k];\r\n      });\r\n    }\r\n  }\r\n  */\r\n\r\n  /**\r\n   * Set spatial reference info in the solutions data\r\n   *\r\n   * @param templates a list of item templates from the solution\r\n   *\r\n   * @returns a cloned copy of the solutions data that has been updated with spatial reference info\r\n   *\r\n   */\r\n  /*\r\n  protected _setSrInfo(\r\n    templates: any[]\r\n  ): any {\r\n    const srInfo: any = state.getStoreInfo(\"spatialReferenceInfo\");\r\n\r\n    const serviceEnabled = typeof srInfo?.services === \"undefined\" ?\r\n      false : Object.keys(srInfo.services).some(k => srInfo.services[k]);\r\n\r\n    const data = cloneObject(this._sourceItemData);\r\n    data.templates = templates;\r\n    if (srInfo && srInfo.enabled && serviceEnabled) {\r\n      const wkid = srInfo.spatialReference.wkid.toString();\r\n\r\n      const wkidParam = {\r\n        \"label\": \"Spatial Reference\",\r\n        \"default\": wkid,\r\n        \"valueType\": \"spatialReference\",\r\n        \"attributes\": {\r\n          \"required\": \"true\"\r\n        }\r\n      };\r\n\r\n      const params = getProp(data, \"params\");\r\n      const hasWkid = params && params.wkid;\r\n      setCreateProp(\r\n        data,\r\n        hasWkid ? \"params.wkid.default\" : \"params.wkid\",\r\n        hasWkid ? wkid : params ? wkidParam : wkid\r\n      );\r\n    } else if (!srInfo.enabled) {\r\n      if (getProp(data, \"params.wkid\")) {\r\n        delete (data.params.wkid);\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n  */\r\n\r\n  /**\r\n   * Fetches the component's translations\r\n   *\r\n   * @protected\r\n   */\r\n  protected async _getTranslations(): Promise<void> {\r\n    const translations = await getLocaleComponentStrings(this.el);\r\n    this._translations = translations[0] as typeof SolutionConfiguration_T9n;\r\n  }\r\n}\r\n"]}