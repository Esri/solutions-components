{"version":3,"file":"solution-organization-variables.js","sourceRoot":"","sources":["../../../src/components/solution-organization-variables/solution-organization-variables.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAgB,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAS,KAAK,EAAE,MAAM,eAAe,CAAC;AAG5G,OAAO,EAAE,yBAAyB,EAAE,MAAM,oBAAoB,CAAC;AAQ/D,MAAM,OAAO,6BAA6B;;iBAmBQ,EAAE;kCA2CuB,EAAE;;;EAzC3D,iBAAiB;IAC/B,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;EACvD,CAAC;EAED,4EAA4E;EAC5E,EAAE;EACF,aAAa;EACb,EAAE;EACF,4EAA4E;EAE5E;;KAEG;EACH,KAAK,CAAC,iBAAiB;IACrB,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC;EACjC,CAAC;EAED;;KAEG;EACH,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MACH;QACE,UAAI,KAAK,EAAC,gBAAgB,IAAE,IAAI,CAAC,aAAa,CAAC,YAAY,CAAM,CAC7D;MACN,WAAK,KAAK,EAAC,kBAAkB;QAC3B,oBAAc,EAAE,EAAC,gBAAgB,IAC9B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,sBAAsB,CAAC,CACtC,CACX,CACD,CACR,CAAC;EACJ,CAAC;EA8BD,4EAA4E;EAC5E,EAAE;EACF,0BAA0B;EAC1B,EAAE;EACF,4EAA4E;EAE5E,4EAA4E;EAC5E,EAAE;EACF,mBAAmB;EACnB,EAAE;EACF,4EAA4E;EAE5E;;;;KAIG;EACH,gBAAgB,CACd,IAAiC;IAEjC,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;MAC/B,OAAO,CACL,yBAAmB,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,KAAK,CAAC,IACxE,GAAG,CAAC,KAAK,CACQ,CACrB,CAAC;IACJ,CAAC,CAAC,CAAC;IACH,OAAO,SAAS,CAAC;EACnB,CAAC;EAED;;;;;KAKG;EACO,iBAAiB,CACzB,MAAc,EACd,KAAa;IAEb,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC;MACrC,MAAM;MACN,KAAK;KACN,CAAC,CAAC;EACL,CAAC;EAED;;;;KAIG;EACO,KAAK,CAAC,gBAAgB;IAC9B,MAAM,YAAY,GAAG,MAAM,yBAAyB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC9D,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC,CAAC,CAA6C,CAAC;EACnF,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["/** @license\r\n * Copyright 2022 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { Component, Element, Event, EventEmitter, Host, h, Prop, State, VNode, Watch } from '@stencil/core';\r\nimport { IOrganizationVariableItem } from '../../utils/interfaces';\r\nimport SolutionOrganizationVariables_T9n from '../../assets/t9n/solution-organization-variables/resources.json';\r\nimport { getLocaleComponentStrings } from '../../utils/locale';\r\n\r\n@Component({\r\n  tag: 'solution-organization-variables',\r\n  styleUrl: 'solution-organization-variables.scss',\r\n  shadow: true,\r\n})\r\n\r\nexport class SolutionOrganizationVariables {\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Host element access\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  @Element() el: HTMLSolutionOrganizationVariablesElement;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Contains the public value for this component.\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) value = \"\";\r\n\r\n  @Watch(\"value\") valueWatchHandler(): void {\r\n    this._organizationVariables = JSON.parse(this.value);\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Lifecycle\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * StencilJS: Called once just after the component is first connected to the DOM.\r\n   */\r\n  async componentWillLoad(): Promise<void> {\r\n    return this._getTranslations();\r\n  }\r\n\r\n  /**\r\n   * Renders the component.\r\n   */\r\n  render(): VNode {\r\n    return (\r\n      <Host>\r\n        <div>\r\n          <h4 class=\"org-var-header\">{this._translations.orgVariables}</h4>\r\n        </div>\r\n        <div class=\"container-border\">\r\n          <calcite-tree id=\"variable-label\">\r\n            {this._renderHierarchy(this._organizationVariables)}\r\n          </calcite-tree>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  @State() protected _organizationVariables: IOrganizationVariableItem[] = [];\r\n\r\n  /**\r\n   * Contains the translations for this component.\r\n   * All UI strings should be defined here.\r\n   */\r\n  @State() protected _translations: typeof SolutionOrganizationVariables_T9n;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Event Listeners\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Events\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  @Event() organizationVariableSelected: EventEmitter<{ itemId: string, value: string }>;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Public Methods (async)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Private Methods\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Renders the organization based variable items the user can insert at runtime\r\n   *\r\n   * @param objs a list of organization variables to render\r\n   */\r\n  _renderHierarchy(\r\n    objs: IOrganizationVariableItem[]\r\n  ): VNode[] {\r\n    const hierarchy = objs.map(obj => {\r\n      return (\r\n        <calcite-tree-item onClick={() => this._treeItemSelected(obj.id, obj.value)}>\r\n          {obj.title}\r\n        </calcite-tree-item>\r\n      );\r\n    });\r\n    return hierarchy;\r\n  }\r\n\r\n  /**\r\n   * Publishes the `organizationVariableSelected` event containing `itemId`, the id of the selected variable and the value of the variable.\r\n   *\r\n   * @param itemId Item id as reported by click event\r\n   * @param value Variable id as reported by click event\r\n   */\r\n  protected _treeItemSelected(\r\n    itemId: string,\r\n    value: string\r\n  ): void {\r\n    this.organizationVariableSelected.emit({\r\n      itemId,\r\n      value\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetches the component's translations\r\n   *\r\n   * @protected\r\n   */\r\n  protected async _getTranslations(): Promise<void> {\r\n    const translations = await getLocaleComponentStrings(this.el);\r\n    this._translations = translations[0] as typeof SolutionOrganizationVariables_T9n;\r\n  }\r\n}\r\n"]}