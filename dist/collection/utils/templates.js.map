{"version":3,"file":"templates.js","sourceRoot":"","sources":["../../src/utils/templates.ts"],"names":[],"mappings":"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","sourcesContent":["/** @license\r\n * Copyright 2022 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*\r\n | Helper functions to get required values from solutions templates\r\n*/\r\nimport {\r\n  //EUpdateType,\r\n  IInventoryItem,\r\n  //IItemDetails,\r\n  //IItemShare,\r\n  IOrganizationVariableItem,\r\n  //IResourcePath,\r\n  //SolutionModels,\r\n  //ISolutionSpatialReferenceInfo,\r\n  IVariableItem\r\n} from '../utils/interfaces';\r\nimport {\r\n  IItemTemplate\r\n} from '@esri/solution-common';\r\n\r\n//--------------------------------------------------------------------------\r\n//\r\n//  Public Functions\r\n//\r\n//--------------------------------------------------------------------------\r\n\r\n/**\r\n * Sort the solution items\r\n *\r\n * @param templates a list of item templates from the solution\r\n *\r\n * @returns a sorted list of solution items\r\n */\r\nexport function getInventoryItems(\r\n  templates: IItemTemplate[]\r\n): IInventoryItem[] {\r\n  const hierarchy = getItemHierarchy(templates);\r\n  const ids = hierarchy.reduce((prev, cur) => {\r\n    prev.push(cur.id);\r\n    return prev;\r\n  }, []);\r\n  return templates.reduce((prev, cur) => {\r\n    if (ids.indexOf(cur.itemId) > -1) {\r\n      const hierarchyItems = hierarchy.filter(hi => hi.id === cur.itemId);\r\n      prev.push(_getItemFromTemplate(cur, templates, hierarchyItems[0].dependencies));\r\n    }\r\n    return prev;\r\n  }, []);\r\n}\r\n\r\n/**\r\n * Create item hierarchy that will avoid issues from cylical dependencies\r\n *\r\n * @param templates a list of item templates from the solution\r\n *\r\n * @returns a hierarchy for item and item dependency display\r\n */\r\nexport function getItemHierarchy(\r\n  templates: IItemTemplate[]\r\n): any[] {\r\n  const hierarchy = [];\r\n\r\n  // Get the template specified by id out of a list of templates\r\n  function getTemplateInSolution(templates, id): any {\r\n    const iTemplate = templates.findIndex((template) => id === template.itemId);\r\n    return iTemplate >= 0 ? templates[iTemplate] : null;\r\n  }\r\n\r\n  // Hierarchically list the dependencies of specified node\r\n  function traceItemId(id, accumulatedHierarchy, alreadyVisitedIds = []): void {\r\n    // Get the dependencies of the node\r\n    const template = getTemplateInSolution(templates, id);\r\n    /* istanbul ignore else */\r\n    if (template) {\r\n      const templateEntry = {\r\n        id,\r\n        dependencies: []\r\n      };\r\n\r\n      // Visit each dependency, but only if this template is not in the alreadyVisitedIds list to avoid infinite loops\r\n      /* istanbul ignore else */\r\n      if (alreadyVisitedIds.indexOf(id) < 0) {\r\n        // Add dependency to alreadyVisitedIds list\r\n        alreadyVisitedIds.push(id);\r\n\r\n        template.dependencies.forEach((dependencyId) => {\r\n          // Remove dependency from list of templates to visit in the top-level loop\r\n          const iDependencyTemplate = templateItemIds.indexOf(dependencyId);\r\n          /* istanbul ignore else */\r\n          if (iDependencyTemplate >= 0) {\r\n            templateItemIds.splice(iDependencyTemplate, 1);\r\n          }\r\n\r\n          traceItemId(dependencyId, templateEntry.dependencies, alreadyVisitedIds);\r\n        });\r\n      }\r\n      accumulatedHierarchy.push(templateEntry);\r\n    }\r\n  }\r\n\r\n  // Start with top-level nodes and add in the rest of the nodes to catch cycles without top-level nodes\r\n  let templateItemIds: string[] = _getTopLevelItemIds(templates);\r\n\r\n  const otherItems = templates\r\n    .filter((template) => templateItemIds.indexOf(template.itemId) < 0) // only keep non-top-level nodes\r\n    .sort((a, b) => b.dependencies.length - a.dependencies.length); // sort so that nodes with more dependencies come first--reduces stubs\r\n\r\n  templateItemIds = templateItemIds.concat(otherItems.map((template) => template.itemId));\r\n\r\n  // Step through the list of nodes; we'll also remove nodes as we visit them\r\n  let itemId = templateItemIds.shift();\r\n  while (typeof itemId !== \"undefined\") {\r\n    traceItemId(itemId, hierarchy);\r\n    itemId = templateItemIds.shift();\r\n  }\r\n\r\n  return hierarchy;\r\n}\r\n\r\n/**\r\n * Explore the solution item templates for variables we will allow users to insert at runtime\r\n *\r\n * @param templates a list of item templates from the solution\r\n * @param translations nls translation object\r\n *\r\n * @returns a list of variables from the solution item templates\r\n */\r\nexport function getSolutionVariables(\r\n  templates: any[],\r\n  translations: any\r\n): IVariableItem[] {\r\n  const vars: IVariableItem[] = [];\r\n  templates.forEach(t => {\r\n    const item = {\r\n      id: t.itemId,\r\n      title: t.item.title || t.item.name,\r\n      type: t.type,\r\n      value: undefined,\r\n      dependencies: [{\r\n        id: t.itemId,\r\n        title: translations.itemId,\r\n        value: `{{${t.itemId}.itemId}}`,\r\n      }]\r\n    };\r\n    if (t.item.url) {\r\n      item.dependencies.push({\r\n        id: t.itemId,\r\n        title: translations.url,\r\n        value: `{{${t.itemId}.url}}`,\r\n      });\r\n    }\r\n    if (t.type === \"Feature Service\") {\r\n      // TODO need to set source service name var...\r\n      // TODO need to set soure service shape field name \"{{d05b3cf1ffcb4a4fa677627dfb18609e.name}}.Shape\"\r\n      item.dependencies.push({\r\n        id: t.itemId,\r\n        title: translations.solutionExtent,\r\n        value: `{{${t.itemId}.solutionExtent}}`,\r\n      })\r\n      _addLayersOrTables(t.properties.layers || [], item, t, translations);\r\n      _addLayersOrTables(t.properties.tables || [], item, t, translations);\r\n    }\r\n    vars.push(item);\r\n  })\r\n\r\n  return vars;\r\n}\r\n\r\n/**\r\n * Set key organization variables we will allow users to insert at runtime\r\n *\r\n * @param translations nls translation object\r\n *\r\n * @returns a list of variables for the organization\r\n */\r\nexport function getOrganizationVariables(\r\n  translations: any\r\n): IOrganizationVariableItem[] {\r\n  const orgVars: IOrganizationVariableItem[] = [{\r\n    id: \"\",\r\n    title: translations.geocodeUrl,\r\n    value: \"{{organization.helperServices.geocode:getDefaultLocatorURL}}\"\r\n  }, {\r\n    id: \"\",\r\n    title: translations.geometryUrl,\r\n    value: \"{{organization.helperServices.geometry.url}}\"\r\n  }, {\r\n    id: \"\",\r\n    title: translations.portalBaseUrl,\r\n    value: \"{{portalBaseUrl}}\"\r\n  }, {\r\n    id: \"\",\r\n    title: translations.routeUrl,\r\n    value: \"{{organization.helperServices.route.url}}\"\r\n  }, {\r\n    id: \"\",\r\n    title: translations.solutionItemExtent,\r\n    value: \"{{solutionItemExtent}}\"\r\n  }];\r\n  return orgVars;\r\n}\r\n\r\n//--------------------------------------------------------------------------\r\n//\r\n//  Private Functions\r\n//\r\n//--------------------------------------------------------------------------\r\n\r\n/**\r\n * Explore a solution item template for variables we will allow users to insert at runtime.\r\n * This function will update the item argument that is passed in with the var details.\r\n *\r\n * @param children a list of layers or tables from a template\r\n * @param item an object that store key details for a given variable\r\n * @param template one of the templates from the current solution\r\n * @param translations nls translations object\r\n *\r\n */\r\nfunction _addLayersOrTables(\r\n  children: any[],\r\n  item: any,\r\n  template: any,\r\n  translations: any\r\n): void {\r\n  children.forEach(l => {\r\n    const name = l.name && l.name.indexOf(\"||\") > -1 ? l.name.split(\"||\")[1].replace(\"}}\", \"\").trim() : l.name;\r\n\r\n    item.dependencies.push({\r\n      id: template.itemId,\r\n      title: `${name} (${translations.id})`,\r\n      value: `{{${template.itemId}.layer${l.id}.id}}`,\r\n    });\r\n    item.dependencies.push({\r\n      id: template.itemId,\r\n      title: `${name} (${translations.name})`,\r\n      value: `{{${template.itemId}.layer${l.id}.name||${name}}}`,\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Capture key details from the solution item template\r\n *\r\n * @param template one of the templates from the current solution\r\n * @param templates full list of templates\r\n * @param dependencies list of hierarchical dependencies\r\n *\r\n * @returns an IInventoryItem that is used by other components to work with this template\r\n */\r\nfunction _getItemFromTemplate(\r\n  template: any,\r\n  templates: any[],\r\n  dependencies: any[]\r\n): IInventoryItem {\r\n  return {\r\n    id: template.itemId || \"\",\r\n    title: template.item.title || \"\",\r\n    dependencies: _getDependencies(dependencies, templates),\r\n    type: template.item.type || \"\",\r\n    typeKeywords: template.item.typeKeywords || []/*,\r\n    solutionItem: {\r\n      itemId: template.itemId,\r\n      itemDetails: _getItemDetails(template.item, template.type === \"Group\"),\r\n      isResource: _getIsResource(template),\r\n      data: template.data,\r\n      properties: template.properties,\r\n      type: template.type,\r\n      groupDetails: _getGroupDetails(template, templates)\r\n    }*/\r\n  };\r\n}\r\n\r\n/**\r\n * Capture key details from the solution item template\r\n *\r\n * @param dependencies list of dependencies from a template\r\n * @param templates full list of templates\r\n *\r\n * @returns a list of IInventoryItem that are used by other components to work with the templates\r\n */\r\nfunction _getDependencies(\r\n  dependencies: any[],\r\n  templates: any[]\r\n): IInventoryItem[] {\r\n  const dependencyItems = [];\r\n  const depIds = dependencies.reduce((prev, cur) => {\r\n    prev.push(cur.id)\r\n    dependencyItems.push(cur)\r\n    return prev;\r\n  }, []);\r\n  return templates.reduce((prev, curr) => {\r\n    const i = depIds.indexOf(curr.itemId);\r\n    if (i > -1) {\r\n      prev.push(_getItemFromTemplate(curr, templates, dependencyItems[i].dependencies));\r\n    }\r\n    return prev;\r\n  }, []);\r\n}\r\n\r\n/**\r\n * Capture the key item details for a given template\r\n *\r\n * @param item the templates item\r\n * @param isGroup boolean to indicate if the item is a group\r\n * @param itemId the item id of the template\r\n *\r\n * @returns a IItemDetails object for the current item\r\n */\r\n/*\r\nfunction _getItemDetails(\r\n  item: any,\r\n  isGroup: boolean\r\n): IItemDetails {\r\n  return {\r\n    title: item.title || \"\",\r\n    snippet: item.snippet || \"\",\r\n    description: item.description || \"\",\r\n    tags: item.tags || [],\r\n    accessInformation: !isGroup ? item.accessInformation || \"\" : \"\",\r\n    licenseInfo: !isGroup ? item.licenseInfo || \"\" : \"\"\r\n  };\r\n}\r\n*/\r\n\r\n/**\r\n * Capture the key item details for a given group template\r\n *\r\n * @param template one of the templates from the current solution\r\n * @param templates full list of templates\r\n *\r\n * @returns a list of IItemShare objects\r\n */\r\n/*\r\nfunction _getGroupDetails(\r\n  template: any,\r\n  templates: any[]\r\n): IItemShare[] {\r\n  return template.type === \"Group\" ? templates.reduce((prev, cur) => {\r\n    if (cur.itemId !== template.itemId && cur.type !== \"Group\") {\r\n      prev.push({\r\n        id: cur.itemId,\r\n        title: cur.item.name || cur.item.title,\r\n        isShared: (cur.groups || []).indexOf(template.itemId) > -1,\r\n        shareItem: (cur.groups || []).indexOf(template.itemId) > -1,\r\n        type: cur.type,\r\n        typeKeywords: cur.item.typeKeywords\r\n      });\r\n    }\r\n    return prev;\r\n  }, []) : [];\r\n}\r\n*/\r\n\r\n/**\r\n * Used to understand if we are dealing with a binary object that will support upload/download\r\n *\r\n * @param template one of the templates from the current solution\r\n *\r\n * @returns true if this item supports upload/download\r\n */\r\n/*\r\nfunction _getIsResource(\r\n  template: any\r\n): boolean {\r\n  return template.type !== \"Group\" && template.resources.some(r => r.indexOf(\"_info_thumbnail\") < 0) &&\r\n    (template.data === null || JSON.stringify(template.data) === \"{}\");\r\n}\r\n*/\r\n\r\n/**\r\n * Sort the template ids based on their dependencies\r\n *\r\n * @param templates full list of templates\r\n *\r\n * @returns a list of Itop level item ids\r\n */\r\nfunction _getTopLevelItemIds(templates: IItemTemplate[]): string[] {\r\n  // Find the top-level nodes. Start with all nodes, then remove those that other nodes depend on\r\n  const topLevelItemCandidateIds = templates.map((template) => template.itemId);\r\n  templates.forEach((template) => {\r\n    (template.dependencies || []).forEach((dependencyId) => {\r\n      const iNode = topLevelItemCandidateIds.indexOf(dependencyId);\r\n      if (iNode >= 0) {\r\n        // Node is somebody's dependency, so remove the node from the list of top-level nodes\r\n        // If iNode == -1, then it's a shared dependency and it has already been removed\r\n        topLevelItemCandidateIds.splice(iNode, 1);\r\n      }\r\n    });\r\n  });\r\n  return topLevelItemCandidateIds;\r\n}\r\n"]}