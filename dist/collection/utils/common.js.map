{"version":3,"file":"common.js","sourceRoot":"","sources":["../../src/utils/common.ts"],"names":[],"mappings":"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","sourcesContent":["/** @license\r\n * Copyright 2022 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*\r\n | Helper functions from solutions-common\r\n*/\r\n\r\nimport {\r\n  convertItemResourceToStorageResource,\r\n  EFileType,\r\n  IItemUpdate,\r\n  updateItem,\r\n  UserSession,\r\n  SolutionTemplateFormatVersion\r\n} from \"@esri/solution-common\";\r\nimport { EUpdateType, IResourcePath, IResponse, ISolutionModel, ISolutionModels } from \"./interfaces\";\r\nimport {\r\n  addItemResource,\r\n  IItemResourceOptions,\r\n  removeItemResource,\r\n  updateItemResource\r\n} from \"@esri/arcgis-rest-portal\";\r\n\r\n/**\r\n * Get an array from a list of nodes\r\n *\r\n * @param nodeList list of nodes\r\n *\r\n * @returns array of nodes\r\n */\r\nexport function nodeListToArray<T extends Element>(nodeList: HTMLCollectionOf<T> | NodeListOf<T> | T[]): T[] {\r\n  return Array.isArray(nodeList) ? nodeList : Array.from(nodeList);\r\n}\r\n\r\n/**\r\n * Saves any updated templates to the current solution item\r\n *\r\n * @param templates the updated templates array\r\n * @param thumbnailurl url for the items thumbnail\r\n * @param id for the solution item\r\n * @param data the current solution items data\r\n * @param authentication credentials for the request\r\n * @param translations translated strings for messages\r\n *\r\n * @returns a promise that will resolve with a success true/false response\r\n */\r\nexport async function save(\r\n  id: string,\r\n  data: any,\r\n  models: ISolutionModels,\r\n  authentication: UserSession,\r\n  translations: any\r\n): Promise<IResponse> {\r\n\r\n  const itemInfo: IItemUpdate = { id };\r\n\r\n  const params: any = {\r\n    text: data\r\n  };\r\n\r\n  await _updateResources(id, models, data, authentication);\r\n\r\n  // TODO compare data with the source data in the model...should be able to\r\n  // understand if it has changes\r\n  // TODO...only update if has changes\r\n  const updateResults = await updateItem(\r\n    itemInfo,\r\n    authentication,\r\n    undefined,\r\n    params\r\n  );\r\n\r\n  return Promise.resolve({\r\n    success: updateResults.success,\r\n    message: updateResults.success ? translations.editsSaved : translations.saveFailed\r\n  });\r\n}\r\n\r\n/**\r\n * Updates the solutions thumbnail and data resources\r\n *\r\n * @param solutionId id for the solution\r\n * @param models the models for the solutions templates\r\n * @param data the current data object for the solution\r\n * @param authentication credentials for the request\r\n *\r\n * @returns a promise that will resolve with response results\r\n */\r\nexport async function _updateResources(\r\n  solutionId: string,\r\n  models: ISolutionModels,\r\n  data: any,\r\n  authentication: UserSession\r\n): Promise<any> {\r\n  return new Promise<any>((resolve, reject) => {\r\n    const promises = [];\r\n    Object.keys(models).forEach(itemId => {\r\n      const model: ISolutionModel = models[itemId];\r\n      promises.push(_updateThumbnailResource(\r\n        solutionId,\r\n        model,\r\n        data,\r\n        authentication\r\n      ));\r\n      _updateFileResources(\r\n        solutionId,\r\n        model,\r\n        data,\r\n        promises,\r\n        authentication\r\n      );\r\n    });\r\n    if (promises.length > 0) {\r\n      Promise.all(promises).then(resolve, reject);\r\n    } else {\r\n      resolve({success: true})\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Updates the solutions thumbnail and data resources\r\n *\r\n * @param solutionId id for the solution\r\n * @param model the model for the current solution template\r\n * @param authentication credentials for the request\r\n *\r\n * @returns a promise that will resolve with response results\r\n */\r\nfunction _updateThumbnailResource(\r\n  solutionId: string,\r\n  model: ISolutionModel,\r\n  data: any,\r\n  authentication: UserSession\r\n): Promise<any> {\r\n  return new Promise<any>((resolve, reject) => {\r\n    if (model.thumbnailNew) {\r\n      if (model.thumbnailOrigin) {\r\n        const name: string = model.thumbnailOrigin.name;\r\n\r\n        const opts: IItemResourceOptions = {\r\n          id: solutionId,\r\n          authentication,\r\n          resource: model.thumbnailNew,\r\n          name\r\n        };\r\n\r\n        const resources = model.resources.filter(r => r.endsWith(name));\r\n        if (resources.length === 1) {\r\n          const nameParts = resources[0].split(\"/\");\r\n          if (nameParts.length === 2) {\r\n            opts.prefix = nameParts[0];\r\n          }\r\n        }\r\n        updateItemResource(opts).then(resolve, reject);\r\n      } else {\r\n        // if the item does not have an origin thumb we need to add rather than update\r\n        const resourceFilePath: IResourcePath = {\r\n          type: EFileType.Thumbnail,\r\n          folder: null,\r\n          filename: model.thumbnailNew.name,\r\n          url: \"\",\r\n          blob: model.thumbnailNew,\r\n          updateType: EUpdateType.Add\r\n        };\r\n\r\n        _add(solutionId, model, data, resourceFilePath, authentication, true).then(resolve, reject);\r\n      }\r\n    } else {\r\n      resolve({success: true});\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Updates the solutions data resources\r\n *\r\n * This function will update the provided promises argument by adding add/remove/update promises\r\n *\r\n * @param solutionId id for the solution\r\n * @param model the model for the current solution template\r\n * @param data the current data object for the solution\r\n * @param promises list of add/remove/update promises\r\n * @param authentication credentials for the request\r\n */\r\nfunction _updateFileResources(\r\n  solutionId: string,\r\n  model: ISolutionModel,\r\n  data: any,\r\n  promises: Promise<any>[],\r\n  authentication: UserSession\r\n): void {\r\n  // add/remove/update resources\r\n  model.resourceFilePaths.forEach(resourceFilePath => {\r\n    switch (resourceFilePath.updateType) {\r\n      case EUpdateType.Add:\r\n        promises.push(_add(\r\n          solutionId,\r\n          model,\r\n          data,\r\n          resourceFilePath,\r\n          authentication\r\n        ));\r\n        break;\r\n\r\n      case EUpdateType.Remove:\r\n        promises.push(_remove(\r\n          solutionId,\r\n          model,\r\n          data,\r\n          resourceFilePath,\r\n          authentication\r\n        ));\r\n        break;\r\n\r\n      case EUpdateType.Update:\r\n        promises.push(_update(\r\n          solutionId,\r\n          model,\r\n          resourceFilePath,\r\n          authentication\r\n        ));\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Generates add resource request\r\n *\r\n * @param solutionId id for the solution\r\n * @param model the model for the current solution template\r\n * @param data the current data object for the solution\r\n * @param resourceFilePath resource file info\r\n * @param authentication credentials for the request\r\n *\r\n * @returns a promise that will resolve to a response with success true/false\r\n */\r\nfunction _add(\r\n  solutionId: string,\r\n  model: ISolutionModel,\r\n  data: any,\r\n  resourceFilePath: IResourcePath,\r\n  authentication: UserSession,\r\n  isThumbnail = false\r\n): Promise<any> {\r\n  return new Promise<any>((resolve, reject) => {\r\n    const storageName = convertItemResourceToStorageResource(\r\n      model.itemId + isThumbnail.toString() ? \"_info_thumbnail\" :\r\n        ((resourceFilePath.blob as File).name === resourceFilePath.filename\r\n          ? \"_info_data\"\r\n          : \"_info_dataz\"),\r\n      (resourceFilePath.blob as File).name,\r\n      SolutionTemplateFormatVersion\r\n    );\r\n\r\n    const opts: IItemResourceOptions = {\r\n      id: solutionId,\r\n      authentication,\r\n      resource: resourceFilePath.blob,\r\n      name: storageName.filename,\r\n      params: {}\r\n    };\r\n\r\n    if (storageName.folder) {\r\n      opts.params = {\r\n        resourcesPrefix: storageName.folder\r\n      };\r\n    }\r\n\r\n    addItemResource(opts).then(results => {\r\n      if (results.success) {\r\n        _updateTemplateResourcePaths(\r\n          data,\r\n          model.itemId,\r\n          EUpdateType.Add,\r\n          opts.params?.resourcesPrefix ? `${opts.params.resourcesPrefix}/${opts.name}` : opts.name,\r\n          \"\"\r\n        );\r\n      }\r\n      resolve(results);\r\n    }, reject);\r\n  });\r\n}\r\n\r\n/**\r\n * Generates add resource request\r\n *\r\n * @param solutionId id for the solution\r\n * @param model the model for the current solution template\r\n * @param data the current data object for the solution\r\n * @param resourceFilePath resource file info\r\n * @param authentication credentials for the request\r\n *\r\n * @returns a promise that will resolve to a response with success true/false\r\n */\r\nfunction _remove(\r\n  solutionId: string,\r\n  model: ISolutionModel,\r\n  data: any,\r\n  resourceFilePath: IResourcePath,\r\n  authentication: UserSession\r\n): Promise<any> {\r\n  return new Promise<any>((resolve, reject) => {\r\n    const name: string = resourceFilePath.filename;\r\n    const resources = model.resources.filter(r => r.endsWith(name));\r\n    if (resources.length > 0) {\r\n      const opts: IItemResourceOptions = {\r\n        id: solutionId,\r\n        authentication,\r\n        resource: resources[0]\r\n      };\r\n      removeItemResource(opts).then(results => {\r\n        if (results.success) {\r\n          _updateTemplateResourcePaths(\r\n            data,\r\n            model.itemId,\r\n            EUpdateType.Remove,\r\n            resources[0],\r\n            \"\"\r\n          );\r\n        }\r\n        resolve(results);\r\n      }, reject);\r\n    } else {\r\n      resolve({ success: false })\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Generates update resource request\r\n *\r\n * @param solutionId id for the solution\r\n * @param model the model for the current solution template\r\n * @param resourceFilePath resource file info\r\n * @param authentication credentials for the request\r\n *\r\n * @returns a promise that will resolve to a response with success true/false\r\n */\r\nfunction _update(\r\n  solutionId: string,\r\n  model: ISolutionModel,\r\n  resourceFilePath: IResourcePath,\r\n  authentication: UserSession\r\n): Promise<any> {\r\n  const sourceFileName: string = resourceFilePath.sourceFileName;\r\n\r\n  const opts: IItemResourceOptions = {\r\n    id: solutionId,\r\n    authentication,\r\n    resource: resourceFilePath.blob,\r\n    name: sourceFileName\r\n  };\r\n\r\n  const resources = model.resources.filter(r => r.endsWith(sourceFileName));\r\n  if (resources.length === 1) {\r\n    const nameParts = resources[0].split(\"/\");\r\n    if (nameParts.length === 2) {\r\n      opts.prefix = nameParts[0];\r\n    }\r\n  }\r\n\r\n  return updateItemResource(opts);\r\n}\r\n\r\n/**\r\n * Update the resources paths for a given template\r\n *\r\n * This function will update the provided data argument with any new or removed resource paths\r\n *\r\n * @param data the current data object for the solution\r\n * @param id the id of the current template\r\n * @param updateType add/update/remove\r\n * @param path the resource prefix/name\r\n * @param sourceFileName from the current resourceFilePath\r\n *\r\n */\r\nfunction _updateTemplateResourcePaths(\r\n  data: any,\r\n  id: string,\r\n  updateType: EUpdateType,\r\n  path: string,\r\n  sourceFileName: string\r\n): void {\r\n  data.templates = data.templates.map(t => {\r\n    if (t.itemId === id) {\r\n      switch (updateType) {\r\n        case EUpdateType.Add:\r\n          t.resources.push(path);\r\n          break;\r\n        case EUpdateType.Update:\r\n          t.resources = t.resources.filter(r => r.indexOf(sourceFileName) < 0);\r\n          t.resources.push(path);\r\n          break;\r\n        case EUpdateType.Remove:\r\n          t.resources = t.resources.filter(r => r.indexOf(path) < 0);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    return t;\r\n  })\r\n}"]}