{"version":3,"file":"mapViewUtils.js","sourceRoot":"","sources":["../../src/utils/mapViewUtils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH,OAAO,EAAE,WAAW,EAAE,MAAM,cAAc,CAAC;AAE3C;;;;;;;GAOG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB,CACpC,OAAuB;EAEvB,IAAI,UAAU,GAAG,EAAE,CAAC;EACpB,MAAM,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE;IACtB,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;MAClD,OAAO,CAAC,CAAC,KAAK,CAAC;IACjB,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,CAAC;EACH,OAAO,UAAU,CAAC;AACpB,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,CAAC,KAAK,UAAU,eAAe,CACnC,OAAuB,EACvB,KAAa;EAEb,MAAM,KAAK,GAAG,MAAM,WAAW,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;EAChD,OAAO,KAAK,CAAC,CAAC,CAAC,MAAM,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;AAChE,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,CAAC,KAAK,UAAU,WAAW,CAC/B,OAAuB,EACvB,KAAa;EAEb,IAAI,MAAM,GAAG,EAAE,CAAC;EAChB,MAAM,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE;IACtB,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE;MACjD,OAAO,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC;IAC3B,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,CAAC;EACH,OAAO,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;AACnD,CAAC;AAED;;;;;;;;;;GAUG;AACH,MAAM,CAAC,KAAK,UAAU,iBAAiB,CACrC,GAAa,EACb,SAAkC,EAClC,OAAuB,EACvB,YAAY,GAAG,KAAK;EAEpB,IAAI,YAAY,EAAE;IAChB,MAAM,aAAa,CAAC,GAAG,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;GACrD;EACD,OAAO,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;AAClC,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,CAAC,KAAK,UAAU,cAAc,CAClC,GAAa,EACb,SAAkC;EAElC,MAAM,aAAa,GAAG;IACpB,SAAS,EAAE,GAAG;GACS,CAAC;EAC1B,SAAS,CAAC,aAAa,GAAG;IACxB,MAAM,EAAE,aAAa;IACrB,cAAc,EAAE,cAAc;IAC9B,cAAc,EAAE,WAAW;GACJ,CAAC;EAE1B,UAAU,CAAC,GAAG,EAAE;IACd,SAAS,CAAC,aAAa,GAAG,SAAS,CAAC;EACtC,CAAC,EAAE,IAAI,CAAC,CAAC;AACX,CAAC;AAED;;;;;;;;;;GAUG;AACH,MAAM,CAAC,KAAK,UAAU,aAAa,CACjC,GAAa,EACb,SAAkC,EAClC,OAAuB,EACvB,aAAa,GAAG,IAAI;EAEpB,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,GAAG,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC;EACvD,MAAM,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;EAClC,IAAI,aAAa,EAAE;IACjB,MAAM,cAAc,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;GACtC;AACH,CAAC","sourcesContent":["/** @license\r\n * Copyright 2022 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { queryExtent } from \"./queryUtils\";\r\n\r\n/**\r\n * Gets the layer names from the current map\r\n * \r\n * @param mapView the map view to fetch the layer names from\r\n *\r\n * @returns Promise resolving with an array of layer names\r\n *\r\n */\r\nexport async function getMapLayerNames(\r\n  mapView: __esri.MapView\r\n): Promise<string[]> {\r\n  let layerNames = [];\r\n  await mapView.when(() => {\r\n    layerNames = mapView.map.layers.toArray().map((l) => {\r\n      return l.title;\r\n    });\r\n  });\r\n  return layerNames;\r\n}\r\n\r\n/**\r\n * Get a layer view by title\r\n * \r\n * @param mapView the map view to fetch the layer from\r\n * @param title the title if the layer to fetch\r\n *\r\n * @returns Promise resolving with the fetched layer view\r\n *\r\n */\r\nexport async function getMapLayerView(\r\n  mapView: __esri.MapView,\r\n  title: string\r\n): Promise<__esri.FeatureLayerView> {\r\n  const layer = await getMapLayer(mapView, title);\r\n  return layer ? await mapView.whenLayerView(layer) : undefined;\r\n}\r\n\r\n/**\r\n * Get a layer by title\r\n * \r\n * @param mapView the map view to fetch the layer from\r\n * @param title the title if the layer to fetch\r\n *\r\n * @returns Promise resolving with the fetched layer\r\n *\r\n */\r\nexport async function getMapLayer(\r\n  mapView: __esri.MapView,\r\n  title: string\r\n): Promise<__esri.FeatureLayer> {\r\n  let layers = [];\r\n  await mapView.when(() => {\r\n    layers = mapView.map.layers.toArray().filter((l) => {\r\n      return l.title === title;\r\n    });\r\n  });\r\n  return layers.length > 0 ? layers[0] : undefined;\r\n}\r\n\r\n/**\r\n * Highlight features by OID\r\n * \r\n * @param ids the OIDs from the layer to highlight\r\n * @param layerView the layer view to highlight\r\n * @param mapView the map view used if updateExtent is true\r\n * @param updateExtent optional (default false) boolean to indicate if we should zoom to the extent\r\n *\r\n * @returns Promise resolving with the highlight handle\r\n *\r\n */\r\nexport async function highlightFeatures(\r\n  ids: number[],\r\n  layerView: __esri.FeatureLayerView,\r\n  mapView: __esri.MapView,\r\n  updateExtent = false\r\n): Promise<__esri.Handle> {\r\n  if (updateExtent) {\r\n    await goToSelection(ids, layerView, mapView, false);\r\n  }\r\n  return layerView.highlight(ids);\r\n}\r\n\r\n/**\r\n * Flash features by OID\r\n * \r\n * @param ids the OIDs from the layer to highlight\r\n * @param layerView the layer view to highlight\r\n *\r\n * @returns Promise resolving when the operation is complete\r\n *\r\n */\r\nexport async function flashSelection(\r\n  ids: number[],\r\n  layerView: __esri.FeatureLayerView\r\n): Promise<void> {\r\n  const featureFilter = {\r\n    objectIds: ids\r\n  } as __esri.FeatureFilter;\r\n  layerView.featureEffect = {\r\n    filter: featureFilter,\r\n    includedEffect: \"invert(100%)\",\r\n    excludedEffect: \"blur(5px)\"\r\n  } as __esri.FeatureEffect;\r\n\r\n  setTimeout(() => {\r\n    layerView.featureEffect = undefined;\r\n  }, 1300);\r\n}\r\n\r\n/**\r\n * Zoom to features based on OID\r\n * \r\n * @param ids the OIDs from the layer to go to\r\n * @param layerView the layer view that contains the OIDs\r\n * @param mapView the map view to show the extent change\r\n * @param flashFeatures optional (default true) boolean to indicate if we should flash the features\r\n * \r\n * @returns Promise resolving when the operation is complete\r\n *\r\n */\r\nexport async function goToSelection(\r\n  ids: number[],\r\n  layerView: __esri.FeatureLayerView,\r\n  mapView: __esri.MapView,\r\n  flashFeatures = true\r\n): Promise<void> {\r\n  const result = await queryExtent(ids, layerView.layer);\r\n  await mapView.goTo(result.extent);\r\n  if (flashFeatures) {\r\n    await flashSelection(ids, layerView);\r\n  }\r\n}\r\n"]}