{"version":3,"file":"pciUtils.js","sourceRoot":"","sources":["../../src/utils/pciUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/** @license\r\n * Copyright 2022 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * Effect of the distresses on ride quality.\r\n *\r\n * L - Low. Individual bumps or settlements, or both, cause the vehicle to bounce slightly,\r\n * but create little discomfort.\r\n *\r\n * M - Medium. Individual bumps or settlements, or both, cause the vehicle to bounce significantly,\r\n * creating some discomfort.\r\n *\r\n * H - High. Individual bumps or settlements, or both, cause the vehicle to bounce excessively,\r\n * creating substantial discomfort, safety hazard, or high potential vehicle damage.\r\n *\r\n * @returns Promise resolving when function is done\r\n *\r\n */\r\nexport enum ESeverity {\r\n  H = \"H\",\r\n  M = \"M\",\r\n  L = \"L\"\r\n}\r\n\r\n/**\r\n * Type of distress as defined by ASTM standard\r\n *\r\n */\r\nexport enum EDistressType {\r\n  ALLIGATOR_CRACKING = 1,\r\n  BLEEDING,\r\n  BLOCK_CRACKING,\r\n  BUMPS_SAGS,\r\n  CORRUGATION,\r\n  DEPRESSION,\r\n  EDGE_CRACKING,\r\n  REFLECTION_CRACKING,\r\n  LANE_SHOULDER_DROP_OFF,\r\n  LONG_TRANS_CRACKING,\r\n  PATCHING_UTIL_CUT_PATCHING,\r\n  POLISHED_AGGREGATE,\r\n  POTHOLES,\r\n  RAILROAD_CROSSING,\r\n  RUTTING,\r\n  SHOVING,\r\n  SLIPPAGE_CRACKING,\r\n  SWELL,\r\n  RAVELING,\r\n  WEATHERING\r\n}\r\n\r\n/**\r\n * Values to use for multi-severity case corrections\r\n *\r\n */\r\nexport interface ICorrection {\r\n  pci: number;\r\n  dv: number[];\r\n}\r\n\r\n/**\r\n * Calculate the deduct value for the given distress.\r\n *\r\n * @param type expects 1-19 as a string\r\n * @param severity expects \"H\" | \"M\" | \"L\"\r\n * @param density the calculated percent density ralative to the total sample area\r\n * @param showDebugging used to control debugging messages to show the various\r\n * calculations a required steps along the way.\r\n * The main reason this is optional is that it provides no value when used within\r\n * Survey123 as we have nowhere to see the messages and I wasn't sure if writing to a\r\n * console in that context could have any negative side effects.\r\n *\r\n * @returns pipe delimited string: type|severity|roundedDeductValue|density\r\n */\r\nexport function calculateDeductValue(\r\n  type: string,\r\n  severity: string,\r\n  density: string,\r\n  showDebugging = false\r\n): string {\r\n  // When called from survey123 we will get the args as strings\r\n  // not sure if they could be numbers so a little extra conversion to make sure with the density\r\n  const _type = parseInt(type);\r\n  const _severity = ESeverity[severity];\r\n  const _density = parseFloat(density.toString());\r\n\r\n  // When called from survey123 all distress types and severities will be passed in\r\n  // We only need to calculate the deduct value if we have a valid density\r\n  if (Number.isNaN(_density) || _density === 0) {\r\n    return \"\";\r\n  }\r\n\r\n  const _showDebugging = showDebugging === true || showDebugging.toString().toLowerCase() === \"true\";\r\n\r\n  let calc;\r\n  switch (_type) {\r\n    case EDistressType.ALLIGATOR_CRACKING:\r\n      calc = _calcAlligator;\r\n      break;\r\n    case EDistressType.BLEEDING:\r\n      calc = _calcBleeding;\r\n      break;\r\n    case EDistressType.BLOCK_CRACKING:\r\n      calc = _calcBlockCracking;\r\n      break;\r\n    case EDistressType.BUMPS_SAGS:\r\n      calc = _calcBumpsSags;\r\n      break;\r\n    case EDistressType.CORRUGATION:\r\n      calc = _calcCorrugation;\r\n      break;\r\n    case EDistressType.DEPRESSION:\r\n      calc = _calcDepression;\r\n      break;\r\n    case EDistressType.EDGE_CRACKING:\r\n      calc = _calcEdgeCracking;\r\n      break;\r\n    case EDistressType.REFLECTION_CRACKING:\r\n      calc = _calcReflectionCracking;\r\n      break;\r\n    case EDistressType.LANE_SHOULDER_DROP_OFF:\r\n      calc = _calcLaneShoulderDropOff;\r\n      break;\r\n    case EDistressType.LONG_TRANS_CRACKING:\r\n      calc = _calcLongTransCracking;\r\n      break;\r\n    case EDistressType.PATCHING_UTIL_CUT_PATCHING:\r\n      calc = _calcPatchingUtilCutPatching;\r\n      break;\r\n    case EDistressType.POLISHED_AGGREGATE:\r\n      calc = _calcPolishedAggregate;\r\n      break;\r\n    case EDistressType.POTHOLES:\r\n      calc = _calcPotholes;\r\n      break;\r\n    case EDistressType.RAILROAD_CROSSING:\r\n      calc = _calcRailroadCrossing;\r\n      break;\r\n    case EDistressType.RUTTING:\r\n      calc = _calcRutting;\r\n      break;\r\n    case EDistressType.SHOVING:\r\n      calc = _calcShoving;\r\n      break;\r\n    case EDistressType.SLIPPAGE_CRACKING:\r\n      calc = _calcSlippageCracking;\r\n      break;\r\n    case EDistressType.SWELL:\r\n      calc = _calcSwell;\r\n      break;\r\n    case EDistressType.RAVELING:\r\n      calc = _calcRaveling;\r\n      break;\r\n    case EDistressType.WEATHERING:\r\n      calc = _calcWeathering;\r\n      break;\r\n  }\r\n\r\n  const dv = calc(_severity, Math.log10(_density));\r\n  const roundedDV = _round(dv);\r\n  const formattedDV = `${type}|${severity}|${roundedDV}|${_density}`;\r\n  if (_showDebugging) {\r\n    console.log(`Deduct value: ${dv}`);\r\n    console.log(`Rounded deduct value: ${roundedDV}`);\r\n    console.log(`Formatted devduct value (type|severity|roundedDV|density): ${formattedDV}`)\r\n  }\r\n  return formattedDV;\r\n}\r\n\r\n/**\r\n * Calculate the pavement condition index (PCI)\r\n *\r\n * @param deductValues string of comma delimited values\r\n * @param showDebugging used to control debugging messages to show the various\r\n * calculations a required steps along the way.\r\n * The main reason this is optional is that it provides no value when used within\r\n * Survey123 as we have nowhere to see the messages and I wasn't sure if writing to a\r\n * console in that context could have any negative side effects.\r\n *\r\n * @returns the calculated PCI\r\n */\r\nexport function calculatePCI(\r\n  deductValues: string,\r\n  showDebugging = false\r\n): number {\r\n  // When called from survey123 we will get the args as strings\r\n\r\n  // When comparing multi-severities calculatePCI will be called multiple times\r\n  // When called from _evaluateMultiSeverity we will just recieve a comma delimited string\r\n  // When its just comma delimited we don't need to re-evaluate the multiple severities\r\n  let _deductValues = deductValues.indexOf(\"|\") > -1 ?\r\n    _evaluateMultiSeverity(deductValues, showDebugging) :\r\n    deductValues.split(\",\").map(dv => parseFloat(dv));\r\n\r\n  const _showDebugging = showDebugging === true || showDebugging.toString().toLowerCase() === \"true\";\r\n\r\n  let pci = 0;\r\n  // filter out non-numbers\r\n  _deductValues = _deductValues.filter(dv => Math.abs(dv) > 0);\r\n  if (_deductValues.length > 0) {\r\n    const maxCDV = _getMaxCDV(_deductValues, _showDebugging);\r\n    pci = 100 - _round(maxCDV);\r\n  }\r\n  return pci;\r\n}\r\n\r\n/**\r\n * Determine if corrections are required when we have multiple severities of a single distress type.\r\n *\r\n * @param deductValues string of comma delimited values e.g. \"1|L|10|0.52,1|H|7|0.58\"\r\n * @param showDebugging used to control debugging messages to show the various\r\n * calculations a required steps along the way.\r\n *\r\n * @returns an object that will contain any corrections for the current distress type\r\n */\r\nfunction _evaluateMultiSeverity(\r\n  deductValues: string,\r\n  showDebugging: boolean\r\n) {\r\n  const updates = {};\r\n  const _dvObject = _parseDeductValues(deductValues);\r\n\r\n  const multiSeverityKeys = Object.keys(_dvObject).filter(k => Object.keys(_dvObject[k]).length > 1);\r\n  if (multiSeverityKeys.length > 0) {\r\n\r\n    multiSeverityKeys.forEach(k => {\r\n      let hDeductValue;\r\n      let mDeductValue;\r\n      let lDeductValue;\r\n\r\n      let hDensity;\r\n      let mDensity;\r\n      let lDensity;\r\n\r\n      // need to know if 2 or 3 severity case\r\n      Object.keys(_dvObject[k]).forEach(_k => {\r\n        if (_k === \"H\") {\r\n          hDeductValue = _dvObject[k][_k].deductValue;\r\n          hDensity = _dvObject[k][_k].density;\r\n        } else if (_k === \"M\") {\r\n          mDeductValue = _dvObject[k][_k].deductValue;\r\n          mDensity = _dvObject[k][_k].density;\r\n        } else {\r\n          lDeductValue = _dvObject[k][_k].deductValue;\r\n          lDensity = _dvObject[k][_k].density;\r\n        }\r\n      });\r\n\r\n      const func = (hDensity && mDensity && lDensity) ?\r\n        _getThreeSeverityCaseUpdates : _getTwoSeverityCaseUpdates;\r\n\r\n      const update = func(\r\n        k,\r\n        hDeductValue,\r\n        mDeductValue,\r\n        lDeductValue,\r\n        hDensity,\r\n        mDensity,\r\n        lDensity,\r\n        showDebugging\r\n      );\r\n      if (update) {\r\n        updates[k] = update;\r\n        if (showDebugging) {\r\n          console.log(\"updates\");\r\n          console.log(updates);\r\n        }\r\n      }\r\n    });\r\n  }\r\n  return _getFinalDeductValues(deductValues, updates);\r\n}\r\n\r\n/**\r\n * Determine if corrections are required when we have 3 severities of a single distress type.\r\n *\r\n * @param type the distress type 1-19 as a string\r\n * @param hDeductValue high severity deduct value\r\n * @param mDeductValue med severity deduct value\r\n * @param lDeductValue low severity deduct value\r\n * @param hDensity high severity density\r\n * @param mDensity med severity density\r\n * @param lDensity low severity density\r\n * @param showDebugging used to control debugging messages to show the various\r\n * calculations a required steps along the way.\r\n *\r\n * @returns undefined or an object that will contain any corrections for the current distress type\r\n */\r\nfunction _getThreeSeverityCaseUpdates(\r\n  type: string,\r\n  hDeductValue: number,\r\n  mDeductValue: number,\r\n  lDeductValue: number,\r\n  hDensity: number,\r\n  mDensity: number,\r\n  lDensity: number,\r\n  showDebugging: boolean\r\n): any {\r\n  const pci1 = calculatePCI(`${hDeductValue},${mDeductValue},${lDeductValue}`, true);\r\n  if (showDebugging) {\r\n    console.log(\"pci1\");\r\n    console.log(pci1);\r\n  }\r\n  const lm = lDensity + mDensity;\r\n  const lmPCI2 = _getPCI2(type, \"M\", lm.toString(), hDeductValue, showDebugging);\r\n\r\n  const mh = mDensity + hDensity;\r\n  const mhPCI2 = _getPCI2(type, \"H\", mh.toString(), lDeductValue, showDebugging);\r\n\r\n  const lh = lDensity + hDensity;\r\n  const lhPCI2 = _getPCI2(type, \"H\", lh.toString(), mDeductValue, showDebugging);\r\n\r\n  const lmh = lDensity + mDensity + hDensity;\r\n  const lmhPCI2 = _getPCI2(type, \"H\", lmh.toString(), 0, showDebugging);\r\n\r\n  if (showDebugging) {\r\n    console.log(\"low med pci2\");\r\n    console.log(lmPCI2.pci);\r\n\r\n    console.log(\"med high pci2\");\r\n    console.log(mhPCI2.pci);\r\n\r\n    console.log(\"low high pci2\");\r\n    console.log(lhPCI2.pci);\r\n\r\n    console.log(\"low med high pci2\");\r\n    console.log(lmhPCI2.pci);\r\n  }\r\n  const pcis  = [lmPCI2, mhPCI2, lhPCI2, lmhPCI2];\r\n\r\n  const highest = pcis.reduce((prev, cur) => {\r\n    return cur.pci > pci1 && (!prev || cur.pci > prev.pci) ? cur : prev;\r\n  }, undefined);\r\n\r\n  return highest ? highest.dv : undefined;\r\n}\r\n\r\n/**\r\n * Determine if corrections are required when we have 2 severities of a single distress type.\r\n *\r\n * @param type the distress type 1-19 as a string\r\n * @param hDeductValue high severity deduct value\r\n * @param mDeductValue med severity deduct value\r\n * @param lDeductValue low severity deduct value\r\n * @param hDensity high severity density\r\n * @param mDensity med severity density\r\n * @param lDensity low severity density\r\n * @param showDebugging used to control debugging messages to show the various\r\n * calculations a required steps along the way.\r\n *\r\n * @returns undefined or an object that will contain any corrections for the current distress type\r\n */\r\nfunction _getTwoSeverityCaseUpdates(\r\n  type: string,\r\n  hDeductValue: number,\r\n  mDeductValue: number,\r\n  lDeductValue: number,\r\n  hDensity: number,\r\n  mDensity: number,\r\n  lDensity: number,\r\n  showDebugging: boolean\r\n) {\r\n  const hDV = hDeductValue || mDeductValue;\r\n  const lDV = lDeductValue || mDeductValue;\r\n  const pci1 = calculatePCI(`${hDV},${lDV}`, true);\r\n  if (showDebugging) {\r\n    console.log(\"pci1\");\r\n    console.log(pci1);\r\n  }\r\n\r\n  const hDen = hDensity || mDensity;\r\n  const lDen = lDensity || mDensity;\r\n  const sumDen = hDen + lDen;\r\n  const highestSeverity = hDen === hDensity ? \"H\" : \"M\";\r\n\r\n  const pci2 = _getPCI2(type, highestSeverity, sumDen.toString(), 0, showDebugging);\r\n  if (showDebugging) {\r\n    console.log(\"pci2\");\r\n    console.log(pci2.pci);\r\n  }\r\n  return pci2.pci > pci1 ? pci2.dv : undefined;\r\n}\r\n\r\n/**\r\n * Used to test for highest PCI when we have multiple severity cases for a single distress type.\r\n *\r\n * @param type the distress type 1-19 as a string\r\n * @param severity expects \"H\" | \"M\" | \"L\"\r\n * @param density the calculated percent density ralative to the total sample area\r\n * @param secondDeductValue optional deduct value will be 0 for all 2 severity cases and will be a non 0 number for 3 severity cases\r\n * @param showDebugging used to control debugging messages to show the various\r\n * calculations a required steps along the way.\r\n *\r\n * @returns ICorrection that contains the new PCI as well as the deduct values that should be used for corrections\r\n */\r\nfunction _getPCI2(\r\n  type: string,\r\n  severity: string,\r\n  density: string,\r\n  secondDeductValue: number,\r\n  showDebugging: boolean\r\n): ICorrection {\r\n  const deductValue = calculateDeductValue(type, severity, density);\r\n  const splitVal = deductValue.split(\"|\");\r\n  const newDV = parseFloat(splitVal[2]);\r\n  return {\r\n    pci: calculatePCI(`${splitVal[2]},${secondDeductValue}`, showDebugging),\r\n    dv: secondDeductValue ? [newDV, secondDeductValue] : [newDV]\r\n  };\r\n}\r\n\r\n/**\r\n * Parse the deduct value string into individual values for type, severity, deduct value, and density\r\n *\r\n * @param deductValues string of comma delimited values for type, severity, deduct value, and density\r\n *\r\n * @returns an object with the parsed values\r\n */\r\nfunction _parseDeductValues(\r\n  deductValues: string\r\n): any {\r\n  return deductValues.split(\",\").reduce((prev, cur) => {\r\n    const splitVal = cur.split(\"|\");\r\n    const type = splitVal[0];\r\n    const severity = splitVal[1]\r\n    const deductValue = parseFloat(splitVal[2]);\r\n    const density = parseFloat(splitVal[3]);\r\n\r\n    if (!prev[type]) {\r\n      prev[type] = {};\r\n    }\r\n    prev[type][severity] = {\r\n      deductValue,\r\n      density\r\n    };\r\n    return prev;\r\n  }, {});\r\n}\r\n\r\n/**\r\n * Replace any deduct values for the given distress types when it is determined that corrections\r\n * are required for a multi-severity case\r\n *\r\n * @param deductValues string of comma delimited values for type, severity, deduct value, and density\r\n * @param updates will contain the new corrected deduct value(s) that should be substituted for the original deduct value\r\n *\r\n * @returns an object with the parsed and updated deduct values to use for final PCI calculation\r\n */\r\nfunction _getFinalDeductValues(\r\n  deductValues: string,\r\n  updates: any\r\n) {\r\n  const skipAdditionalTypes = [];\r\n  return deductValues.split(\",\").reduce((prev, cur) => {\r\n    //0: type, 1: severity, 2: deductValue, 3: density\r\n    const splitVal = cur.split(\"|\");\r\n    const type = splitVal[0];\r\n    const deductValue = parseFloat(splitVal[2]);\r\n    if (Object.keys(updates).length > 0 && updates[type]) {\r\n      skipAdditionalTypes.push(type);\r\n      prev.push(...updates[type]);\r\n      delete (updates[type]);\r\n    } else if(skipAdditionalTypes.indexOf(type) < 0) {\r\n      prev.push(deductValue);\r\n    }\r\n    return prev;\r\n  }, []);\r\n}\r\n\r\n/**\r\n * Executes the polynomial equation using the provided values and density.\r\n * In the ASTM standard this is the step represented by finding the values\r\n * on the plotted graphs.\r\n *\r\n * @returns the calculated deduct value\r\n */\r\nfunction _calc(\r\n  density: number,\r\n  vals: number[]\r\n): number {\r\n  return vals.reduce((prev, cur, i) => {\r\n    return prev += i === 0 ? cur :\r\n      i === 1 ? (cur * density) :\r\n        (cur * Math.pow(density, i));\r\n  }, 0);\r\n}\r\n\r\n/**\r\n * Round to the nerest decimal in the 10ths place\r\n */\r\nfunction _round(\r\n  v: number\r\n): number {\r\n  return Math.round(v * 10) / 10;\r\n}\r\n\r\n/**\r\n * Execute the deduct value calculation for the distress type\r\n *\r\n * @param severity The severity of the distress type\r\n * @param density percent density of the distress type\r\n *\r\n * @returns the calculated deduct value\r\n */\r\nfunction _calcAlligator(\r\n  severity: ESeverity,\r\n  density: number\r\n): number {\r\n  const vals = severity === ESeverity.H ? [30.71, 29.22, 9.407, -6.981, -2.158, 3.047, -0.6578] :\r\n    severity === ESeverity.M ? [21.62, 21.32, 5.194, -1.343, 0.2341] :\r\n      [11.31, 16.05, 7.572, -1.471];\r\n\r\n  return _calc(density, vals);\r\n}\r\n\r\n/**\r\n * Execute the deduct value calculation for the distress type\r\n *\r\n * @param severity The severity of the distress type\r\n * @param density percent density of the distress type\r\n *\r\n * @returns the calculated deduct value\r\n */\r\nfunction _calcBleeding(\r\n  severity: ESeverity,\r\n  density: number\r\n): number {\r\n  const vals = severity === ESeverity.H ? [5.343, 6.927, 7.926, 4.265, -0.7582] :\r\n    severity === ESeverity.M ? [2.38, 5.483, 4.128, 0.8366, 0.03659, 0.1052] :\r\n      [0.01391, 0.5079, 1.576, 1.191, 0.1329, 0.03823];\r\n\r\n  return _calc(density, vals);\r\n}\r\n\r\n/**\r\n * Execute the deduct value calculation for the distress type\r\n *\r\n * @param severity The severity of the distress type\r\n * @param density percent density of the distress type\r\n *\r\n * @returns the calculated deduct value\r\n */\r\nfunction _calcBlockCracking(\r\n  severity: ESeverity,\r\n  density: number\r\n): number {\r\n  const vals = severity === ESeverity.H ? [7.926, 11.93, 8.826, 3.432, -1.382] :\r\n    severity === ESeverity.M ? [2.587, 9.142, 6.647, -0.455, -0.2439, 0.1107] :\r\n      [0.646, 4.002, 4.2, 0.4987, -0.06269];\r\n\r\n  return _calc(density, vals);\r\n}\r\n\r\n/**\r\n * Execute the deduct value calculation for the distress type\r\n *\r\n * @param severity The severity of the distress type\r\n * @param density percent density of the distress type\r\n *\r\n * @returns the calculated deduct value\r\n */\r\nfunction _calcBumpsSags(\r\n  severity: ESeverity,\r\n  density: number\r\n): number {\r\n  const vals = severity === ESeverity.H ? [52.77, 38.07, 8.964, -0.4148, -1.589, 2.478] :\r\n    severity === ESeverity.M ? [24.66, 27.86, 15.73, 3.295, -5.27, 5.921, 7.959] :\r\n      [8.768, 13.79, 7.064, 7.455, 6.041, -1.739, -1.371];\r\n\r\n  return _calc(density, vals);\r\n}\r\n\r\n/**\r\n * Execute the deduct value calculation for the distress type\r\n *\r\n * @param severity The severity of the distress type\r\n * @param density percent density of the distress type\r\n *\r\n * @returns the calculated deduct value\r\n */\r\nfunction _calcCorrugation(\r\n  severity: ESeverity,\r\n  density: number\r\n): number {\r\n  const vals = severity === ESeverity.H ? [34.21, 21.59, 1.863, 6.1410, -0.687, -1.885, 0.4916] :\r\n    severity === ESeverity.M ? [15.78, 19.69, 6.276, -2.124, 0.5868, 0.06045] :\r\n      [2.173, 5.609, 5.976, -0.7348, -0.2172, 1.494, -0.5659];\r\n\r\n  return _calc(density, vals);\r\n}\r\n\r\n/**\r\n * Execute the deduct value calculation for the distress type\r\n *\r\n * @param severity The severity of the distress type\r\n * @param density percent density of the distress type\r\n *\r\n * @returns the calculated deduct value\r\n */\r\nfunction _calcDepression(\r\n  severity: ESeverity,\r\n  density: number\r\n): number {\r\n  const vals = severity === ESeverity.H ? [17.84, 5.904, 9.406, 18.28, -2.753, -7.798, 2.402] :\r\n    severity === ESeverity.M ? [8.471, 3.171, 10.25, 12.2, -0.9687, -4.601, 1.079] :\r\n      [4.836, -0.7572, 4.786, 12.39, 1.233, -4.871, 0.9749];\r\n\r\n  return _calc(density, vals);\r\n}\r\n\r\n/**\r\n * Execute the deduct value calculation for the distress type\r\n *\r\n * @param severity The severity of the distress type\r\n * @param density percent density of the distress type\r\n *\r\n * @returns the calculated deduct value\r\n */\r\nfunction _calcEdgeCracking(\r\n  severity: ESeverity,\r\n  density: number\r\n): number {\r\n  const vals = severity === ESeverity.H ? [14.99, 13.5, 10.62, 5.15, -1.792, -2.826] :\r\n    severity === ESeverity.M ? [9.177, 10.26, 5.704, -0.6812, -0.8588, 0.2123] :\r\n      [3.049, 4.802, 4.058, -0.3556, -1.55, 1.02];\r\n\r\n  return _calc(density, vals);\r\n}\r\n\r\n/**\r\n * Execute the deduct value calculation for the distress type\r\n *\r\n * @param severity The severity of the distress type\r\n * @param density percent density of the distress type\r\n *\r\n * @returns the calculated deduct value\r\n */\r\nfunction _calcReflectionCracking(\r\n  severity: ESeverity,\r\n  density: number\r\n): number {\r\n  const vals = severity === ESeverity.H ? [14.99, 17.21, 27.63, 31.13, -20.94, -18.82, 9.985] :\r\n    severity === ESeverity.M ? [9.9193, 10.88, 8.073, 14.8, -3.792, -9.583, 3.651] :\r\n      [2.356, 6.664, 3.717, -1.393, 1.94, 1.785, -0.9707];\r\n\r\n  return _calc(density, vals);\r\n}\r\n\r\n/**\r\n * Execute the deduct value calculation for the distress type\r\n *\r\n * @param severity The severity of the distress type\r\n * @param density percent density of the distress type\r\n *\r\n * @returns the calculated deduct value\r\n */\r\nfunction _calcLaneShoulderDropOff(\r\n  severity: ESeverity,\r\n  density: number\r\n): number {\r\n  const vals = severity === ESeverity.H ? [7.549, 6.907, 7.284, 9.304, 2.064] :\r\n    severity === ESeverity.M ? [4.02, 1.744, 14.36, 15.92, -40.22, 23.6] :\r\n      [2.004, 1.065, 9.706, 11.75, -27.52, 15.04];\r\n\r\n  return _calc(density, vals);\r\n}\r\n\r\n/**\r\n * Execute the deduct value calculation for the distress type\r\n *\r\n * @param severity The severity of the distress type\r\n * @param density percent density of the distress type\r\n *\r\n * @returns the calculated deduct value\r\n */\r\nfunction _calcLongTransCracking(\r\n  severity: ESeverity,\r\n  density: number\r\n): number {\r\n  const vals = severity === ESeverity.H ? [19.56, 24.06, 12.12, 9.336, 1.532, -4.396] :\r\n    severity === ESeverity.M ? [9.751, 15.53, 4.719, 1.369, 1.206, -1.164] :\r\n      [2.347, 9.074, 8.424, -1.338, -1.873, 1.144];\r\n\r\n  return _calc(density, vals);\r\n}\r\n\r\n/**\r\n * Execute the deduct value calculation for the distress type\r\n *\r\n * @param severity The severity of the distress type\r\n * @param density percent density of the distress type\r\n *\r\n * @returns the calculated deduct value\r\n */\r\nfunction _calcPatchingUtilCutPatching(\r\n  severity: ESeverity,\r\n  density: number\r\n): number {\r\n  const vals = severity === ESeverity.H ? [20.15, 16.55, 5.415, 10.77, 3.257, -4.502] :\r\n    severity === ESeverity.M ? [10.28, 12.71, 6.174, 1.928, 0.6923, -0.4673] :\r\n      [2.523, 6.892, 5.702, 2.407, 0.2185, -0.8722];\r\n\r\n  return _calc(density, vals);\r\n}\r\n\r\n/**\r\n * Execute the deduct value calculation for the distress type\r\n *\r\n * @param severity The severity of the distress type\r\n * @param density percent density of the distress type\r\n *\r\n * @returns the calculated deduct value\r\n */\r\nfunction _calcPolishedAggregate(\r\n  severity: ESeverity,\r\n  density: number\r\n): number {\r\n  const vals = severity === \"H\" || severity === \"M\" || severity === \"L\" ?\r\n    [3.417, -26.82, 71.15, -76.22, 38.52, -6.904] : [];\r\n  return _calc(density, vals);\r\n}\r\n\r\n/**\r\n * Execute the deduct value calculation for the distress type\r\n *\r\n * @param severity The severity of the distress type\r\n * @param density percent density of the distress type\r\n *\r\n * @returns the calculated deduct value\r\n */\r\nfunction _calcPotholes(\r\n  severity: ESeverity,\r\n  density: number\r\n): number {\r\n  const vals = severity === ESeverity.H ? [110.7, 60.66, 2.378, -2.664] :\r\n    severity === ESeverity.M ? [90.47, 60.41, -0.1123, -4.746] :\r\n      [58.19, 40.53, 2.884, -1.443, 0.1195];\r\n\r\n  return _calc(density, vals);\r\n}\r\n\r\n/**\r\n * Execute the deduct value calculation for the distress type\r\n *\r\n * @param severity The severity of the distress type\r\n * @param density percent density of the distress type\r\n *\r\n * @returns the calculated deduct value\r\n */\r\nfunction _calcRailroadCrossing(\r\n  severity: ESeverity,\r\n  density: number\r\n): number {\r\n  const vals = severity === ESeverity.H ? [20, 38.64, -62.82, 193.6, -162.7, 41.22] :\r\n    severity === ESeverity.M ? [6.994, 23.47, -52.3, 167.3, -143.6, 37.64] :\r\n      [1.998, -0.7488, 13.8, -0.7917, -1.981];\r\n\r\n  return _calc(density, vals);\r\n}\r\n\r\n/**\r\n * Execute the deduct value calculation for the distress type\r\n *\r\n * @param severity The severity of the distress type\r\n * @param density percent density of the distress type\r\n *\r\n * @returns the calculated deduct value\r\n */\r\nfunction _calcRutting(\r\n  severity: ESeverity,\r\n  density: number\r\n): number {\r\n  const vals = severity === ESeverity.H ? [27.61, 25.19, 8.557, 1.65, -2.2030] :\r\n    severity === ESeverity.M ? [18.47, 20.77, 6.617, -1.13, -2.286] :\r\n      [8.833, 14.84, 3.129, 0.1451, 2.438, -1.279];\r\n\r\n  return _calc(density, vals);\r\n}\r\n\r\n/**\r\n * Execute the deduct value calculation for the distress type\r\n *\r\n * @param severity The severity of the distress type\r\n * @param density percent density of the distress type\r\n *\r\n * @returns the calculated deduct value\r\n */\r\nfunction _calcShoving(\r\n  severity: ESeverity,\r\n  density: number\r\n): number {\r\n  const vals = severity === ESeverity.H ? [18.7, 20.17, 10.3, 4.694, 1.331, -2.61] :\r\n    severity === ESeverity.M ? [10.39, 14.78, 5.488, 4.001, 3.23, -2.387] :\r\n      [4.002, 10.66, 6.332, -0.5226, -0.1923];\r\n\r\n  return _calc(density, vals);\r\n}\r\n\r\n/**\r\n * Execute the deduct value calculation for the distress type\r\n *\r\n * @param severity The severity of the distress type\r\n * @param density percent density of the distress type\r\n *\r\n * @returns the calculated deduct value\r\n */\r\nfunction _calcSlippageCracking(\r\n  severity: ESeverity,\r\n  density: number\r\n): number {\r\n  const vals = severity === ESeverity.H ? [19.73, 32.21, 25.87, -2.871, -10.55, 1.496, 0.7393] :\r\n    severity === ESeverity.M ? [11.38, 18.55, 18.38, 1.628, -7.596, 0.5841, 0.5946] :\r\n      [5.144, 12.95, 11.95, -0.833, -2.995, 1.325, -0.2113];\r\n\r\n  return _calc(density, vals);\r\n}\r\n\r\n/**\r\n * Execute the deduct value calculation for the distress type\r\n *\r\n * @param severity The severity of the distress type\r\n * @param density percent density of the distress type\r\n *\r\n * @returns the calculated deduct value\r\n */\r\nfunction _calcSwell(\r\n  severity: ESeverity,\r\n  density: number\r\n): number {\r\n  const vals = severity === ESeverity.H ? [34, 16.84, -23.09, 41.17, -14.84] :\r\n    severity === ESeverity.M ? [12, 15.67, 20.59, -28.33, 21, -5.508] :\r\n      [1.995, 11.9, -12.83, 16.74, -5.361];\r\n\r\n  return _calc(density, vals);\r\n}\r\n\r\n/**\r\n * Execute the deduct value calculation for the distress type\r\n *\r\n * @param severity The severity of the distress type\r\n * @param density percent density of the distress type\r\n *\r\n * @returns the calculated deduct value\r\n */\r\nfunction _calcRaveling(\r\n  severity: ESeverity,\r\n  density: number\r\n): number {\r\n  const vals = severity === ESeverity.H ? [16.77, 10.67, 5.758, 12.9, -0.0633, -5.659, 1.48] :\r\n    severity === ESeverity.M ? [8.512, 5.106, 1.63, 3.469, 1.028, -1.211, 0.1938] :\r\n      [];\r\n\r\n  return _calc(density, vals);\r\n}\r\n\r\n/**\r\n * Execute the deduct value calculation for the distress type\r\n *\r\n * @param severity The severity of the distress type\r\n * @param density percent density of the distress type\r\n *\r\n * @returns the calculated deduct value\r\n */\r\nfunction _calcWeathering(\r\n  severity: ESeverity,\r\n  density: number\r\n): number {\r\n  const vals = severity === ESeverity.H ? [3.673, 3.349, 2.598, -1.233, 2.754, 2.434, -1.485] :\r\n    severity === ESeverity.M ? [1.12, 0.9769, 0.93, -0.5955, 1.041, 1.111, -0.614] :\r\n      [-0.0386, -0.0736, 0.834, 1.63, -0.0287, -0.639, 0.1515];\r\n\r\n  return _calc(density, vals);\r\n}\r\n\r\n/**\r\n * Determine maximum Corrected Deduct Value (CDV) iteratively\r\n *\r\n * @param deductValues The calculated deduct values that will be used to determine max CDV\r\n * @param showDebugging used to optionally show debugging messages\r\n *\r\n * @returns the max CDV value\r\n */\r\nfunction _getMaxCDV(\r\n  deductValues: number[],\r\n  showDebugging: boolean\r\n): number {\r\n  let maxCDV;\r\n  // If none or only one individual deduct value is greater\r\n  // than two, the total value is used in place of the maximum CD\r\n  const valuesGreaterThan2 = deductValues.filter(deductValue => deductValue > 2);\r\n  if (valuesGreaterThan2.length <= 1) {\r\n    maxCDV = valuesGreaterThan2.reduce((prev, cur) => {\r\n      prev += cur;\r\n      return prev;\r\n    }, 0);\r\n    if (showDebugging) {\r\n      console.log(\"If none or only one individual deduct value is greater\");\r\n      console.log(\"than two, the total value is used in place of the maximum CD\");\r\n      console.log(`Max CDV: ${maxCDV}`);\r\n    }\r\n  } else {\r\n    // sort in descending order (section 9.5.2 in ASTM doc)\r\n    const sortedDVs = deductValues.sort((a, b) => b - a);\r\n\r\n    // Determine the allowable number of deducts, m (section 9.5.3 in ASTM doc)\r\n    const highestDV = sortedDVs[0];\r\n    // m = allowable number of deducts including fractions (must be less than or equal to ten)\r\n    const m = 1 + (9/98) * (100 - highestDV);\r\n\r\n    if (showDebugging) {\r\n      console.log(`Deduct values sorted in descending order: ${sortedDVs}`);\r\n      console.log(`Highest deduct value: ${highestDV}`);\r\n      console.log(`Allowable number of deducts including fractions: ${m}`);\r\n    }\r\n\r\n    // TODO they mention (must be less than or equal to ten) but don't say what happens if its over\r\n    if (m <= 10) {\r\n      const vals = _reduceDeductValues(sortedDVs, m);\r\n\r\n      if (showDebugging) {\r\n        console.log(`Reduce deduct values to the m largest including the fractional part: ${vals}`);\r\n      }\r\n\r\n      // iteratively determined cdv values\r\n      const cdvs = _getCDVs(vals, showDebugging);\r\n      maxCDV = Math.max(...cdvs);\r\n\r\n      if (showDebugging) {\r\n        console.log(`Max CDV: ${maxCDV}`);\r\n      }\r\n    } else {\r\n      if (showDebugging) {\r\n        console.log(\"Allowable number of deducts including fractions (must be less than or equal to ten)\");\r\n      }\r\n    }\r\n  }\r\n\r\n  return maxCDV;\r\n}\r\n\r\n/**\r\n * Reduce deduct values to the m largest including the fractional part\r\n *\r\n * @param sortedDVs individual deduct values in descending order\r\n * @param m allowable number of deducts (9.5.3 in ASTM standard)\r\n *\r\n * @returns updated deduct values\r\n */\r\nfunction _reduceDeductValues(\r\n  sortedDVs: number[],\r\n  m: number\r\n): number[] {\r\n  const fractionalPart = m - Math.floor(m);\r\n  // If less than m deduct values are available, all of the deduct values are used\r\n  return sortedDVs.length < m ? sortedDVs :\r\n    sortedDVs.reduce((prev, cur, i) => {\r\n      if (i + 1 < m) {\r\n        prev.push(cur);\r\n      } else if (fractionalPart > 0) {\r\n        prev.push(_round(cur * fractionalPart));\r\n      }\r\n      return prev;\r\n    }, []);\r\n}\r\n\r\n/**\r\n * Reduce the smallest individual deduct value greater to 2.0 and repeat\r\n *\r\n * @param vals the list of deduct values\r\n * @param showDebugging optionally show debugging messages\r\n *\r\n * @returns array of CDV values\r\n */\r\nfunction _getCDVs(\r\n  vals: number[],\r\n  showDebugging: boolean\r\n): number[] {\r\n  let len = vals.length;\r\n\r\n  const cdvs = [];\r\n  while (len >= 1) {\r\n    if (showDebugging) {\r\n      console.log(`vals: ${vals}`);\r\n    }\r\n    cdvs.push(_getCDV(vals, showDebugging));\r\n    len -= 1;\r\n    vals.splice(len, 1, 2);\r\n  }\r\n  return cdvs;\r\n}\r\n\r\n/**\r\n * Determine the total and max number deducts higher than two and calculate the CDV\r\n *\r\n * @param vals the list of deduct values\r\n * @param showDebugging optionally show debugging messages\r\n *\r\n * @returns the calculated CDV\r\n */\r\nfunction _getCDV(\r\n  vals: number[],\r\n  showDebugging: boolean\r\n): number {\r\n  // section 9.5.5.1 in ASTM doc\r\n  const totalDV = vals.reduce((prev, cur) => prev += cur, 0);\r\n\r\n  // section 9.5.5.2 in ASTM doc\r\n  // the number of deducts with a value greater than 2.0\r\n  const q = vals.reduce((prev, cur) => cur > 2 ? prev + 1 : prev, 0);\r\n\r\n  // section 9.5.5.3 in ASTM doc\r\n  return _calcCDV(totalDV, q, showDebugging);\r\n}\r\n\r\n/**\r\n * Determine the total and max number deducts higher than two and calculate the CDV\r\n *\r\n * @param total the sum of all deduct values\r\n * @param q the number of deducts with a value greater than 2.0\r\n * @param showDebugging optionally show debugging messages\r\n *\r\n * @returns the calculated CDV\r\n */\r\nfunction _calcCDV(\r\n  total: number,\r\n  q: number,\r\n  showDebugging: boolean\r\n): number {\r\n  // Determine the CDV from total deduct value and q\r\n  const vals2 = {\r\n    7: [-9.482, 0.6045, 0.0003563, -5.448e-06],\r\n    6: [-8.165, 0.5724, 0.0004266, -4.254e-06],\r\n    5: [-7.932, 0.6091, 0.0003464, -4.265e-06],\r\n    4: [-6.78, 0.6301, 0.0007376, -6.357e-06],\r\n    3: [-5.015, 0.7546, -0.00043, -3.075e-06],\r\n    2: [-1.668, 0.7992, -0.0003013, -5.214e-06],\r\n    1: [1.651e-15, 1, -4.249e-18, 1.149e-19]\r\n  };\r\n\r\n  const cdv = _calc(total, vals2[q >= 7 ? 7 : q])\r\n\r\n  if (showDebugging) {\r\n    console.log(`totalDV: ${total}`);\r\n    console.log(`q: ${q}`);\r\n    console.log(`CDV: ${cdv}`);\r\n  }\r\n\r\n  return cdv;\r\n}\r\n"]}