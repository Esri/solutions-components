{"file":"date-e21b2052.js","mappings":"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","names":["numberStringFormatter"],"sources":["./node_modules/@esri/calcite-components/dist/collection/utils/date.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.0.0-beta.97\n */\nimport { numberStringFormatter } from \"./locale\";\n/**\n * Check if date is within a min and max\n *\n * @param date\n * @param min\n * @param max\n */\nexport function inRange(date, min, max) {\n  const time = date.getTime();\n  const afterMin = !(min instanceof Date) || time >= min.getTime();\n  const beforeMax = !(max instanceof Date) || time <= max.getTime();\n  return afterMin && beforeMax;\n}\n/**\n * Ensures date is within range,\n * returns min or max if out of bounds\n *\n * @param date\n * @param min\n * @param max\n */\nexport function dateFromRange(date, min, max) {\n  if (!(date instanceof Date)) {\n    return null;\n  }\n  const time = date.getTime();\n  const beforeMin = min instanceof Date && time < min.getTime();\n  const afterMax = max instanceof Date && time > max.getTime();\n  if (beforeMin) {\n    return min;\n  }\n  if (afterMax) {\n    return max;\n  }\n  return date;\n}\n/**\n * Parse an iso8601 string (YYYY-mm-dd) into a valid date.\n * TODO: handle time when time of day UI is added\n *\n * @param iso8601\n * @param isEndDate\n */\nexport function dateFromISO(iso8601, isEndDate = false) {\n  if (iso8601 instanceof Date) {\n    return iso8601;\n  }\n  if (!iso8601 || typeof iso8601 !== \"string\") {\n    return null;\n  }\n  const d = iso8601.split(/[: T-]/).map(parseFloat);\n  const date = new Date(d[0], (d[1] || 1) - 1, d[2] || 1);\n  date.setFullYear(d[0]);\n  if (isNaN(date.getTime())) {\n    throw new Error(`Invalid ISO 8601 date: \"${iso8601}\"`);\n  }\n  if (isEndDate) {\n    return setEndOfDay(date);\n  }\n  return date;\n}\n/**\n * Return first portion of ISO string (YYYY-mm-dd)\n *\n * @param date\n */\nexport function dateToISO(date) {\n  if (typeof date === \"string\") {\n    return date;\n  }\n  if (date instanceof Date) {\n    return new Date(date.getTime() - date.getTimezoneOffset() * 60000).toISOString().split(\"T\")[0];\n  }\n  return \"\";\n}\n/**\n * Check if two dates are the same day, month, year\n *\n * @param d1\n * @param d2\n */\nexport function sameDate(d1, d2) {\n  return (d1 instanceof Date &&\n    d2 instanceof Date &&\n    d1.getDate() === d2.getDate() &&\n    d1.getMonth() === d2.getMonth() &&\n    d1.getFullYear() === d2.getFullYear());\n}\n/**\n * Get a date one month in the past\n *\n * @param date\n */\nexport function prevMonth(date) {\n  const month = date.getMonth();\n  const nextDate = new Date(date);\n  nextDate.setMonth(month - 1);\n  // date doesn't exist in new month, use last day\n  if (month === nextDate.getMonth()) {\n    return new Date(date.getFullYear(), month, 0);\n  }\n  return nextDate;\n}\n/**\n * Get a date one month in the future\n *\n * @param date\n */\nexport function nextMonth(date) {\n  const month = date.getMonth();\n  const nextDate = new Date(date);\n  nextDate.setMonth(month + 1);\n  // date doesn't exist in new month, use last day\n  if ((month + 2) % 7 === nextDate.getMonth() % 7) {\n    return new Date(date.getFullYear(), month + 2, 0);\n  }\n  return nextDate;\n}\n/**\n * Parse numeric units for day, month, and year from a localized string\n * month starts at 0 (can pass to date constructor)\n *\n * @param str\n * @param localeData\n */\nexport function parseDateString(str, localeData) {\n  const { separator, unitOrder } = localeData;\n  const order = getOrder(unitOrder);\n  const values = str.split(separator).map((part) => numberStringFormatter.delocalize(part));\n  return {\n    day: parseInt(values[order.indexOf(\"d\")]),\n    month: parseInt(values[order.indexOf(\"m\")]) - 1,\n    year: parseInt(values[order.indexOf(\"y\")])\n  };\n}\n/**\n * Based on the unitOrder string, find order of month, day, and year for locale\n *\n * @param unitOrder\n */\nexport function getOrder(unitOrder) {\n  const signifiers = [\"d\", \"m\", \"y\"];\n  const order = unitOrder.toLowerCase();\n  return signifiers.sort((a, b) => order.indexOf(a) - order.indexOf(b));\n}\n/**\n * Get number of days between two dates\n *\n * @param date1\n * @param date2\n */\nexport function getDaysDiff(date1, date2) {\n  const ts1 = date1.getTime();\n  const ts2 = date2.getTime();\n  return (ts1 - ts2) / (1000 * 3600 * 24);\n}\n/**\n * Set time of the day to the end.\n *\n * @param {Date} date Date.\n * @returns {Date} Date with time set to end of day .\n */\nexport function setEndOfDay(date) {\n  date.setHours(23, 59, 59, 999);\n  return date;\n}\n"],"version":3}