{"file":"deduct-calculator.entry.cjs.js","mappings":";;;;;;;;;;;;AAAA,MAAM,mBAAmB,GAAG,uGAAuG;;MC8BtH,gBAAgB;EAL7B;;;;;;IAmDY,WAAM,GAAa,MAAM,CAAC,IAAI,CAACA,sBAAa,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAACA,sBAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;GAiKvG;;;;;;;;;EA/HC,MAAM;IACJ,QACEC,QAACC,UAAI,QACHD,iBAAK,KAAK,EAAC,eAAe,IACxBA,2BAAe,KAAK,EAAC,eAAe,iBAEjC,IAAI,CAAC,gBAAgB,EAAE,CACV,EAChBA,2BAAe,KAAK,EAAC,eAAe,YAEjC,IAAI,CAAC,aAAa,EAAE,CACP,EAChBA,2BAAe,KAAK,EAAC,eAAe,gBAEjC,IAAI,CAAC,iBAAiB,EAAE,CACX,CACZ,EACNA,qBACG,IAAI,CAAC,kBAAkB,EAAE,CACtB,CACD,EACP;GACH;;;;;;;;;;;;;EAeS,gBAAgB;IACxB,QACEA,2BACE,GAAG,EAAE,GAAG,EACR,GAAG,EAAE,CAAC,EACN,GAAG,EAAE,CAAC,EAAE,OAAO,IAAI,CAAC,eAAe,GAAG,EAAE,CAAA,EAAE,EAC1C,IAAI,EAAC,QAAQ,GACb,EACF;GACH;;;;;;;;;EAUS,aAAa;IACrB,QACEA,4BAAgB,KAAK,EAAC,EAAE,EAAC,GAAG,EAAE,CAAC,EAAE,OAAO,IAAI,CAAC,YAAY,GAAG,EAAE,CAAA,EAAE,IAE5D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAKA,4BAAgB,KAAK,EAAED,sBAAa,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,IAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAkB,CAAC,CAEtG,EACjB;GACH;;;;;;;;;EAUS,iBAAiB;IACzB,QACEC,4BAAgB,KAAK,EAAC,EAAE,EAAC,GAAG,EAAE,CAAC,EAAE,OAAO,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAA,EAAE,IAClEA,4BAAgB,KAAK,EAAEE,kBAAS,CAAC,CAAC,WAAuB,EACzDF,4BAAgB,KAAK,EAAEE,kBAAS,CAAC,CAAC,aAAyB,EAC3DF,4BAAgB,KAAK,EAAEE,kBAAS,CAAC,CAAC,UAAsB,CACzC,EACjB;GACH;;;;;;;;EASS,kBAAkB;IAC1B,QACEF,4BACE,OAAO,EACL,MAAM,IAAI,CAAC,gBAAgB,CACzB,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EACnC,IAAI,CAAC,gBAAgB,CAAC,KAA6B,EACnD,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CACvC,6BAEmC,EACxC;GACH;;;;;;;;;;EAWS,gBAAgB,CACxB,IAAY,EACZ,QAAmB,EACnB,OAAe;IAEf,IAAI,IAAI,IAAI,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE;MACvC,MAAM,EAAE,GAAGG,6BAAoB,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAC;MAChG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;MAClC,KAAK,CAAC,EAAE,CAAC,CAAC;KACX;SAAM;MACL,KAAK,CAAC,mDAAmD,CAAC,CAAC;KAC5D;GACF;;;;;;;","names":["EDistressType","h","Host","ESeverity","calculateDeductValue"],"sources":["./src/components/deduct-calculator/deduct-calculator.css?tag=deduct-calculator&encapsulation=shadow","./src/components/deduct-calculator/deduct-calculator.tsx"],"sourcesContent":["/** @license\r\n * Copyright 2022 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n:host {\r\n  display: block;\r\n  --calcite-label-margin-bottom: 0;\r\n}\r\n\r\n.label-display {\r\n  display: block;\r\n  padding-bottom: 1rem;\r\n}\r\n","/** @license\r\n * Copyright 2022 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// This is a demo component for internal use only.\r\n// It may eventually live somewhere else and doesn't really need to be a component.\r\n// The main code will be whats in the supporting util file...it will be used by a survey123 form.\r\n// It has been requested that we have a simple way to demo and test the functionality.\r\n// I am putting here now just to keep together with other current work.\r\n\r\nimport { Component, Element, Event, EventEmitter, Host, h, VNode } from '@stencil/core';\r\nimport { calculateDeductValue, EDistressType, ESeverity } from '../../utils/pciUtils';\r\n\r\n@Component({\r\n  tag: 'deduct-calculator',\r\n  styleUrl: 'deduct-calculator.css',\r\n  shadow: true,\r\n})\r\nexport class DeductCalculator {\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Host element access\r\n  //\r\n  //--------------------------------------------------------------------------\r\n  @Element() el: HTMLBufferToolsElement;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  State (internal)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * HTMLCalciteInputElement: The html element for setting the density value\r\n   */\r\n  protected _densityElement: HTMLCalciteInputElement;\r\n\r\n  /**\r\n   * HTMLCalciteSelectElement: The html element for selecting the distress type\r\n   * 1-19 based on values defined by ASTM standard\r\n   */\r\n  protected _typeElement: HTMLCalciteSelectElement;\r\n\r\n  /**\r\n   * HTMLCalciteSelectElement: The html element for selecting the distress severity\r\n   * \"H\" | \"M\" | \"L\"\r\n   */\r\n  protected _severityElement: HTMLCalciteSelectElement;\r\n\r\n  /**\r\n   * string[]: Array of the distress types\r\n   */\r\n  protected _types: string[] = Object.keys(EDistressType).filter(k => !isNaN(Number(EDistressType[k])));\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Watch handlers\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Methods (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Events (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Emitted on demand when the user clicks to calculate the deduct value\r\n   */\r\n  @Event() deductValueComplete: EventEmitter<string>;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Functions (lifecycle)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Renders the component.\r\n   */\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <div class=\"label-display\">\r\n          <calcite-label class=\"label-display\">\r\n            Density %\r\n            {this._getDensityInput()}\r\n          </calcite-label>\r\n          <calcite-label class=\"label-display\">\r\n            Type\r\n            {this._getTypeInput()}\r\n          </calcite-label>\r\n          <calcite-label class=\"label-display\">\r\n            Severity\r\n            {this._getSeverityInput()}\r\n          </calcite-label>\r\n        </div>\r\n        <div>\r\n          {this._getCalculateInput()}\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Functions (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Render the density input\r\n   *\r\n   * @returns a node with a control to set the density number (float)\r\n   *\r\n   * @protected\r\n   */\r\n  protected _getDensityInput(): VNode {\r\n    return (\r\n      <calcite-input\r\n        max={100}\r\n        min={0}\r\n        ref={(el) => { this._densityElement = el }}\r\n        type='number'\r\n      />\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Render the distress type input\r\n   *\r\n   * @returns a node with a control that shows the distress type name and value\r\n   * for example ALLIGATOR_CRACKING (1)\r\n   *\r\n   * @protected\r\n   */\r\n  protected _getTypeInput(): VNode {\r\n    return (\r\n      <calcite-select label='' ref={(el) => { this._typeElement = el }}>\r\n        {\r\n          this._types.map((t, i) => <calcite-option value={EDistressType[t].toString()}>{`${t} (${i + 1})`}</calcite-option>)\r\n        }\r\n      </calcite-select>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Render the distress type input\r\n   *\r\n   * @returns a node with a control that shows the distress type name and value\r\n   * for example ALLIGATOR_CRACKING (1)\r\n   *\r\n   * @protected\r\n   */\r\n  protected _getSeverityInput(): VNode {\r\n    return (\r\n      <calcite-select label='' ref={(el) => { this._severityElement = el }}>\r\n        <calcite-option value={ESeverity.H}>High</calcite-option>\r\n        <calcite-option value={ESeverity.M}>Medium</calcite-option>\r\n        <calcite-option value={ESeverity.L}>Low</calcite-option>\r\n      </calcite-select>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Render calculate deduct value button\r\n   *\r\n   * @returns a node with a control that calculates the deduct value\r\n   *\r\n   * @protected\r\n   */\r\n  protected _getCalculateInput(): VNode {\r\n    return (\r\n      <calcite-button\r\n        onClick={\r\n          () => this._calculateDeduct(\r\n            parseFloat(this._typeElement.value),\r\n            this._severityElement.value as unknown as ESeverity,\r\n            parseFloat(this._densityElement.value)\r\n          )\r\n        }\r\n      >Calculate Deduct Value</calcite-button>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Calculate the deduct value based on the user inputs using the ASTM methodology\r\n   *\r\n   * @param type distress type 1-19 based on ASTM\r\n   * @param severity \"H\" | \"M\" | \"L\" high, med, low based on ASTM\r\n   * @param density percent density of the distress type and severity based on total sample area\r\n   *\r\n   * @protected\r\n   */\r\n  protected _calculateDeduct(\r\n    type: number,\r\n    severity: ESeverity,\r\n    density: number\r\n  ): void {\r\n    if (type && severity && !isNaN(density)) {\r\n      const dv = calculateDeductValue(type.toString(), severity.toString(), density.toString(), true);\r\n      this.deductValueComplete.emit(dv);\r\n      alert(dv);\r\n    } else {\r\n      alert(\"Type, severity, and a density number are required\");\r\n    }\r\n  }\r\n}\r\n"],"version":3}