{"file":"check-list.entry.cjs.js","mappings":";;;;;;;;;;;AAAA,MAAM,YAAY,GAAG,sBAAsB;;MCuB9B,SAAS;;;;;;;;;;;;;;;;;;IA0CV,cAAS,GAAiC,EAAE,CAAC;0BAxBb,IAAI;;;;;;;;;;;;;;;;;;EA4C9C,MAAM,aAAa;IACjB,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,GAAG;MACrC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC;MAC9B,OAAO,IAAI,CAAC;KACb,EAAE,EAAE,CAAC,CAAC;GACR;;;;;;;;;;;;;;EAiBD,MAAM,gBAAgB;IACpB,IAAI,IAAI,CAAC,cAAc,EAAE;MACvB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;QACvB,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC;OACnB,CAAC,CAAC;KACJ;GACF;;;;EAKD,MAAM;IACJ,QACEA,QAACC,UAAI,QACHD,qBACG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,CAChC,CACD,EACP;GACH;;;;;;;;;;;;EAcS,iBAAiB,CACzB,MAAgB;IAEhB,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;MACjB,QACEA,2BAAe,MAAM,EAAC,QAAQ,IAC5BA,8BAAkB,GAAG,EAAE,CAAC,EAAE,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,GAAI,EACnE,CAAC,CACY,EAChB;KACH,CAAC,CAAA;GACH;;;;;;;","names":["h","Host"],"sources":["./src/components/check-list/check-list.css?tag=check-list&encapsulation=shadow","./src/components/check-list/check-list.tsx"],"sourcesContent":[":host {\r\n  display: block;\r\n}\r\n","/** @license\r\n * Copyright 2022 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { Component, Element, Host, h, Method, Prop, VNode } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'check-list',\r\n  styleUrl: 'check-list.css',\r\n  shadow: true,\r\n})\r\nexport class CheckList {\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Host element access\r\n  //\r\n  //--------------------------------------------------------------------------\r\n  @Element() el: HTMLCheckListElement;\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * boolean: All checkboxes checked state will be set with this value on first render.\r\n   * Default is true\r\n   */\r\n  @Prop({ reflect: true }) defaultChecked = true;\r\n\r\n  /**\r\n   * string []: The values to render beside the checkboxes\r\n   */\r\n  @Prop() values: string[];\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  State (internal)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Properties (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * A list of all checkbox elements for this component\r\n   *\r\n   * @protected\r\n   */\r\n  protected _elements: HTMLCalciteCheckboxElement[] = [];\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Watch handlers\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Methods (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Returns a key/value pair that represents the checkbox value and checked state\r\n   *\r\n   * @returns Promise with the state of the checkboxes\r\n   */\r\n  @Method()\r\n  async getConfigInfo(): Promise<{ [key: string]: boolean }> {\r\n    return this._elements.reduce((prev, cur) => {\r\n      prev[cur.value] = cur.checked;\r\n      return prev;\r\n    }, {});\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Events (public)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Functions (lifecycle)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * StencilJS: Called once just after the component is fully loaded and the first render() occurs.\r\n   */\r\n  async componentDidLoad(): Promise<void> {\r\n    if (this.defaultChecked) {\r\n      this._elements.forEach(el => {\r\n        el.checked = true;\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Renders the component.\r\n   */\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <div>\r\n          {this._renderCheckboxes(this.values)}\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  //--------------------------------------------------------------------------\r\n  //\r\n  //  Functions (protected)\r\n  //\r\n  //--------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Render a checkbox with a label for each of the types listed in the NLS\r\n   *\r\n   * @returns Array of label/checkbox input nodes\r\n   * @protected\r\n   */\r\n  protected _renderCheckboxes(\r\n    values: string[]\r\n  ): VNode[] {\r\n    return values.map(v => {\r\n      return (\r\n        <calcite-label layout=\"inline\">\r\n          <calcite-checkbox ref={(el) => this._elements.push(el)} value={v} />\r\n          {v}\r\n        </calcite-label>\r\n      );\r\n    })\r\n  }\r\n}\r\n"],"version":3}