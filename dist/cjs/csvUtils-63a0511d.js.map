{"file":"csvUtils-63a0511d.js","mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;AAgBA;;;;;;;;SAQgB,SAAS,CACvB,UAAyB,EACzB,WAAgB,EAChB,WAAqB,EACrB,gBAAgB,GAAG,IAAI;EAEvB,MAAM,WAAW,GAAG,cAAc,CAAC,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,gBAAgB,CAAC,CAAC;EAE3F,gBAAgB,CAAC,WAAW,EAAE,UAAU,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;AACnE,CAAC;AAED;;;;;;;;AAQA,SAAS,gBAAgB,CACvB,WAAqB,EACrB,SAAiB;EAEjB,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;EACzC,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,EAAE;IAC/B,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,eAAe,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,yBAAyB,EAAE,CAAC,CAAC,CAAC;IAC5F,IAAI,CAAC,QAAQ,GAAG,GAAG,SAAS,MAAM,IAAI,YAAY,CAAC;IACnD,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC;IACjC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAChC,IAAI,CAAC,KAAK,EAAE,CAAC;IACb,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;GACjC;AACH,CAAC;AAED;;;;;;;;;;AAUA,SAAS,cAAc,CACrB,QAAuB,EACvB,WAAgB,EAChB,WAAqB,EACrB,gBAAgB,GAAG,IAAI;;EAGvB,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;;;EAIzB,IAAI,WAAW,GAAG,QAAQ,CAAC,GAAG,CAC5B,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CACtE,CAAC;;EAGF,IAAI,gBAAgB,EAAE;IACpB,MAAM,OAAO,GAAgB,IAAI,GAAG,EAAE,CAAC;IACvC,WAAW,CAAC,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/C,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;GACnC;;EAGD,IAAI,WAAW,EAAE;IACf,MAAM,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;IACzF,WAAW,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;GACtC;EAED,OAAO,WAAW,CAAC;AACrB;;;;","names":[],"sources":["./src/utils/csvUtils.ts"],"sourcesContent":["/** @license\r\n * Copyright 2022 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * Export a csv of the attributes from the features that match the provided ids\r\n *\r\n * @param attributes Array of content to convert into lines of output\r\n * @param columnNames Column names to add to the beginning of the output array\r\n * @param labelFormat Field format per label\r\n * @param removeDuplicates Remove duplicate lines\r\n */\r\nexport function exportCSV(\r\n  attributes: Set<string>[],\r\n  columnNames: any,\r\n  labelFormat: string[],\r\n  removeDuplicates = true\r\n): void {\r\n  const outputLines = _prepareOutput(attributes, columnNames, labelFormat, removeDuplicates);\r\n\r\n  _downloadCSVFile(outputLines, `notify-${Date.now().toString()}`);\r\n}\r\n\r\n/**\r\n * Download the CSV file\r\n *\r\n * @param outputLines Lines of output to write to file\r\n * @param fileTitle Title (without file extension) to use for file; defaults to \"export\"\r\n *\r\n * @see {@link https://medium.com/@danny.pule/export-json-to-csv-file-using-javascript-a0b7bc5b00d2}\r\n */\r\nfunction _downloadCSVFile(\r\n  outputLines: string[],\r\n  fileTitle: string\r\n): void {\r\n  const link = document.createElement(\"a\");\r\n  if (link.download !== undefined) {\r\n    link.href = URL.createObjectURL(new Blob(outputLines, { type: \"text/csv;charset=utf-8;\" }));\r\n    link.download = `${fileTitle}.csv` || \"export.csv\";\r\n    link.style.visibility = \"hidden\";\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  }\r\n}\r\n\r\n/**\r\n * Converts output into an array of line strings.\r\n *\r\n * @param contents Array of content to convert into lines of output\r\n * @param columnNames Column names to add to the beginning of the output array\r\n * @param labelFormat Field format per label\r\n * @param removeDuplicates Remove duplicate lines\r\n *\r\n * @returns Array of line strings\r\n */\r\nfunction _prepareOutput(\r\n  contents: Set<string>[],\r\n  columnNames: any,\r\n  labelFormat: string[],\r\n  removeDuplicates = true\r\n): string[] {\r\n  // Format the input into labels\r\n  console.log(labelFormat);\r\n\r\n  // Format values to string so it doesn't get tripped up when a value has a comma\r\n  // another option could be to export with a different delimiter\r\n  let outputLines = contents.map(\r\n    values => Object.values(values).map(v => `\"${v}\"`).join(\",\") + \"\\r\\n\"\r\n  );\r\n\r\n  // Remove duplicates if desired\r\n  if (removeDuplicates) {\r\n    const uniques: Set<string> = new Set();\r\n    outputLines.forEach(line => uniques.add(line));\r\n    outputLines = Array.from(uniques);\r\n  }\r\n\r\n  // Add the column names to the output\r\n  if (columnNames) {\r\n    const columnNamesLine = Object.values(columnNames).map(v => `\"${v}\"`).join(\",\") + \"\\r\\n\";\r\n    outputLines.unshift(columnNamesLine);\r\n  }\r\n\r\n  return outputLines;\r\n}\r\n"],"version":3}